#!/usr/bin/env python3
"""
Simple script to extract ALL available field names from the microservice
and save them to a readable file for field selection.
"""

import requests
import json
import re

# Microservice configuration
MICROSERVICE_URL = "https://shap-demographic-analytics-v3.onrender.com"
API_KEY = "HFqkccbN3LV5CaB"

def get_all_field_names():
    """Get complete list of all field names by triggering error response"""
    
    print("🔍 Getting complete field list from microservice...")
    
    # Trigger error to get full field list
    response = requests.post(
        f"{MICROSERVICE_URL}/analyze",
        headers={"X-API-Key": API_KEY, "Content-Type": "application/json"},
        json={"query": "test", "matched_fields": ["INVALID_FIELD_TO_TRIGGER_ERROR"]}
    )
    
    if response.status_code == 400:
        error_text = response.text
        print(f"✅ Got error response with field information")
        
        # Extract field names from error message
        # Pattern: "Available fields include: field1, field2, field3..."
        match = re.search(r'Available fields include:\s*([^"]+)', error_text)
        if match:
            fields_text = match.group(1)
            
            # Parse field names (comma separated)
            raw_fields = [field.strip() for field in fields_text.split(',')]
            
            # Clean up field names - remove any trailing info like "(total: X fields)"
            clean_fields = []
            for field in raw_fields:
                # Remove parenthetical info and ellipsis
                clean_field = re.sub(r'\s*\([^)]*\).*$', '', field)
                clean_field = re.sub(r'\.{3,}.*$', '', clean_field)  # Remove "..." and after
                clean_field = clean_field.strip()
                
                if clean_field and len(clean_field) > 0 and not clean_field.startswith('('):
                    clean_fields.append(clean_field)
            
            return clean_fields
        else:
            print("❌ Could not parse field names from error response")
            return []
    else:
        print(f"❌ Unexpected response: {response.status_code}")
        return []

def save_field_list(fields):
    """Save fields to multiple formats for easy review"""
    
    if not fields:
        print("❌ No fields to save")
        return
    
    print(f"💾 Saving {len(fields)} fields to files...")
    
    # Save as simple text list
    with open("../public/data/microservice-available-fields.txt", "w") as f:
        f.write("# All Available Fields in Microservice\n")
        f.write(f"# Total: {len(fields)} fields\n")
        f.write("# Generated by list-all-microservice-fields.py\n\n")
        
        for i, field in enumerate(fields, 1):
            f.write(f"{i:3d}. {field}\n")
    
    # Save as JSON for programmatic use
    field_data = {
        "total_fields": len(fields),
        "extraction_method": "error_response_parsing",
        "fields": fields
    }
    
    with open("../public/data/microservice-available-fields.json", "w") as f:
        json.dump(field_data, f, indent=2)
    
    # Save as markdown for easy reading
    with open("../public/data/microservice-available-fields.md", "w") as f:
        f.write("# Microservice Available Fields\n\n")
        f.write(f"**Total Fields:** {len(fields)}\n\n")
        f.write("## Complete Field List\n\n")
        
        for i, field in enumerate(fields, 1):
            f.write(f"{i}. `{field}`\n")
    
    print(f"✅ Files created:")
    print(f"   - ../public/data/microservice-available-fields.txt (simple list)")
    print(f"   - ../public/data/microservice-available-fields.json (JSON format)")
    print(f"   - ../public/data/microservice-available-fields.md (markdown)")

def main():
    print("🚀 MICROSERVICE FIELD EXTRACTION")
    print("=" * 50)
    
    # Get all field names
    fields = get_all_field_names()
    
    if fields:
        print(f"📊 Found {len(fields)} available fields")
        print(f"📋 Sample fields:")
        for i, field in enumerate(fields[:10]):
            print(f"   {i+1:2d}. {field}")
        
        if len(fields) > 10:
            print(f"   ... and {len(fields) - 10} more fields")
        
        # Save to files
        save_field_list(fields)
        
        print(f"\n🎯 SUCCESS! Complete field list saved.")
        print(f"   Review the files above to select which fields to include.")
        
    else:
        print("❌ Failed to extract field list")

if __name__ == "__main__":
    main() 