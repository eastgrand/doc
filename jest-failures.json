{"numFailedTestSuites":10,"numFailedTests":134,"numPassedTestSuites":2,"numPassedTests":199,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":3,"numTodoTests":0,"numTotalTestSuites":12,"numTotalTests":333,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1747710214289,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Query Complexity Scorer"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"Query Complexity Scorer should identify simple queries","invocations":1,"location":{"column":3,"line":5},"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should identify simple queries"},{"ancestorTitles":["Query Complexity Scorer"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m4\u001b[39m\nReceived:   \u001b[31m3\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m4\u001b[39m\nReceived:   \u001b[31m3\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts:30:28\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts:28:20)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Complexity Scorer should identify complex queries","invocations":1,"location":{"column":3,"line":21},"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should identify complex queries"},{"ancestorTitles":["Query Complexity Scorer"],"duration":1,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts:46:33\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts:44:23)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Complexity Scorer should identify predictive queries","invocations":1,"location":{"column":3,"line":36},"numPassingAsserts":4,"retryReasons":[],"status":"failed","title":"should identify predictive queries"},{"ancestorTitles":["Query Complexity Scorer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Query Complexity Scorer should add score for statistical terminology","invocations":1,"location":{"column":3,"line":51},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add score for statistical terminology"},{"ancestorTitles":["Query Complexity Scorer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Query Complexity Scorer should add score for multiple parameters","invocations":1,"location":{"column":3,"line":59},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add score for multiple parameters"},{"ancestorTitles":["Query Complexity Scorer"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m2\u001b[39m\nReceived:   \u001b[31m2\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m2\u001b[39m\nReceived:   \u001b[31m2\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts:71:26)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Complexity Scorer should add score for spatial complexity","invocations":1,"location":{"column":3,"line":67},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should add score for spatial complexity"},{"ancestorTitles":["Query Complexity Scorer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Query Complexity Scorer should consider visualization type in scoring","invocations":1,"location":{"column":3,"line":75},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should consider visualization type in scoring"}],"endTime":1747710216197,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Complexity Scorer › should identify complex queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m4\u001b[39m\n    Received:   \u001b[31m3\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 |\u001b[39m     complexQueries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m scoreQueryComplexity(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 30 |\u001b[39m       expect(result\u001b[33m.\u001b[39mscore)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m4\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m       expect(result\u001b[33m.\u001b[39mrequiresML)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m       expect(result\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(\u001b[32m'complex'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-complexity-scorer.test.ts\u001b[39m\u001b[0m\u001b[2m:30:28\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-complexity-scorer.test.ts\u001b[39m\u001b[0m\u001b[2m:28:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Complexity Scorer › should identify predictive queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 |\u001b[39m     predictiveQueries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 45 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m scoreQueryComplexity(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 46 |\u001b[39m       expect(result\u001b[33m.\u001b[39mrequiresML)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 47 |\u001b[39m       expect(result\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(\u001b[32m'predictive'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-complexity-scorer.test.ts\u001b[39m\u001b[0m\u001b[2m:46:33\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-complexity-scorer.test.ts\u001b[39m\u001b[0m\u001b[2m:44:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Complexity Scorer › should add score for spatial complexity\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m2\u001b[39m\n    Received:   \u001b[31m2\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m scoreQueryComplexity(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m     \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m     expect(result\u001b[33m.\u001b[39mscore)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m     expect(result\u001b[33m.\u001b[39mexplanation\u001b[33m.\u001b[39msome(exp \u001b[33m=>\u001b[39m exp\u001b[33m.\u001b[39mincludes(\u001b[32m'spatial relationships'\u001b[39m)))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m   \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-complexity-scorer.test.ts\u001b[39m\u001b[0m\u001b[2m:71:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/lib/query-complexity-scorer.test.ts","startTime":1747710214791,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["QueryClassifier","Core Visualization Types"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Core Visualization Types CHOROPLETH classification","invocations":1,"location":{"column":5,"line":37},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"CHOROPLETH classification"},{"ancestorTitles":["QueryClassifier","Core Visualization Types"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Core Visualization Types CORRELATION classification","invocations":1,"location":{"column":5,"line":43},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"CORRELATION classification"},{"ancestorTitles":["QueryClassifier","Core Visualization Types"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Core Visualization Types JOINT_HIGH classification","invocations":1,"location":{"column":5,"line":49},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"JOINT_HIGH classification"},{"ancestorTitles":["QueryClassifier","Core Visualization Types"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Core Visualization Types TRENDS classification","invocations":1,"location":{"column":5,"line":55},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"TRENDS classification"},{"ancestorTitles":["QueryClassifier","Core Visualization Types"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Core Visualization Types HEATMAP classification","invocations":1,"location":{"column":5,"line":61},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"HEATMAP classification"},{"ancestorTitles":["QueryClassifier","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Edge Cases handles mixed signal queries","invocations":1,"location":{"column":5,"line":69},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles mixed signal queries"},{"ancestorTitles":["QueryClassifier","Edge Cases"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Edge Cases handles ambiguous queries","invocations":1,"location":{"column":5,"line":76},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles ambiguous queries"},{"ancestorTitles":["QueryClassifier","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Edge Cases handles queries with multiple visualization keywords","invocations":1,"location":{"column":5,"line":83},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles queries with multiple visualization keywords"},{"ancestorTitles":["QueryClassifier","Analysis Result Enhancement"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Analysis Result Enhancement enhances analysis with visualization type","invocations":1,"location":{"column":5,"line":92},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"enhances analysis with visualization type"},{"ancestorTitles":["QueryClassifier","Analysis Result Enhancement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Analysis Result Enhancement preserves existing visualization type","invocations":1,"location":{"column":5,"line":108},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"preserves existing visualization type"}],"endTime":1747710216447,"message":"","name":"/Users/voldeck/code/newdemo/test/query-classifier.test.ts","startTime":1747710216216,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Query Classifier Visualization Types"],"duration":108,"failureDetails":[{"matcherResult":{"actual":"scatter","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-vistypes.test.ts:34:22)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Query Classifier Visualization Types should recognize all visualization types from example queries","invocations":1,"location":{"column":3,"line":7},"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should recognize all visualization types from example queries"}],"endTime":1747710216483,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier Visualization Types › should recognize all visualization types from example queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 |\u001b[39m     \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m { query\u001b[33m,\u001b[39m expected } \u001b[36mof\u001b[39m testCases) {\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 34 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoBe(expected)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m     }\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m })\u001b[33m;\u001b[39m \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-vistypes.test.ts\u001b[39m\u001b[0m\u001b[2m:34:22)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-vistypes.test.ts","startTime":1747710214752,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Query Classifier","classifyQuery"],"duration":8,"failureDetails":[{"matcherResult":{"actual":{},"expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:7:81)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier classifyQuery should classify choropleth queries","invocations":1,"location":{"column":5,"line":6},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify choropleth queries"},{"ancestorTitles":["Query Classifier","classifyQuery"],"duration":4,"failureDetails":[{"matcherResult":{"actual":{},"expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:13:78)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier classifyQuery should classify correlation queries","invocations":1,"location":{"column":5,"line":12},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify correlation queries"},{"ancestorTitles":["Query Classifier","classifyQuery"],"duration":0,"failureDetails":[{"matcherResult":{"actual":{},"expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:19:73)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier classifyQuery should classify joint high queries","invocations":1,"location":{"column":5,"line":18},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify joint high queries"},{"ancestorTitles":["Query Classifier","classifyQuery"],"duration":39,"failureDetails":[{"matcherResult":{"actual":{},"expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:25:62)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier classifyQuery should classify trends queries","invocations":1,"location":{"column":5,"line":24},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify trends queries"},{"ancestorTitles":["Query Classifier","classifyQuery"],"duration":2,"failureDetails":[{"matcherResult":{"actual":{},"expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:31:64)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier classifyQuery should classify heatmap queries","invocations":1,"location":{"column":5,"line":30},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify heatmap queries"},{"ancestorTitles":["Query Classifier","enhanceAnalysisWithVisualization"],"duration":7,"failureDetails":[{"matcherResult":{"actual":"distribution","expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"distribution\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"distribution\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:51:34)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier enhanceAnalysisWithVisualization should enhance an analysis result with visualization type","invocations":1,"location":{"column":5,"line":38},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should enhance an analysis result with visualization type"},{"ancestorTitles":["Query Classifier","enhanceAnalysisWithVisualization"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts:68:42)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Query Classifier enhanceAnalysisWithVisualization should preserve existing visualization type if present","invocations":1,"location":{"column":5,"line":55},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should preserve existing visualization type if present"}],"endTime":1747710216504,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › classifyQuery › should classify choropleth queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  5 |\u001b[39m   describe(\u001b[32m'classifyQuery'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m  6 |\u001b[39m     it(\u001b[32m'should classify choropleth queries'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  7 |\u001b[39m       expect(classifyQuery(\u001b[32m'Show me income distribution across neighborhoods'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  8 |\u001b[39m       expect(classifyQuery(\u001b[32m'Display education levels by region'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  9 |\u001b[39m       expect(classifyQuery(\u001b[32m'Visualize population distribution in the city'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:7:81)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › classifyQuery › should classify correlation queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     it(\u001b[32m'should classify correlation queries'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m       expect(classifyQuery(\u001b[32m'Show correlation between income and education'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m       expect(classifyQuery(\u001b[32m'Compare housing prices versus income levels'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m       expect(classifyQuery(\u001b[32m'What is the relationship between crime and poverty'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:13:78)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › classifyQuery › should classify joint high queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     it(\u001b[32m'should classify joint high queries'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m       expect(classifyQuery(\u001b[32m'Where are both income and education high'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mJOINT_HIGH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m       expect(classifyQuery(\u001b[32m'Find areas with both high crime and poverty rates'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mJOINT_HIGH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       expect(classifyQuery(\u001b[32m'Show regions where housing prices and income are simultaneously high'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mJOINT_HIGH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:19:73)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › classifyQuery › should classify trends queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     it(\u001b[32m'should classify trends queries'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 25 |\u001b[39m       expect(classifyQuery(\u001b[32m'Show trends for NFL over time'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTRENDS\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 26 |\u001b[39m       expect(classifyQuery(\u001b[32m'How has bitcoin changed over time'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTRENDS\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m       expect(classifyQuery(\u001b[32m'Display temporal patterns for COVID cases'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTRENDS\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:25:62)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › classifyQuery › should classify heatmap queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m     it(\u001b[32m'should classify heatmap queries'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 31 |\u001b[39m       expect(classifyQuery(\u001b[32m'Show density of crime incidents'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHEATMAP\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m       expect(classifyQuery(\u001b[32m'Heat map of traffic accidents'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHEATMAP\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m       expect(classifyQuery(\u001b[32m'Where are restaurants concentrated'\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHEATMAP\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:31:64)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › enhanceAnalysisWithVisualization › should enhance an analysis result with visualization type\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m\"distribution\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39moriginalQueryType)\u001b[33m.\u001b[39mtoBe(\u001b[32m'distribution'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:51:34)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQuery Classifier › enhanceAnalysisWithVisualization › should preserve existing visualization type if present\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 66 |\u001b[39m       \u001b[36mconst\u001b[39m enhanced \u001b[33m=\u001b[39m enhanceAnalysisWithVisualization(analysisResult)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 67 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 68 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 69 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:68:42)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/query-classifier.test.ts","startTime":1747710214810,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":28,"failureDetails":[{"matcherResult":{"actual":"heatmap","expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:22:35)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyQuery should classify choropleth queries correctly","invocations":1,"location":{"column":5,"line":12},"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should classify choropleth queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier classifyQuery should classify heatmap queries correctly","invocations":1,"location":{"column":5,"line":26},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should classify heatmap queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":39,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:50:35)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyQuery should classify scatter queries correctly","invocations":1,"location":{"column":5,"line":40},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should classify scatter queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier classifyQuery should classify buffer queries correctly","invocations":1,"location":{"column":5,"line":54},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should classify buffer queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":5,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:78:35)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyQuery should classify hotspot queries correctly","invocations":1,"location":{"column":5,"line":68},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should classify hotspot queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier classifyQuery should classify network queries correctly","invocations":1,"location":{"column":5,"line":82},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should classify network queries correctly"},{"ancestorTitles":["QueryClassifier","classifyQuery"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"network","expected":"multivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:106:35)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyQuery should classify multivariate queries correctly","invocations":1,"location":{"column":5,"line":96},"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should classify multivariate queries correctly"},{"ancestorTitles":["QueryClassifier","classifyAnalysisResult"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:123:33)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyAnalysisResult should classify based on query in analysisResult","invocations":1,"location":{"column":5,"line":112},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify based on query in analysisResult"},{"ancestorTitles":["QueryClassifier","classifyAnalysisResult"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"multivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts:138:33)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier classifyAnalysisResult should use relevantFields for better classification","invocations":1,"location":{"column":5,"line":126},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use relevantFields for better classification"},{"ancestorTitles":["QueryClassifier","Pattern matching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Pattern matching should detect buffer distances correctly","invocations":1,"location":{"column":5,"line":143},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect buffer distances correctly"},{"ancestorTitles":["QueryClassifier","Pattern matching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Pattern matching should detect network relationships correctly","invocations":1,"location":{"column":5,"line":149},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect network relationships correctly"},{"ancestorTitles":["QueryClassifier","Pattern matching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Pattern matching should detect bivariate patterns correctly","invocations":1,"location":{"column":5,"line":155},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect bivariate patterns correctly"}],"endTime":1747710216511,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyQuery › should classify choropleth queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m\"heatmap\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m         \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 22 |\u001b[39m         expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:22:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyQuery › should classify scatter queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m         \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 50 |\u001b[39m         expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSCATTER\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:50:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyQuery › should classify hotspot queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 76 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 77 |\u001b[39m         \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 78 |\u001b[39m         expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHOTSPOT\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 79 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 80 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 81 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:78:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyQuery › should classify multivariate queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"multivariate\"\u001b[39m\n    Received: \u001b[31m\"network\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 104 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 105 |\u001b[39m         \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 106 |\u001b[39m         expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mMULTIVARIATE\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 107 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 108 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 109 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:106:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyAnalysisResult › should classify based on query in analysisResult\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 122 |\u001b[39m       \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m queryClassifier\u001b[33m.\u001b[39mclassifyAnalysisResult(analysisResult)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 123 |\u001b[39m       expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHOTSPOT\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 124 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 125 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 126 |\u001b[39m     it(\u001b[32m'should use relevantFields for better classification'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:123:33)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier › classifyAnalysisResult › should use relevantFields for better classification\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"multivariate\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 136 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 137 |\u001b[39m       \u001b[36mconst\u001b[39m visualizationType \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m queryClassifier\u001b[33m.\u001b[39mclassifyAnalysisResult(analysisResult)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 138 |\u001b[39m       expect(visualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mMULTIVARIATE\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 139 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 140 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 141 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier.test.ts\u001b[39m\u001b[0m\u001b[2m:138:33)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/lib/query-classifier.test.ts","startTime":1747710214761,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Show me income distribution across counties\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show me income distribution across counties\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Map education levels by state\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Map education levels by state\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Display population density by neighborhood\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display population density by neighborhood\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Visualize home values by zip code\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Visualize home values by zip code\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Show poverty rates across the region\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show poverty rates across the region\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","choropleth visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations choropleth visualization type should classify \"Create a thematic map of income levels\" as choropleth","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a thematic map of income levels\" as choropleth"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Show density of restaurants in the city\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show density of restaurants in the city\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Create a heat map of crime incidents\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a heat map of crime incidents\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Where are traffic accidents concentrated?\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Where are traffic accidents concentrated?\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Heat map of customer locations\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Heat map of customer locations\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Show concentration of emergency calls\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show concentration of emergency calls\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","heatmap visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations heatmap visualization type should classify \"Display the density of tourist activity\" as heatmap","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display the density of tourist activity\" as heatmap"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":84,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Plot all store locations\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Plot all store locations\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Show individual ATM locations\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show individual ATM locations\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":9,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Map the position of all fire hydrants\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Map the position of all fire hydrants\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Display school locations\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display school locations\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Show all bus stops on the map\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show all bus stops on the map\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","scatter visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations scatter visualization type should classify \"Mark each earthquake epicenter on the map\" as scatter","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Mark each earthquake epicenter on the map\" as scatter"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"scatter","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Cluster the coffee shops by location\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Cluster the coffee shops by location\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Group restaurants into clusters\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Group restaurants into clusters\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"scatter","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Show clustered patient locations\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show clustered patient locations\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Create clusters of event venues\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create clusters of event venues\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Cluster the bike-sharing stations\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Cluster the bike-sharing stations\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","cluster visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"categorical","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations cluster visualization type should classify \"Group similar businesses by type and location\" as cluster","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Group similar businesses by type and location\" as cluster"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Show land use categories on the map\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show land use categories on the map\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Categorize neighborhoods by dominant industry\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Categorize neighborhoods by dominant industry\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Show building types across the city\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show building types across the city\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Display zoning categories\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display zoning categories\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Map schools by type (public, private, charter)\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Map schools by type (public, private, charter)\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","categorical visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations categorical visualization type should classify \"Show property categories by color\" as categorical","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show property categories by color\" as categorical"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"Show population change from 2010 to 2020\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show population change from 2010 to 2020\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"How has home value changed over the past 5 years?\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"How has home value changed over the past 5 years?\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"Display income growth by county\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Display income growth by county\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"Show trend in unemployment rates\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show trend in unemployment rates\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"Map the change in air quality over time\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Map the change in air quality over time\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","trends visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations trends visualization type should classify \"Historical trend of crime rates by neighborhood\" as trends","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Historical trend of crime rates by neighborhood\" as trends"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"Show correlation between income and education\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show correlation between income and education\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"Compare home prices and crime rates\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Compare home prices and crime rates\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"How does income relate to health outcomes?\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"How does income relate to health outcomes?\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"network","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"Relationship between school funding and test scores\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Relationship between school funding and test scores\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"Compare pollution levels and asthma rates\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Compare pollution levels and asthma rates\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","correlation visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations correlation visualization type should classify \"Is there a correlation between income and commute time?\" as correlation","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Is there a correlation between income and commute time?\" as correlation"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Find neighborhoods with both high income and good schools\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Find neighborhoods with both high income and good schools\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Show areas where both pollution and asthma rates are high\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show areas where both pollution and asthma rates are high\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Identify regions with high quality of life and low crime\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Identify regions with high quality of life and low crime\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Where are income and education levels both high?\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Where are income and education levels both high?\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Find areas with high housing prices and high walkability\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Find areas with high housing prices and high walkability\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","joint_high visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations joint_high visualization type should classify \"Show places with both good schools and parks\" as joint_high","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show places with both good schools and parks\" as joint_high"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"proportional_symbol","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Show cities with symbol size based on population\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show cities with symbol size based on population\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Use proportional symbols to show earthquake magnitude\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Use proportional symbols to show earthquake magnitude\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"proportional_symbol","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Map sales by store with circle size\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Map sales by store with circle size\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Display revenue by location with bubbles sized by value\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display revenue by location with bubbles sized by value\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Show COVID cases with symbol size by county\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show COVID cases with symbol size by county\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","proportional_symbol visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations proportional_symbol visualization type should classify \"Create a bubble map of business revenue\" as proportional_symbol","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a bubble map of business revenue\" as proportional_symbol"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Show top 10 counties by income\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show top 10 counties by income\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Highlight the 5 neighborhoods with highest property values\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Highlight the 5 neighborhoods with highest property values\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Which 15 districts have the best schools?\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Which 15 districts have the best schools?\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"trends","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Map the top 20 areas for business growth\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Map the top 20 areas for business growth\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Show 10 cities with highest quality of life scores\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show 10 cities with highest quality of life scores\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","top_n visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations top_n visualization type should classify \"Display the top 5 most populous areas\" as top_n","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Display the top 5 most populous areas\" as top_n"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Create a hexbin map of customer locations\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a hexbin map of customer locations\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Show store density using hexagonal bins\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show store density using hexagonal bins\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Aggregate incident reports into hexbins\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Aggregate incident reports into hexbins\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Use hexbin to show tourist concentration\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Use hexbin to show tourist concentration\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"hexbin","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hexbin\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hexbin\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Create hexagonal grid of population density\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Create hexagonal grid of population density\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hexbin visualization type"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hexbin visualization type should classify \"Visualize traffic patterns with hexbin aggregation\" as hexbin","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Visualize traffic patterns with hexbin aggregation\" as hexbin"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Create a bivariate map of income and education\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a bivariate map of income and education\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"network","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Show income and poverty relationship with a color matrix\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show income and poverty relationship with a color matrix\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Map population density against home values using bivariate colors\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Map population density against home values using bivariate colors\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Create a two-variable map of age and income\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a two-variable map of age and income\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"network","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"network\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Show the relationship between health outcomes and education using a bivariate map\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show the relationship between health outcomes and education using a bivariate map\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","bivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations bivariate visualization type should classify \"Bivariate visualization of rainfall and temperature\" as bivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Bivariate visualization of rainfall and temperature\" as bivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"Show 5 mile buffer around hospitals\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show 5 mile buffer around hospitals\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"Create a 10km radius around schools\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a 10km radius around schools\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"What areas are within 2 miles of parks?\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"What areas are within 2 miles of parks?\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"Create 500 meter buffers around transit stops\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create 500 meter buffers around transit stops\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"Show 1 mile service area around fire stations\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show 1 mile service area around fire stations\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","buffer visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations buffer visualization type should classify \"Display neighborhoods within 3km of downtown\" as buffer","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display neighborhoods within 3km of downtown\" as buffer"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Find hotspots of crime incidents\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Find hotspots of crime incidents\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Show statistically significant clusters of high income\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show statistically significant clusters of high income\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Identify disease hotspots in the region\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Identify disease hotspots in the region\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"cluster","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"cluster\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"cluster\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Where are the significant clusters of business activity?\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Where are the significant clusters of business activity?\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Show hotspots of accident reports\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show hotspots of accident reports\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","hotspot visualization type"],"duration":32,"failureDetails":[{"matcherResult":{"actual":"cluster","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"cluster\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"cluster\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations hotspot visualization type should classify \"Map spatial clusters of high unemployment\" as hotspot","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Map spatial clusters of high unemployment\" as hotspot"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Show transportation connections between cities\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show transportation connections between cities\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Create a network diagram of trade between countries\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a network diagram of trade between countries\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Visualize commuter flows from suburbs to downtown\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Visualize commuter flows from suburbs to downtown\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"network","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"network\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"network\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:176:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Show migration patterns between states\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify \"Show migration patterns between states\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Map supply chain connections between facilities\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Map supply chain connections between facilities\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","network visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations network visualization type should classify \"Display flight routes between major airports\" as network","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Display flight routes between major airports\" as network"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Compare population, income, and education levels\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Compare population, income, and education levels\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Show a multivariate analysis of demographic factors\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show a multivariate analysis of demographic factors\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Visualize age, income, and health metrics together\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Visualize age, income, and health metrics together\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Create a multi-factor analysis of neighborhood quality\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Create a multi-factor analysis of neighborhood quality\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Show income with color, population with size, and education with opacity\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Show income with color, population with size, and education with opacity\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Testing all 16 visualization types with multiple query variations","multivariate visualization type"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests Testing all 16 visualization types with multiple query variations multivariate visualization type should classify \"Analyze crime, property value, and school quality in one visualization\" as multivariate","invocations":1,"location":{"column":11,"line":174},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify \"Analyze crime, property value, and school quality in one visualization\" as multivariate"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Edge cases and mixed queries"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:195:24)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Edge cases and mixed queries should handle mixed signals with reasonable defaults","invocations":1,"location":{"column":5,"line":184},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle mixed signals with reasonable defaults"},{"ancestorTitles":["Comprehensive Query Classifier Tests","Edge cases and mixed queries"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts:202:23)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Comprehensive Query Classifier Tests Edge cases and mixed queries should prefer more specific visualization types over general ones","invocations":1,"location":{"column":5,"line":199},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prefer more specific visualization types over general ones"},{"ancestorTitles":["Comprehensive Query Classifier Tests","enhanceAnalysisWithVisualization function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests enhanceAnalysisWithVisualization function should enhance analysis result with the correct visualization type","invocations":1,"location":{"column":5,"line":213},"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should enhance analysis result with the correct visualization type"},{"ancestorTitles":["Comprehensive Query Classifier Tests","enhanceAnalysisWithVisualization function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Query Classifier Tests enhanceAnalysisWithVisualization function should handle topN parameter in analysis result","invocations":1,"location":{"column":5,"line":239},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle topN parameter in analysis result"}],"endTime":1747710216597,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › scatter visualization type › should classify \"Map the position of all fire hydrants\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › scatter visualization type › should classify \"Show all bus stops on the map\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › scatter visualization type › should classify \"Mark each earthquake epicenter on the map\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › cluster visualization type › should classify \"Cluster the coffee shops by location\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › cluster visualization type › should classify \"Show clustered patient locations\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › cluster visualization type › should classify \"Group similar businesses by type and location\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › trends visualization type › should classify \"Show population change from 2010 to 2020\" as trends\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › trends visualization type › should classify \"Display income growth by county\" as trends\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"Show correlation between income and education\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"Compare home prices and crime rates\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\n    Received: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"How does income relate to health outcomes?\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"Relationship between school funding and test scores\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m\"network\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"Compare pollution levels and asthma rates\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\n    Received: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › correlation visualization type › should classify \"Is there a correlation between income and commute time?\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › joint_high visualization type › should classify \"Find neighborhoods with both high income and good schools\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › joint_high visualization type › should classify \"Identify regions with high quality of life and low crime\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › joint_high visualization type › should classify \"Where are income and education levels both high?\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › joint_high visualization type › should classify \"Find areas with high housing prices and high walkability\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › proportional_symbol visualization type › should classify \"Show cities with symbol size based on population\" as proportional_symbol\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"proportional_symbol\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › proportional_symbol visualization type › should classify \"Map sales by store with circle size\" as proportional_symbol\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"proportional_symbol\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › top_n visualization type › should classify \"Show top 10 counties by income\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › top_n visualization type › should classify \"Highlight the 5 neighborhoods with highest property values\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › top_n visualization type › should classify \"Map the top 20 areas for business growth\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › top_n visualization type › should classify \"Show 10 cities with highest quality of life scores\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › top_n visualization type › should classify \"Display the top 5 most populous areas\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › hexbin visualization type › should classify \"Create hexagonal grid of population density\" as hexbin\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hexbin\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › bivariate visualization type › should classify \"Show income and poverty relationship with a color matrix\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"network\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › bivariate visualization type › should classify \"Show the relationship between health outcomes and education using a bivariate map\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"network\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › hotspot visualization type › should classify \"Show statistically significant clusters of high income\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › hotspot visualization type › should classify \"Identify disease hotspots in the region\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"ho\u001b[7mtspot\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mc\u001b[27mho\u001b[7mropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › hotspot visualization type › should classify \"Where are the significant clusters of business activity?\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hotspot\"\u001b[39m\n    Received: \u001b[31m\"cluster\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › hotspot visualization type › should classify \"Map spatial clusters of high unemployment\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hotspot\"\u001b[39m\n    Received: \u001b[31m\"cluster\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Testing all 16 visualization types with multiple query variations › network visualization type › should classify \"Show migration patterns between states\" as network\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"network\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 174 |\u001b[39m           it(\u001b[32m`should classify \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 176 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m           })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 179 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:176:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Edge cases and mixed queries › should handle mixed signals with reasonable defaults\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m { query\u001b[33m,\u001b[39m expected } \u001b[36mof\u001b[39m mixedQueries) {\u001b[22m\n\u001b[2m     \u001b[90m 194 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 195 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBe(expected)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 196 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 197 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 198 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:195:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mComprehensive Query Classifier Tests › Edge cases and mixed queries › should prefer more specific visualization types over general ones\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 |\u001b[39m       \u001b[90m// Testing queries that could match multiple patterns\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 201 |\u001b[39m       \u001b[36mconst\u001b[39m result1 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(\u001b[32m'Show top 5 areas with high income'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 202 |\u001b[39m       expect(result1)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTOP_N\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 203 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 204 |\u001b[39m       \u001b[36mconst\u001b[39m result2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyQuery(\u001b[32m'Create hexbin visualization of population density'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 205 |\u001b[39m       expect(result2)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHEXBIN\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/lib/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:202:23)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/lib/query-classifier-comprehensive.test.ts","startTime":1747710214793,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1747710217922,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"/Users/voldeck/code/newdemo/utils/services/__tests__/query-service.test.ts","startTime":1747710217922,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1747710217922,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    /Users/voldeck/code/newdemo/node_modules/@arcgis/core/layers/FeatureLayer.js:5\n    import{_ as e}from\"../chunks/tslib.es6.js\";import t from\"../PopupTemplate.js\";import r from\"../request.js\";import i from\"../core/Clonable.js\";import o from\"../core/Collection.js\";import s from\"../core/Error.js\";import{clone as a}from\"../core/lang.js\";import n from\"../core/Logger.js\";import{destroyMaybe as l}from\"../core/maybe.js\";import{MultiOriginJSONMixin as p}from\"../core/MultiOriginJSONSupport.js\";import{setDeepValue as u}from\"../core/object.js\";import{debounce as d,throwIfAbortError as y,whenOrAbort as c}from\"../core/promiseUtils.js\";import{sqlAnd as m}from\"../core/sql.js\";import{urlToObject as f,join as h}from\"../core/urlUtils.js\";import{property as b}from\"../core/accessorSupport/decorators/property.js\";import{cast as g}from\"../core/accessorSupport/decorators/cast.js\";import{reader as w}from\"../core/accessorSupport/decorators/reader.js\";import{subclass as v}from\"../core/accessorSupport/decorators/subclass.js\";import{writer as j}from\"../core/accessorSupport/decorators/writer.js\";import{excludeTables as F}from\"../core/accessorSupport/layerContainerType.js\";import T from\"../form/FormTemplate.js\";import S from\"../geometry/SpatialReference.js\";import I from\"./Layer.js\";import{MemorySource as E}from\"./graphics/sources/MemorySource.js\";import{APIKeyMixin as L}from\"./mixins/APIKeyMixin.js\";import{ArcGISService as D}from\"./mixins/ArcGISService.js\";import{BlendLayer as _}from\"./mixins/BlendLayer.js\";import{CustomParametersMixin as x}from\"./mixins/CustomParametersMixin.js\";import{DisplayFilteredLayer as P}from\"./mixins/DisplayFilteredLayer.js\";import{EditBusLayer as C}from\"./mixins/EditBusLayer.js\";import{FeatureEffectLayer as M}from\"./mixins/FeatureEffectLayer.js\";import{FeatureLayerBase as q}from\"./mixins/FeatureLayerBase.js\";import{FeatureReductionLayer as O}from\"./mixins/FeatureReductionLayer.js\";import{OperationalLayer as A}from\"./mixins/OperationalLayer.js\";import{OrderedLayer as V}from\"./mixins/OrderedLayer.js\";import{PortalLayer as Q}from\"./mixins/PortalLayer.js\";import{PublishableLayer as R}from\"./mixins/PublishableLayer.js\";import{RefreshableLayer as U}from\"./mixins/RefreshableLayer.js\";import{ScaleRangeLayer as B}from\"./mixins/ScaleRangeLayer.js\";import{TemporalLayer as N}from\"./mixins/TemporalLayer.js\";import{TrackableLayer as $}from\"./mixins/TrackableLayer.js\";import{titleFromUrlAndName as G,parse as J,cleanTitle as W}from\"./support/arcgisLayerUrl.js\";import{attributeTableTemplate as Z,id as k,labelsVisible as z,opacityDrawingInfo as H,legendEnabled as K,listMode as X,popupEnabled as Y,screenSizePerspectiveEnabled as ee}from\"./support/commonProperties.js\";import{ensureLayerCredential as te,computeEffectiveEditingEnabled as re,readGlobalIdField as ie,readObjectIdField as oe,createDefaultRenderer as se,addAttachment as ae,updateAttachment as ne,applyEdits as le,uploadAssets as pe,createQuery as ue,deleteAttachments as de,fetchRecomputedExtents as ye,getFeatureType as ce,getFieldDomain as me,queryAttachments as fe,queryObjectIds as he,queryFeatureCount as be,queryExtent as ge,queryRelatedFeatures as we,queryRelatedFeaturesCount as ve,validateBinsQuery as je,hasDataChanged as Fe,geometryTypeKebabDict as Te}from\"./support/featureLayerUtils.js\";import Se from\"./support/FeatureTemplate.js\";import Ie from\"./support/FeatureType.js\";import{defineFieldProperties as Ee}from\"./support/fieldProperties.js\";import{fixRendererFields as Le,fixTimeInfoFields as De}from\"./support/fieldUtils.js\";import _e from\"./support/LabelClass.js\";import{reader as xe}from\"./support/labelingInfo.js\";import{getFeatureLayerCapabilities as Pe}from\"./support/serviceCapabilitiesUtils.js\";import Ce from\"./support/TimeInfo.js\";import Me from\"./support/TitleCreator.js\";import{serviceSupportsSpatialReference as qe}from\"./support/versionUtils.js\";import{DataLayerSource as Oe}from\"./support/source/DataLayerSource.js\";import{read as Ae}from\"../renderers/support/jsonUtils.js\";import{loadStyleRenderer as Ve}from\"../renderers/support/styleUtils.js\";import{rendererTypes as Qe,webSceneRendererTypes as Re}from\"../renderers/support/typeUtils.js\";import Ue from\"../rest/support/FeatureSet.js\";import Be from\"../rest/support/Query.js\";import{isNumber as Ne}from\"../support/guards.js\";import{createPopupTemplate as $e}from\"../support/popupUtils.js\";import{symbolTypes as Ge}from\"../symbols/support/typeUtils.js\";import{SaveOperationType as Je}from\"../webdoc/interfaces.js\";import{opacityToTransparency as We}from\"../webdoc/support/opacityUtils.js\";const Ze=\"FeatureLayer\";function ke(e,t){return new s(\"layer:unsupported\",`Layer (${e.title}, ${e.id}) of type '${e.declaredClass}' ${t}`,{layer:e})}function ze(e){return e&&e instanceof o}const He=Ee();function Ke(e,t,r){const i=!!r?.writeLayerSchema;return{enabled:i,ignoreOrigin:i}}let Xe=class extends(q(O(M(R(C(P(_(V(N($(B(U(D(A(Q(p(x(L(i.ClonableMixin(I)))))))))))))))))))){constructor(...e){super(...e),this.attributeTableTemplate=null,this.charts=null,this.copyright=null,this.displayField=null,this.dynamicDataSource=null,this.fields=null,this.fieldsIndex=null,this.formTemplate=null,this.fullExtent=null,this.geometryType=null,this.hasM=void 0,this.hasZ=void 0,this.infoFor3D=null,this.isTable=!1,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.objectIdField=null,this.operationalLayerType=\"ArcGISFeatureLayer\",this.outFields=null,this.path=null,this.popupEnabled=!0,this.popupTemplate=null,this.resourceInfo=null,this.screenSizePerspectiveEnabled=!0,this.spatialReference=S.WGS84,this.subtypeCode=null,this.supportedSourceTypes=new Set([\"Feature Layer\",\"Oriented Imagery Layer\",\"Table\",\"Catalog Layer\"]),this.templates=null,this.timeInfo=null,this.title=null,this.sublayerTitleMode=\"item-title\",this.type=\"feature\",this.typeIdField=null,this.types=null,this.visible=!0,this._debouncedSaveOperations=d((async(e,t,r)=>{const{save:i,saveAs:o}=await import(\"./save/featureLayerUtils.js\");switch(e){case Je.SAVE:return i(this,t);case Je.SAVE_AS:return o(this,r,t)}}))}destroy(){this.source?.destroy()}normalizeCtorArgs(e,t){return\"string\"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;if(this.portalItem?.loaded&&this.source)return this.addResolvingPromise(this.createGraphicsSource(t).then((e=>this.initLayerProperties(e)))),Promise.resolve(this);const r=this.loadFromPortal({supportedTypes:[\"Feature Service\",\"Feature Collection\",\"Scene Service\"]},e).catch(y).then((async()=>{if(this.url&&null==this.layerId&&/FeatureServer|MapServer\\/*$/i.test(this.url)){const e=await this._fetchFirstValidLayerId(t);null!=e&&(this.layerId=e)}if(!this.url&&!this._hasMemorySource())throw new s(\"feature-layer:missing-url-or-source\",\"Feature layer must be created with either a url or a source\");return this.initLayerProperties(await this.createGraphicsSource(t))})).then((()=>te(this,\"load\",e)));return this.addResolvingPromise(r),Promise.resolve(this)}get _titleCreator(){const e=this._get(\"_titleCreator\");return l(e),new Me({fieldsIndex:this.fieldsIndex,objectIdField:this.objectIdField,fields:this.fields,displayField:this.displayField,effectivePopupTemplate:this.popupTemplate??this.defaultPopupTemplate})}readCapabilities(e,t){return t=t.layerDefinition||t,Pe(t,this.url)}get createQueryVersion(){return this.commitProperty(\"definitionExpression\"),this.commitProperty(\"dynamicDataSource\"),this.commitProperty(\"timeExtent\"),this.commitProperty(\"timeOffset\"),this.commitProperty(\"geometryType\"),this.commitProperty(\"gdbVersion\"),this.commitProperty(\"historicMoment\"),this.commitProperty(\"returnZ\"),this.commitProperty(\"capabilities\"),this.commitProperty(\"returnM\"),(this._get(\"createQueryVersion\")??0)+1}get editingEnabled(){return!(this.loaded&&!this.capabilities?.operations.supportsEditing)&&(this._isOverridden(\"editingEnabled\")?this._get(\"editingEnabled\"):this._hasMemorySource()||this.userHasEditingPrivileges)}set editingEnabled(e){this._overrideIfSome(\"editingEnabled\",e)}readEditingEnabled(e,t){return this._readEditingEnabled(t,!1)}readEditingEnabledFromWebMap(e,t,r){return this._readEditingEnabled(t,!0,r)}writeEditingEnabled(e,t){this._writeEditingEnabled(e,t,!1)}writeEditingEnabledToWebMap(e,t,r,i){this._writeEditingEnabled(e,t,!0,i)}get effectiveEditingEnabled(){return re(this)}get featureTitleFields(){return[...this._titleCreator.requiredFields]}readIsTable(e,t){return\"Table\"===(t=t?.layerDefinition??t).type||!t.geometryType}writeIsTable(e,t,r,i){i?.writeLayerSchema&&u(r,e?\"Table\":\"Feature Layer\",t)}readGlobalIdField(e,t){return ie(t.layerDefinition||t)}readObjectIdField(e,t){return oe(t.layerDefinition||t)}get parsedUrl(){const e=f(this.url);return null!=e&&(null!=this.dynamicDataSource?e.path=h(e.path,\"dynamicLayer\"):null!=this.layerId&&(e.path=h(e.path,this.layerId.toString()))),e}get defaultPopupTemplate(){return this.createPopupTemplate()}set renderer(e){Le(e,this.fieldsIndex),this._set(\"renderer\",e)}readRenderer(e,t,r){t=t.layerDefinition||t;const i=t.drawingInfo?.renderer;if(i){const e=Ae(i,t,r)??void 0;return e||n.getLogger(this).error(\"Failed to create renderer\",{rendererDefinition:t.drawingInfo.renderer,layer:this,context:r}),e}return se(t,r)}set source(e){const t=this._get(\"source\");t!==e&&(ze(t)&&this._resetMemorySource(t),ze(e)&&this._initMemorySource(e),this._set(\"source\",e))}castSource(e){return e?Array.isArray(e)||e instanceof o?new E({layer:this,items:e}):e:null}readSource(e,t){const r=Ue.fromJSON(t.featureSet);return new E({layer:this,items:r?.features??[]})}readTemplates(e,t){const r=t.editFieldsInfo,i=r?.creatorField,o=r?.editorField;return e=e?.map((e=>Se.fromJSON(e))),this._fixTemplates(e,i),this._fixTemplates(e,o),e}readTitle(e,t){const r=t.layerDefinition?.name??t.name,i=t.title||t.layerDefinition?.title;if(r){const e=this.portalItem?.title;if(\"item-title\"===this.sublayerTitleMode)return this.url?G(this.url,r):r;let t=r;if(!t&&this.url){const e=J(this.url);null!=e&&(t=e.title)}if(!t)return;return\"item-title-and-service-name\"===this.sublayerTitleMode&&e&&e!==t&&(t=e+\" - \"+t),W(t)}if(\"item-title\"===this.sublayerTitleMode&&i)return i}readTitleFromWebMap(e,t){return t.title||t.layerDefinition?.name}readTypeIdField(e,t){let r=(t=t.layerDefinition||t).typeIdField;if(r&&t.fields){r=r.toLowerCase();const e=t.fields.find((e=>e.name.toLowerCase()===r));e&&(r=e.name)}return r}readTypes(e,t){e=(t=t.layerDefinition||t).types;const r=t.editFieldsInfo,i=r?.creatorField,o=r?.editorField;return e?.map((e=>(e=Ie.fromJSON(e),this._fixTemplates(e.templates,i),this._fixTemplates(e.templates,o),e)))}readVisible(e,t){return null!=t.layerDefinition?.defaultVisibility?!!t.layerDefinition.defaultVisibility:null!=t.visibility?!!t.visibility:void 0}async addAttachment(e,t){const r=await ae(this,e,t,Ze);return this.lastEditsEventDate=new Date,r}async updateAttachment(e,t,r){const i=await ne(this,e,t,r,Ze);return this.lastEditsEventDate=new Date,i}async applyEdits(e,t){return le(this,e,t)}async uploadAssets(e,t){return pe(this,e,t)}on(e,t){return super.on(e,t)}createPopupTemplate(e){return $e(this,e)}async createGraphicsSource(e){if(this._hasMemorySource()&&this.source)return this.source.load({signal:e});const{default:t}=await c(import(\"./graphics/sources/FeatureLayerSource.js\"),e);return new t({layer:this,supportedSourceTypes:this.supportedSourceTypes}).load({signal:e})}createQuery(){const e=ue(this);e.dynamicDataSource=this.dynamicDataSource;const t=null!=this.subtypeCode?`${this.subtypeField} = ${this.subtypeCode}`:null,r=m(this.definitionExpression,t);return e.where=r||\"1=1\",e}async deleteAttachments(e,t){const r=await de(this,e,t,Ze);return this.lastEditsEventDate=new Date,r}async fetchRecomputedExtents(e){return ye(this,e,Ze)}getFeatureTitle(e,t={timeZone:\"system\",fetchMissingFields:!1}){return this._titleCreator.getTitle(this,e,t)}getFeatureType(e){return ce(this.types,this.typeIdField,e)}getFieldDomain(e,t){return me(this,e,t,this.getField(e)?.domain??null)}async queryAttachments(e,t){return fe(this,e,t,Ze)}async queryFeatures(e,t){const r=await this.load(),i=await r.source.queryFeatures(Be.from(e)??r.createQuery(),t);if(i?.features)for(const o of i.features)o.layer=o.sourceLayer=r;return i}async queryObjectIds(e,t){return(await he(this,e,t,Ze)).filter(Ne)}async queryFeatureCount(e,t){return be(this,e,t,Ze)}async queryExtent(e,t){return ge(this,e,t,Ze)}async queryRelatedFeatures(e,t){return we(this,e,t,Ze)}async queryRelatedFeaturesCount(e,t){return ve(this,e,t,Ze)}async queryTopFeatures(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopFeatures||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopFeatures capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\"),a=await r.queryTopFeatures(o.default.from(e),t);if(a?.features)for(const s of a.features)s.layer=s.sourceLayer=this;return a}async queryAttributeBins(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryAttributeBins||!i?.operations?.supportsQueryBins)throw new s(Ze,\"Layer source does not support queryAttributeBins capability\");je(e,i,Ze);const o=await import(\"../rest/support/AttributeBinsQuery.js\"),a=await r.queryAttributeBins(o.default.from(e),t);if(a.features)for(const s of a.features)s.layer=s.sourceLayer=this;return a}async queryTopObjectIds(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopObjectIds||!i?.query.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopObjectIds capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return(await r.queryTopObjectIds(o.default.from(e),t)).filter(Ne)}async queryTopFeaturesExtent(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopExtents||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopExtents capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return r.queryTopExtents(o.default.from(e),t)}async queryTopFeatureCount(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopCount||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryFeatureCount capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return r.queryTopCount(o.default.from(e),t)}read(e,t){const r=e.featureCollection;if((r||\"Feature Collection\"===e.type)&&(this.resourceInfo=e),r){const e=r.layers;e&&1===e.length&&(super.read(e[0],t),null!=r.showLegend&&super.read({showLegend:r.showLegend},t))}super.read(e,t),t&&\"service\"===t.origin&&(this.revert([\"objectIdField\",\"fields\",\"timeInfo\",\"dateFieldsTimeZone\"],\"service\"),this.spatialReference||this.revert([\"spatialReference\"],\"service\"))}write(e,t){t={...t,origin:t?.origin??void 0,writeLayerSchema:t?.writeLayerSchema??this._hasMemorySource()};const{origin:r,layerContainerType:i,messages:o}=t;if(this.dynamicDataSource)return o?.push(ke(this,\"using a dynamic data source cannot be written to web scenes, web maps and feature service items\")),null;if(this.isTable){if((\"web-map\"===r||\"web-scene\"===r)&&\"tables\"!==i)return o?.push(ke(this,`a table source can only be written to tables, not ${i}`)),null;if(this._hasMemorySource())return o?.push(ke(this,\"using an in-memory table source cannot be written to web scenes and web maps\")),null}else if(this.loaded&&(\"web-map\"===r||\"web-scene\"===r)&&\"tables\"===i)return o?.push(ke(this,\"using a non-table source cannot be written to tables in web maps or web scenes\")),null;return super.write(e,t)}clone(){if(this._hasMemorySource())throw new s(Ze,`FeatureLayer (title: ${this.title}, id: ${this.id}) created using in-memory source cannot be cloned`);return super.clone()}serviceSupportsSpatialReference(e){return!!this.loaded&&(\"memory\"===this.source?.type||qe(this,e))}async save(e){return this._debouncedSaveOperations(Je.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(Je.SAVE_AS,t,e)}_readEditingEnabled(e,t,r){let i=e.layerDefinition?.capabilities;return i?this._hasEditingCapability(i):(i=e.capabilities,t&&\"web-map\"===r?.origin&&!this._hasMemorySource()&&i?this._hasEditingCapability(i):void 0)}_hasEditingCapability(e){return e.toLowerCase().split(\",\").map((e=>e.trim())).includes(\"editing\")}_writeEditingEnabled(e,t,r,i){if(!e){const e=this.capabilities?.operations?.supportsSync?\"Query,Sync\":\"Query\";u(\"layerDefinition.capabilities\",e,t),r&&!i?.writeLayerSchema&&(t.capabilities=e)}}_fetchFirstValidLayerId(e){return r(this.url??\"\",{query:{f:\"json\",...this.customParameters,token:this.apiKey},responseType:\"json\",signal:e}).then((e=>{const t=e.data;if(t)return this.findFirstValidLayerId(t)}))}async initLayerProperties(e){return this._set(\"source\",e),e.sourceJSON&&(this.sourceJSON=e.sourceJSON,this.read(e.sourceJSON,{origin:\"service\",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl})),this._verifySource(),this._verifyFields(),Le(this.renderer,this.fieldsIndex),De(this.timeInfo,this.fieldsIndex),this._hasMemorySource()&&\"mesh\"===this.geometryType&&(this.capabilities.query.supportsReturnMesh=!0),Ve(this,{origin:\"service\"})}async hasDataChanged(){return Fe(this)}async fetchPublishingStatus(){const e=this.source;return e?.fetchPublishingStatus?e.fetchPublishingStatus():\"unavailable\"}_verifyFields(){const e=this.parsedUrl?.path??\"undefined\";this.objectIdField||console.log(\"FeatureLayer: 'objectIdField' property is not defined (url: \"+e+\")\"),this.isTable||this._hasMemorySource()||-1!==e.search(/\\/FeatureServer\\//i)||this.fields?.some((e=>\"geometry\"===e.type))||console.log(\"FeatureLayer: unable to find field of type 'geometry' in the layer 'fields' list. If you are using a map service layer, features will not have geometry (url: \"+e+\")\")}_fixTemplates(e,t){e&&e.forEach((e=>{const r=e.prototype?.attributes;r&&t&&delete r[t]}))}_verifySource(){if(this._hasMemorySource()){if(this.url)throw new s(\"feature-layer:mixed-source-and-url\",\"FeatureLayer cannot be created with both an in-memory source and a url\")}else if(!this.url)throw new s(\"feature-layer:source-or-url-required\",\"FeatureLayer requires either a url, a valid portal item or a source\")}_initMemorySource(e){e.forEach((e=>{e.layer=this,e.sourceLayer=this})),this.addHandles([e.on(\"after-add\",(e=>{e.item.layer=this,e.item.sourceLayer=this})),e.on(\"after-remove\",(e=>{e.item.layer=null,e.item.sourceLayer=null}))],\"fl-source\")}_resetMemorySource(e){e.forEach((e=>{e.layer=null,e.sourceLayer=null})),this.removeHandles(\"fl-source\")}_hasMemorySource(){return!(this.url||!this.source)}findFirstValidLayerId(e){return Array.isArray(e.layers)&&e.layers.length>0?e.layers[0].id:Array.isArray(e.tables)&&e.tables.length>0?e.tables[0].id:void 0}};e([b({clonable:!1,readOnly:!0})],Xe.prototype,\"_titleCreator\",null),e([b(Z)],Xe.prototype,\"attributeTableTemplate\",void 0),e([w(\"service\",\"capabilities\")],Xe.prototype,\"readCapabilities\",null),e([b({json:{origins:{\"web-scene\":{write:!1}},write:!0}})],Xe.prototype,\"charts\",void 0),e([b({readOnly:!0})],Xe.prototype,\"createQueryVersion\",null),e([b({json:{read:{source:\"layerDefinition.copyrightText\"}}})],Xe.prototype,\"copyright\",void 0),e([b({json:{read:{source:\"layerDefinition.displayField\"}}})],Xe.prototype,\"displayField\",void 0),e([b({types:Ge,readOnly:!0})],Xe.prototype,\"defaultSymbol\",void 0),e([b({type:Oe})],Xe.prototype,\"dynamicDataSource\",void 0),e([b({type:Boolean})],Xe.prototype,\"editingEnabled\",null),e([w([\"portal-item\",\"web-scene\"],\"editingEnabled\",[\"layerDefinition.capabilities\"])],Xe.prototype,\"readEditingEnabled\",null),e([w(\"web-map\",\"editingEnabled\",[\"capabilities\",\"layerDefinition.capabilities\"])],Xe.prototype,\"readEditingEnabledFromWebMap\",null),e([j([\"portal-item\",\"web-scene\"],\"editingEnabled\",{\"layerDefinition.capabilities\":{type:String}})],Xe.prototype,\"writeEditingEnabled\",null),e([j(\"web-map\",\"editingEnabled\",{capabilities:{type:String},\"layerDefinition.capabilities\":{type:String}})],Xe.prototype,\"writeEditingEnabledToWebMap\",null),e([b({readOnly:!0})],Xe.prototype,\"effectiveEditingEnabled\",null),e([b({clonable:!1,readOnly:!0})],Xe.prototype,\"featureTitleFields\",null),e([b({...He.fields,json:{read:{source:\"layerDefinition.fields\"},origins:{service:{name:\"fields\"},\"web-map\":{write:{target:\"layerDefinition.fields\",overridePolicy:Ke}}}}})],Xe.prototype,\"fields\",void 0),e([b(He.fieldsIndex)],Xe.prototype,\"fieldsIndex\",void 0),e([b({type:T,json:{name:\"formInfo\",write:!0,origins:{\"web-scene\":{read:!1,write:!1}}}})],Xe.prototype,\"formTemplate\",void 0),e([b({json:{read:{source:\"layerDefinition.extent\"}}})],Xe.prototype,\"fullExtent\",void 0),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.geometryType\",overridePolicy:Ke,writer(e,t,r){const i=e?Te.toJSON(e):null;i&&u(r,i,t)}}}},read:{source:\"layerDefinition.geometryType\",reader:Te.read}}})],Xe.prototype,\"geometryType\",void 0),e([b({json:{read:{source:\"layerDefinition.hasM\"}}})],Xe.prototype,\"hasM\",void 0),e([b({json:{read:{source:\"layerDefinition.hasZ\"}}})],Xe.prototype,\"hasZ\",void 0),e([b(k)],Xe.prototype,\"id\",void 0),e([b({readOnly:!0,json:{origins:{service:{read:!0}},read:!1}})],Xe.prototype,\"infoFor3D\",void 0),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.type\"}}}}})],Xe.prototype,\"isTable\",void 0),e([w(\"service\",\"isTable\",[\"type\",\"geometryType\"]),w(\"isTable\",[\"layerDefinition.type\",\"layerDefinition.geometryType\"])],Xe.prototype,\"readIsTable\",null),e([j(\"web-map\",\"isTable\")],Xe.prototype,\"writeIsTable\",null),e([b(z)],Xe.prototype,\"labelsVisible\",void 0),e([b({type:[_e],json:{origins:{service:{name:\"drawingInfo.labelingInfo\",read:xe,write:!1},\"web-scene\":{name:\"layerDefinition.drawingInfo.labelingInfo\",read:xe,write:{enabled:!0,layerContainerTypes:F}}},name:\"layerDefinition.drawingInfo.labelingInfo\",read:xe,write:!0}})],Xe.prototype,\"labelingInfo\",void 0),e([b((()=>{const e=a(H);return e.json.origins[\"portal-item\"]={write:{target:\"layerDefinition.drawingInfo.transparency\",writer(e,t,r){u(r,We(e),t)}}},e})())],Xe.prototype,\"opacity\",void 0),e([b(K)],Xe.prototype,\"legendEnabled\",void 0),e([b({type:[\"show\",\"hide\"],json:(()=>{const e=a(X.json);return e.origins[\"portal-item\"]={read:!1,write:!1},e})()})],Xe.prototype,\"listMode\",void 0),e([w(\"globalIdField\",[\"layerDefinition.globalIdField\",\"layerDefinition.fields\"])],Xe.prototype,\"readGlobalIdField\",null),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.objectIdField\",overridePolicy:Ke}}}}})],Xe.prototype,\"objectIdField\",void 0),e([w(\"objectIdField\",[\"layerDefinition.objectIdField\",\"layerDefinition.fields\"])],Xe.prototype,\"readObjectIdField\",null),e([b({type:[\"ArcGISFeatureLayer\"],json:{write:{target:\"layerType\",ignoreOrigin:!0,layerContainerTypes:F}}})],Xe.prototype,\"operationalLayerType\",void 0),e([b(He.outFields)],Xe.prototype,\"outFields\",void 0),e([b({readOnly:!0})],Xe.prototype,\"parsedUrl\",null),e([b({type:String,json:{origins:{\"web-scene\":{read:!0,write:!0}},read:!1}})],Xe.prototype,\"path\",void 0),e([b(Y)],Xe.prototype,\"popupEnabled\",void 0),e([b({type:t,json:{name:\"popupInfo\",write:!0}})],Xe.prototype,\"popupTemplate\",void 0),e([b({readOnly:!0})],Xe.prototype,\"defaultPopupTemplate\",null),e([b({types:Qe,json:{origins:{service:{write:{target:\"drawingInfo.renderer\",enabled:!1}},\"web-scene\":{types:Re,name:\"layerDefinition.drawingInfo.renderer\",write:{layerContainerTypes:F,overridePolicy:(e,t,r)=>({ignoreOrigin:r?.writeLayerSchema})}}},write:{target:\"layerDefinition.drawingInfo.renderer\",overridePolicy:(e,t,r)=>({ignoreOrigin:r?.writeLayerSchema})}}})],Xe.prototype,\"renderer\",null),e([w(\"service\",\"renderer\",[\"drawingInfo.renderer\",\"defaultSymbol\"]),w(\"renderer\",[\"layerDefinition.drawingInfo.renderer\",\"layerDefinition.defaultSymbol\"])],Xe.prototype,\"readRenderer\",null),e([b()],Xe.prototype,\"resourceInfo\",void 0),e([b((()=>{const e=a(ee);return e.json.origins[\"portal-item\"]={read:!1,write:!1},e})())],Xe.prototype,\"screenSizePerspectiveEnabled\",void 0),e([b({clonable:!1})],Xe.prototype,\"source\",null),e([g(\"source\")],Xe.prototype,\"castSource\",null),e([w(\"portal-item\",\"source\",[\"featureSet\"]),w(\"web-map\",\"source\",[\"featureSet\"])],Xe.prototype,\"readSource\",null),e([b({json:{read:{source:\"layerDefinition.extent.spatialReference\"}}})],Xe.prototype,\"spatialReference\",void 0),e([b({type:Number})],Xe.prototype,\"subtypeCode\",void 0),e([b({type:[Se]})],Xe.prototype,\"templates\",void 0),e([w(\"templates\",[\"editFieldsInfo\",\"creatorField\",\"editorField\",\"templates\"])],Xe.prototype,\"readTemplates\",null),e([b({type:Ce})],Xe.prototype,\"timeInfo\",void 0),e([b()],Xe.prototype,\"title\",void 0),e([w(\"service\",\"title\",[\"name\"]),w(\"portal-item\",\"title\",[\"layerDefinition.title\",\"layerDefinition.name\",\"title\"])],Xe.prototype,\"readTitle\",null),e([w(\"web-map\",\"title\",[\"layerDefinition.name\",\"title\"])],Xe.prototype,\"readTitleFromWebMap\",null),e([b({type:String})],Xe.prototype,\"sublayerTitleMode\",void 0),e([b({json:{read:!1}})],Xe.prototype,\"type\",void 0),e([b({type:String})],Xe.prototype,\"typeIdField\",void 0),e([w(\"service\",\"typeIdField\"),w(\"typeIdField\",[\"layerDefinition.typeIdField\"])],Xe.prototype,\"readTypeIdField\",null),e([b({type:[Ie]})],Xe.prototype,\"types\",void 0),e([w(\"service\",\"types\",[\"types\"]),w(\"types\",[\"layerDefinition.types\"])],Xe.prototype,\"readTypes\",null),e([b({type:Boolean,json:{origins:{\"portal-item\":{write:{target:\"layerDefinition.defaultVisibility\"}}}}})],Xe.prototype,\"visible\",void 0),e([w(\"portal-item\",\"visible\",[\"visibility\",\"layerDefinition.defaultVisibility\"])],Xe.prototype,\"readVisible\",null),Xe=e([v(\"esri.layers.FeatureLayer\")],Xe);const Ye=Xe;export{Ye as default};\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mFeatureLayer\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/layers/FeatureLayer'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mUniqueValueRenderer\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/renderers/UniqueValueRenderer'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mSimpleFillSymbol\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/symbols/SimpleFillSymbol'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 4 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mExtent\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/geometry/Extent'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Runtime.createScriptFromCode (\u001b[22mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n      \u001b[2mat Object.require (\u001b[22mutils/visualizations/multivariate-visualization.ts\u001b[2m:1:1)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mutils/visualizations/__tests__/multivariate-visualization.test.ts\u001b[39m\u001b[0m\u001b[2m:3:1)\u001b[22m\n","name":"/Users/voldeck/code/newdemo/utils/visualizations/__tests__/multivariate-visualization.test.ts","startTime":1747710217922,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Dynamic Layer System Integration","Query Classification and Analysis Enhancement"],"duration":15,"failureDetails":[{"matcherResult":{"actual":"distribution","expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"distribution\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"distribution\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:20:34)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Dynamic Layer System Integration Query Classification and Analysis Enhancement should classify and enhance distribution queries correctly","invocations":1,"location":{"column":5,"line":7},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should classify and enhance distribution queries correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Query Classification and Analysis Enhancement"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dynamic Layer System Integration Query Classification and Analysis Enhancement should enhance correlation analysis correctly","invocations":1,"location":{"column":5,"line":24},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should enhance correlation analysis correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Query Classification and Analysis Enhancement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Dynamic Layer System Integration Query Classification and Analysis Enhancement should handle joint high analysis correctly","invocations":1,"location":{"column":5,"line":42},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle joint high analysis correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Query Classification and Analysis Enhancement"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Dynamic Layer System Integration Query Classification and Analysis Enhancement should enhance trends analysis correctly","invocations":1,"location":{"column":5,"line":60},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should enhance trends analysis correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Natural language query classification"],"duration":15,"failureDetails":[{"matcherResult":{"actual":{},"expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:93:24\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:91:15)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Dynamic Layer System Integration Natural language query classification should classify descriptive queries correctly","invocations":1,"location":{"column":5,"line":83},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify descriptive queries correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Natural language query classification"],"duration":2,"failureDetails":[{"matcherResult":{"actual":{},"expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:107:24\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:105:15)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Dynamic Layer System Integration Natural language query classification should classify correlation queries correctly","invocations":1,"location":{"column":5,"line":97},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify correlation queries correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Natural language query classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":{},"expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:121:24\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:119:15)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Dynamic Layer System Integration Natural language query classification should classify joint high queries correctly","invocations":1,"location":{"column":5,"line":111},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify joint high queries correctly"},{"ancestorTitles":["Dynamic Layer System Integration","Natural language query classification"],"duration":52,"failureDetails":[{"matcherResult":{"actual":{},"expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m{}\u001b[39m\n    at /Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:135:24\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts:133:15)\n    at Promise.then.completed (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/voldeck/code/newdemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/voldeck/code/newdemo/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Dynamic Layer System Integration Natural language query classification should classify heatmap queries correctly","invocations":1,"location":{"column":5,"line":125},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should classify heatmap queries correctly"}],"endTime":1747710216717,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDynamic Layer System Integration › Query Classification and Analysis Enhancement › should classify and enhance distribution queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m\"distribution\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       expect(enhanced\u001b[33m.\u001b[39moriginalQueryType)\u001b[33m.\u001b[39mtoBe(\u001b[32m'distribution'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:20:34)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDynamic Layer System Integration › Natural language query classification › should classify descriptive queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 91 |\u001b[39m       queries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 93 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 95 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 96 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:93:24\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:91:15)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDynamic Layer System Integration › Natural language query classification › should classify correlation queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 |\u001b[39m       queries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 106 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 107 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 108 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 109 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 110 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:107:24\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:105:15)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDynamic Layer System Integration › Natural language query classification › should classify joint high queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 119 |\u001b[39m       queries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 120 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 121 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mJOINT_HIGH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 122 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 123 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 124 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:121:24\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:119:15)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDynamic Layer System Integration › Natural language query classification › should classify heatmap queries correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m{}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 133 |\u001b[39m       queries\u001b[33m.\u001b[39mforEach(query \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 134 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m classifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 135 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHEATMAP\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 136 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 137 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 138 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:135:24\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/dynamic-layer-integration.test.ts\u001b[39m\u001b[0m\u001b[2m:133:15)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/__tests__/dynamic-layer-integration.test.ts","startTime":1747710214785,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Hybrid Query Processor"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Hybrid Query Processor should process simple queries using rule-based approach","invocations":1,"location":{"column":3,"line":75},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should process simple queries using rule-based approach"},{"ancestorTitles":["Hybrid Query Processor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Hybrid Query Processor should process complex queries using ML-based approach","invocations":1,"location":{"column":3,"line":88},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should process complex queries using ML-based approach"},{"ancestorTitles":["Hybrid Query Processor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Hybrid Query Processor should always use ML for predictive queries","invocations":1,"location":{"column":3,"line":101},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should always use ML for predictive queries"},{"ancestorTitles":["Hybrid Query Processor"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Hybrid Query Processor should fall back to rule-based processing if ML service fails","invocations":1,"location":{"column":3,"line":112},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fall back to rule-based processing if ML service fails"},{"ancestorTitles":["Hybrid Query Processor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Hybrid Query Processor should respect feature flag to disable ML","invocations":1,"location":{"column":3,"line":123},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect feature flag to disable ML"}],"endTime":1747710217003,"message":"","name":"/Users/voldeck/code/newdemo/__tests__/lib/hybrid-query-processor.test.ts","startTime":1747710216499,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"show me income by county\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me income by county\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"display population density by state\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display population density by state\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"map unemployment rates by region\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map unemployment rates by region\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":22,"failureDetails":[{"matcherResult":{"actual":"categorical","expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"show the distribution of property values\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show the distribution of property values\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":3,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:302:37)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"visualize crime rates by neighborhood\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"classifies \"visualize crime rates by neighborhood\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"show me the average income across different neighborhoods\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the average income across different neighborhoods\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"display the percentage of college graduates by state\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display the percentage of college graduates by state\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:302:37)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"map the median home values by zip code\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"classifies \"map the median home values by zip code\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"heatmap","expected":"choropleth","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"choropleth\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"show me the distribution of household sizes\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me the distribution of household sizes\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","choropleth Classification"],"duration":0,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:302:37)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests choropleth Classification classifies \"visualize the poverty rates by census tract\" as choropleth","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"classifies \"visualize the poverty rates by census tract\" as choropleth"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"show density of restaurants\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show density of restaurants\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"display concentration of crime incidents\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display concentration of crime incidents\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":15,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"map population density\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map population density\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":13,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"show where accidents occur most frequently\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show where accidents occur most frequently\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"visualize traffic congestion\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"visualize traffic congestion\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":13,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"show me the intensity of air pollution\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me the intensity of air pollution\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"display the concentration of retail stores\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display the concentration of retail stores\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"map the density of public transportation stops\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map the density of public transportation stops\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"show me where noise complaints are most common\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me where noise complaints are most common\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","heatmap Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"categorical","expected":"heatmap","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"categorical\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"heatmap\"\u001b[39m\nReceived: \u001b[31m\"categorical\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests heatmap Classification classifies \"visualize the distribution of emergency calls\" as heatmap","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"visualize the distribution of emergency calls\" as heatmap"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"plot restaurants on the map\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"plot restaurants on the map\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"show me all the schools\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me all the schools\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"display crime incidents as points\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display crime incidents as points\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"map all the parks\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map all the parks\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"show me the locations of hospitals\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the locations of hospitals\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"plot all bus stops in the city\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"plot all bus stops in the city\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"show me where all the libraries are\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me where all the libraries are\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"display the locations of recycling centers\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display the locations of recycling centers\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"map all the public restrooms\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map all the public restrooms\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","scatter Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"scatter","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"scatter\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests scatter Classification classifies \"show me where all the ATMs are located\" as scatter","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me where all the ATMs are located\" as scatter"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"scatter","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"group similar locations together\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"group similar locations together\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"cluster restaurants by area\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"cluster restaurants by area\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"heatmap","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"heatmap\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"show me where points are concentrated\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me where points are concentrated\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"group schools by neighborhood\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"group schools by neighborhood\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"cluster crime incidents\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"cluster crime incidents\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"group similar businesses together\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"group similar businesses together\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"show me clusters of public facilities\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me clusters of public facilities\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"categorical","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"group similar land uses together\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"group similar land uses together\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cluster\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"cluster similar demographic areas\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"cluster similar demographic areas\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","cluster Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"cluster","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests cluster Classification classifies \"show me where similar activities occur\" as cluster","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me where similar activities occur\" as cluster"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"show different types of land use\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show different types of land use\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"display building types by area\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display building types by area\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"map zoning categories\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map zoning categories\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"show me the various types of businesses\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the various types of businesses\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"group areas by type\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"group areas by type\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"show me the different types of housing\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the different types of housing\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"display the various types of infrastructure\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display the various types of infrastructure\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"map different types of public facilities\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map different types of public facilities\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"show me the categories of commercial properties\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the categories of commercial properties\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","categorical Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests categorical Classification classifies \"visualize different types of residential areas\" as categorical","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize different types of residential areas\" as categorical"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"how has income changed over time\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"how has income changed over time\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"show me population trends\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me population trends\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"display crime rate changes\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display crime rate changes\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"map property value trends\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map property value trends\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"show me how unemployment has changed\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me how unemployment has changed\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"show me the historical changes in housing prices\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the historical changes in housing prices\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"display how education levels have changed\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display how education levels have changed\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"map the changes in population density\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map the changes in population density\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"show me how crime rates have evolved\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me how crime rates have evolved\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","trends Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests trends Classification classifies \"visualize changes in public transportation usage\" as trends","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize changes in public transportation usage\" as trends"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"compare income with education\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare income with education\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"show relationship between crime and poverty\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show relationship between crime and poverty\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"how does population density affect property values\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"how does population density affect property values\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"correlate unemployment with education levels\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"correlate unemployment with education levels\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"show me if income relates to crime\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me if income relates to crime\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"analyze the relationship between housing prices and school quality\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"analyze the relationship between housing prices and school quality\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"show me how population density correlates with public transportation\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me how population density correlates with public transportation\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"compare crime rates with income levels\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"compare crime rates with income levels\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"analyze the relationship between education and employment\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"analyze the relationship between education and employment\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","correlation Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests correlation Classification classifies \"show me how housing prices relate to neighborhood amenities\" as correlation","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me how housing prices relate to neighborhood amenities\" as correlation"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"where are both income and education high\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"where are both income and education high\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"show areas with high income and low crime\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show areas with high income and low crime\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"find places with good schools and high property values\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"find places with good schools and high property values\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"where do we have high employment and low poverty\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"where do we have high employment and low poverty\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"show me areas with high income and good schools\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me areas with high income and good schools\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"find neighborhoods with high walkability and low crime\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"find neighborhoods with high walkability and low crime\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"show me areas with high property values and good schools\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me areas with high property values and good schools\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"where are both income and life expectancy high\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"where are both income and life expectancy high\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"joint_high\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"find places with high employment and good public transportation\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"find places with high employment and good public transportation\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","joint_high Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests joint_high Classification classifies \"show me areas with high income and low pollution\" as joint_high","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me areas with high income and low pollution\" as joint_high"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"show income with symbol size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show income with symbol size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"proportional_symbol","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"display population using circle size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display population using circle size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"map crime rates with proportional symbols\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map crime rates with proportional symbols\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"show me property values using symbol size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me property values using symbol size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"proportional_symbol","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"visualize unemployment with circle size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"visualize unemployment with circle size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"show me store revenue using symbol size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me store revenue using symbol size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"proportional_symbol","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"proportional_symbol\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"display traffic volume with proportional circles\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display traffic volume with proportional circles\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"map emergency response times with symbol size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map emergency response times with symbol size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"show me hospital capacity using circle size\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me hospital capacity using circle size\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","proportional_symbol Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests proportional_symbol Classification classifies \"visualize school enrollment with proportional symbols\" as proportional_symbol","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize school enrollment with proportional symbols\" as proportional_symbol"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"compare income against national average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare income against national average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"comparison","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7momparison\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"c\u001b[7momparison\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"show income relative to state average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show income relative to state average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"compare crime rates between neighborhoods\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare crime rates between neighborhoods\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"how do property values compare to city average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"how do property values compare to city average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"show me how unemployment compares to state level\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me how unemployment compares to state level\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"compare school performance to district average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare school performance to district average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"show me how housing prices compare to regional average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me how housing prices compare to regional average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"compare public transportation usage to city average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare public transportation usage to city average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"show me how crime rates compare to national average\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me how crime rates compare to national average\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","comparison Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests comparison Classification classifies \"compare air quality to state standards\" as comparison","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"compare air quality to state standards\" as comparison"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"show top 10 areas for income\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show top 10 areas for income\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"display highest crime rate areas\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display highest crime rate areas\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"find the best performing schools\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"find the best performing schools\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"show me the most expensive neighborhoods\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me the most expensive neighborhoods\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"trends","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"list areas with highest population growth\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"list areas with highest population growth\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"show me the top 5 areas for business growth\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the top 5 areas for business growth\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"display the highest rated neighborhoods\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display the highest rated neighborhoods\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"top_n\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"find the most walkable areas\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"find the most walkable areas\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"show me the best performing districts\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the best performing districts\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","top_n Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"top_n","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests top_n Classification classifies \"list the areas with highest quality of life\" as top_n","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"list the areas with highest quality of life\" as top_n"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"show income in hexagonal bins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show income in hexagonal bins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"hexbin","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"display crime density in hexagons\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display crime density in hexagons\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"map population using hexbins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map population using hexbins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"show me property values in hexagons\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me property values in hexagons\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"visualize unemployment in hexagonal bins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize unemployment in hexagonal bins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"show me traffic patterns in hexbins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me traffic patterns in hexbins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"display population density in hexagonal cells\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display population density in hexagonal cells\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"map crime incidents using hexbins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map crime incidents using hexbins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"hexbin","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"show me housing density in hexagons\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me housing density in hexagons\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hexbin Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hexbin Classification classifies \"visualize public transportation usage in hexbins\" as hexbin","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize public transportation usage in hexbins\" as hexbin"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"correlation","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"correlation\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"correlation\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"compare income and education with color matrix\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"compare income and education with color matrix\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"correlation","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"correlation\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"correlation\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"show relationship between crime and poverty using colors\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show relationship between crime and poverty using colors\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"map income and education together\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map income and education together\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"display property values and crime rates together\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display property values and crime rates together\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"show me income and unemployment together\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me income and unemployment together\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"compare population density and income using colors\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"compare population density and income using colors\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"show me housing prices and school quality together\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me housing prices and school quality together\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"map crime rates and income levels using color matrix\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map crime rates and income levels using color matrix\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"display education and employment together\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display education and employment together\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","bivariate Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"bivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"bivariate\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests bivariate Classification classifies \"show me property values and amenities using colors\" as bivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me property values and amenities using colors\" as bivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"show buffer of 5 miles around restaurants\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show buffer of 5 miles around restaurants\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"display 10km radius around schools\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display 10km radius around schools\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"buffer","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"map areas within 2 miles of parks\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map areas within 2 miles of parks\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"show me zones within 3km of hospitals\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me zones within 3km of hospitals\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":37,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"buffer","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"visualize areas within 1 mile of transit stops\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"visualize areas within 1 mile of transit stops\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"buffer","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"show me areas within 5km of shopping centers\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me areas within 5km of shopping centers\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"display zones within 2 miles of libraries\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display zones within 2 miles of libraries\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"buffer","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"map areas within 1km of public transportation\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"map areas within 1km of public transportation\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"show me regions within 3 miles of universities\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me regions within 3 miles of universities\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","buffer Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"buffer","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"buffer\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests buffer Classification classifies \"visualize areas within 2km of emergency services\" as buffer","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"visualize areas within 2km of emergency services\" as buffer"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"find hotspots of income\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"find hotspots of income\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"show me crime hotspots\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me crime hotspots\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"display property value hotspots\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display property value hotspots\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"map unemployment hotspots\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map unemployment hotspots\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"find areas with high population density\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"find areas with high population density\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"show me hotspots of business activity\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me hotspots of business activity\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"display areas with high traffic congestion\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display areas with high traffic congestion\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"map hotspots of public transportation usage\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map hotspots of public transportation usage\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"hotspot","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"hotspot\"\u001b[39m\nReceived: \u001b[31m\"comparison\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"show me areas with high air pollution\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me areas with high air pollution\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","hotspot Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests hotspot Classification classifies \"find hotspots of emergency incidents\" as hotspot","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"find hotspots of emergency incidents\" as hotspot"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"show network between origin cities and destination cities\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show network between origin cities and destination cities\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"display connections between neighborhoods\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display connections between neighborhoods\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"map traffic flow between areas\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map traffic flow between areas\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"network","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"network\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"network\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"show me commuting patterns\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"show me commuting patterns\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"visualize migration flows\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize migration flows\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"show me the network of public transportation routes\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the network of public transportation routes\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"display connections between business districts\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display connections between business districts\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"map the flow of goods between regions\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map the flow of goods between regions\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"show me the network of emergency response routes\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the network of emergency response routes\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","network Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests network Classification classifies \"visualize the connections between educational institutions\" as network","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"visualize the connections between educational institutions\" as network"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"multivariate analysis of income, education, and age\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"multivariate analysis of income, education, and age\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"show me multiple factors affecting property values\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me multiple factors affecting property values\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"analyze several variables together\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"analyze several variables together\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"display multiple indicators by area\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"display multiple indicators by area\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"map several demographic factors\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map several demographic factors\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"show me the relationship between multiple economic indicators\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me the relationship between multiple economic indicators\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"analyze various factors affecting crime rates\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"analyze various factors affecting crime rates\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"joint_high","expected":"multivariate","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"multivariate\"\u001b[39m\nReceived: \u001b[31m\"joint_high\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:301:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"display multiple environmental factors together\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"classifies \"display multiple environmental factors together\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"map several social indicators simultaneously\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"map several social indicators simultaneously\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","multivariate Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests multivariate Classification classifies \"show me how multiple factors affect quality of life\" as multivariate","invocations":1,"location":{"column":9,"line":299},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"classifies \"show me how multiple factors affect quality of life\" as multivariate"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Edge Cases and Special Scenarios"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Edge Cases and Special Scenarios handles queries with multiple visualization keywords","invocations":1,"location":{"column":5,"line":310},"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"handles queries with multiple visualization keywords"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Edge Cases and Special Scenarios"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Edge Cases and Special Scenarios handles ambiguous queries","invocations":1,"location":{"column":5,"line":331},"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"handles ambiguous queries"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Edge Cases and Special Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Edge Cases and Special Scenarios handles queries with temporal and spatial components","invocations":1,"location":{"column":5,"line":352},"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"handles queries with temporal and spatial components"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Edge Cases and Special Scenarios"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Edge Cases and Special Scenarios handles complex multi-part queries","invocations":1,"location":{"column":5,"line":373},"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"handles complex multi-part queries"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Analysis Result Enhancement"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"trends","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trends\"\u001b[39m\nReceived: \u001b[31m\"choropleth\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:453:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests Analysis Result Enhancement enhances analysis with appropriate visualization type","invocations":1,"location":{"column":5,"line":397},"numPassingAsserts":6,"retryReasons":[],"status":"failed","title":"enhances analysis with appropriate visualization type"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Analysis Result Enhancement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Analysis Result Enhancement preserves existing visualization type","invocations":1,"location":{"column":5,"line":458},"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"preserves existing visualization type"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Analysis Result Enhancement"],"duration":0,"failureDetails":[{"matcherResult":{"actual":"comparison","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\nReceived: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:526:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests Analysis Result Enhancement handles analysis results with multiple fields","invocations":1,"location":{"column":5,"line":489},"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"handles analysis results with multiple fields"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","ML Classifier Integration"],"duration":260,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests ML Classifier Integration uses ML classification when available","invocations":1,"location":{"column":5,"line":537},"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"uses ML classification when available"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","ML Classifier Integration"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests ML Classifier Integration falls back to pattern matching when ML is not confident","invocations":1,"location":{"column":5,"line":553},"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"falls back to pattern matching when ML is not confident"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Query Context Analysis"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"QueryClassifier Comprehensive Tests Query Context Analysis analyzes temporal references","invocations":1,"location":{"column":5,"line":572},"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"analyzes temporal references"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Query Context Analysis"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0.5\u001b[39m\nReceived:   \u001b[31m0.1\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:600:35)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests Query Context Analysis analyzes spatial references","invocations":1,"location":{"column":5,"line":588},"numPassingAsserts":5,"retryReasons":[],"status":"failed","title":"analyzes spatial references"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Query Context Analysis"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"hotspot","expected":"correlation","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"correlation\"\u001b[39m\nReceived: \u001b[31m\"hotspot\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:615:42)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests Query Context Analysis analyzes comparison references","invocations":1,"location":{"column":5,"line":604},"numPassingAsserts":4,"retryReasons":[],"status":"failed","title":"analyzes comparison references"},{"ancestorTitles":["QueryClassifier Comprehensive Tests","Query Context Analysis"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"choropleth","expected":"joint_high","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n    at Object.<anonymous> (/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts:631:42)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"QueryClassifier Comprehensive Tests Query Context Analysis analyzes joint high references","invocations":1,"location":{"column":5,"line":620},"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"analyzes joint high references"}],"endTime":1747710217082,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › choropleth Classification › classifies \"show the distribution of property values\" as choropleth\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › choropleth Classification › classifies \"visualize crime rates by neighborhood\" as choropleth\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m0.5\u001b[39m\n    Received:   \u001b[31m0.1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:302:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › choropleth Classification › classifies \"map the median home values by zip code\" as choropleth\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m0.5\u001b[39m\n    Received:   \u001b[31m0.1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:302:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › choropleth Classification › classifies \"show me the distribution of household sizes\" as choropleth\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"choropleth\"\u001b[39m\n    Received: \u001b[31m\"heatmap\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › choropleth Classification › classifies \"visualize the poverty rates by census tract\" as choropleth\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m0.5\u001b[39m\n    Received:   \u001b[31m0.1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:302:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"map population density\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"show where accidents occur most frequently\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"visualize traffic congestion\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"show me the intensity of air pollution\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"h\u001b[7meatmap\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"show me where noise complaints are most common\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › heatmap Classification › classifies \"visualize the distribution of emergency calls\" as heatmap\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"heatmap\"\u001b[39m\n    Received: \u001b[31m\"categorical\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"plot restaurants on the map\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"show me all the schools\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"map all the parks\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"plot all bus stops in the city\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"show me where all the libraries are\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"map all the public restrooms\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › scatter Classification › classifies \"show me where all the ATMs are located\" as scatter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"scatter\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"group similar locations together\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mclus\u001b[27mter\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mscat\u001b[27mter\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"cluster restaurants by area\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"show me where points are concentrated\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"heatmap\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"cluster crime incidents\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"group similar businesses together\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"show me clusters of public facilities\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"group similar land uses together\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mategorical\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"cluster similar demographic areas\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cluster\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › cluster Classification › classifies \"show me where similar activities occur\" as cluster\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"c\u001b[7mluster\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › trends Classification › classifies \"map the changes in population density\" as trends\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › trends Classification › classifies \"show me how crime rates have evolved\" as trends\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › correlation Classification › classifies \"how does population density affect property values\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › correlation Classification › classifies \"show me if income relates to crime\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"cor\u001b[7mrelation\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mh\u001b[27mor\u001b[7mopleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › correlation Classification › classifies \"show me how population density correlates with public transportation\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › correlation Classification › classifies \"compare crime rates with income levels\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\n    Received: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › correlation Classification › classifies \"show me how housing prices relate to neighborhood amenities\" as correlation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\n    Received: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"show areas with high income and low crime\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"find places with good schools and high property values\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"where do we have high employment and low poverty\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"show me areas with high income and good schools\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"find neighborhoods with high walkability and low crime\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"show me areas with high property values and good schools\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"find places with high employment and good public transportation\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"joint_high\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › joint_high Classification › classifies \"show me areas with high income and low pollution\" as joint_high\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › proportional_symbol Classification › classifies \"display population using circle size\" as proportional_symbol\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"proportional_symbol\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › proportional_symbol Classification › classifies \"visualize unemployment with circle size\" as proportional_symbol\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"proportional_symbol\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › proportional_symbol Classification › classifies \"display traffic volume with proportional circles\" as proportional_symbol\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"proportional_symbol\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › comparison Classification › classifies \"show income relative to state average\" as comparison\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"c\u001b[7momparison\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"c\u001b[7mhoropleth\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › top_n Classification › classifies \"show top 10 areas for income\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › top_n Classification › classifies \"show me the most expensive neighborhoods\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › top_n Classification › classifies \"list areas with highest population growth\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"t\u001b[7mop_n\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"t\u001b[7mrends\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › top_n Classification › classifies \"find the most walkable areas\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"top_n\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › top_n Classification › classifies \"list the areas with highest quality of life\" as top_n\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mtop_\u001b[27mn\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mcompariso\u001b[27mn\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › hexbin Classification › classifies \"display crime density in hexagons\" as hexbin\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › hexbin Classification › classifies \"show me housing density in hexagons\" as hexbin\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"h\u001b[7mexbin\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"h\u001b[7motspot\u001b[27m\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"compare income and education with color matrix\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"correlation\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"show relationship between crime and poverty using colors\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"correlation\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"map income and education together\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"display property values and crime rates together\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"show me income and unemployment together\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"compare population density and income using colors\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"show me housing prices and school quality together\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"map crime rates and income levels using color matrix\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"display education and employment together\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › bivariate Classification › classifies \"show me property values and amenities using colors\" as bivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"bivariate\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › buffer Classification › classifies \"map areas within 2 miles of parks\" as buffer\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"buffer\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › buffer Classification › classifies \"visualize areas within 1 mile of transit stops\" as buffer\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"buffer\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › buffer Classification › classifies \"show me areas within 5km of shopping centers\" as buffer\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"buffer\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › buffer Classification › classifies \"map areas within 1km of public transportation\" as buffer\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"buffer\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › buffer Classification › classifies \"visualize areas within 2km of emergency services\" as buffer\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"buffer\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › hotspot Classification › classifies \"display areas with high traffic congestion\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hotspot\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › hotspot Classification › classifies \"show me areas with high air pollution\" as hotspot\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"hotspot\"\u001b[39m\n    Received: \u001b[31m\"comparison\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › network Classification › classifies \"show me commuting patterns\" as network\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"network\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › multivariate Classification › classifies \"display multiple environmental factors together\" as multivariate\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"multivariate\"\u001b[39m\n    Received: \u001b[31m\"joint_high\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 299 |\u001b[39m         test(\u001b[32m`classifies \"${query}\" as ${type}`\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 300 |\u001b[39m           \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 301 |\u001b[39m           expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(type)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m           expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:301:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › Analysis Result Enhancement › enhances analysis with appropriate visualization type\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trends\"\u001b[39m\n    Received: \u001b[31m\"choropleth\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 451 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 452 |\u001b[39m         \u001b[36mconst\u001b[39m enhanced \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39menhanceAnalysisResult(analysisResult)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 453 |\u001b[39m         expect(enhanced\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(expectedType)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 454 |\u001b[39m         expect(enhanced\u001b[33m.\u001b[39mqueryType)\u001b[33m.\u001b[39mtoBe(expectedType)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 455 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 456 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:453:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › Analysis Result Enhancement › handles analysis results with multiple fields\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"co\u001b[7mrrelati\u001b[27mon\"\u001b[39m\n    Received: \u001b[31m\"co\u001b[7mmparis\u001b[27mon\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 524 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 525 |\u001b[39m         \u001b[36mconst\u001b[39m enhanced \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39menhanceAnalysisResult(analysisResult)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 526 |\u001b[39m         expect(enhanced\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(expectedType)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 527 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 528 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 529 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:526:44)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › Query Context Analysis › analyzes spatial references\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: > \u001b[32m0.5\u001b[39m\n    Received:   \u001b[31m0.1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 598 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 599 |\u001b[39m         expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCHOROPLETH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 600 |\u001b[39m         expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 601 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 602 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 603 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:600:35)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › Query Context Analysis › analyzes comparison references\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"correlation\"\u001b[39m\n    Received: \u001b[31m\"hotspot\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 613 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 614 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 615 |\u001b[39m         expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCORRELATION\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 616 |\u001b[39m         expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 617 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 618 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:615:42)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryClassifier Comprehensive Tests › Query Context Analysis › analyzes joint high references\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mjoint_hig\u001b[27mh\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mchoroplet\u001b[27mh\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 629 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m query \u001b[36mof\u001b[39m queries) {\u001b[22m\n\u001b[2m     \u001b[90m 630 |\u001b[39m         \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifier\u001b[33m.\u001b[39mclassifyQuery(query)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 631 |\u001b[39m         expect(result\u001b[33m.\u001b[39mvisualizationType)\u001b[33m.\u001b[39mtoBe(\u001b[33mVisualizationType\u001b[39m\u001b[33m.\u001b[39m\u001b[33mJOINT_HIGH\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 632 |\u001b[39m         expect(result\u001b[33m.\u001b[39mconfidence)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0.5\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 633 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 634 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/query-classifier-comprehensive.test.ts\u001b[39m\u001b[0m\u001b[2m:631:42)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/voldeck/code/newdemo/test/query-classifier-comprehensive.test.ts","startTime":1747710214721,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1747710217922,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    /Users/voldeck/code/newdemo/node_modules/@arcgis/core/layers/FeatureLayer.js:5\n    import{_ as e}from\"../chunks/tslib.es6.js\";import t from\"../PopupTemplate.js\";import r from\"../request.js\";import i from\"../core/Clonable.js\";import o from\"../core/Collection.js\";import s from\"../core/Error.js\";import{clone as a}from\"../core/lang.js\";import n from\"../core/Logger.js\";import{destroyMaybe as l}from\"../core/maybe.js\";import{MultiOriginJSONMixin as p}from\"../core/MultiOriginJSONSupport.js\";import{setDeepValue as u}from\"../core/object.js\";import{debounce as d,throwIfAbortError as y,whenOrAbort as c}from\"../core/promiseUtils.js\";import{sqlAnd as m}from\"../core/sql.js\";import{urlToObject as f,join as h}from\"../core/urlUtils.js\";import{property as b}from\"../core/accessorSupport/decorators/property.js\";import{cast as g}from\"../core/accessorSupport/decorators/cast.js\";import{reader as w}from\"../core/accessorSupport/decorators/reader.js\";import{subclass as v}from\"../core/accessorSupport/decorators/subclass.js\";import{writer as j}from\"../core/accessorSupport/decorators/writer.js\";import{excludeTables as F}from\"../core/accessorSupport/layerContainerType.js\";import T from\"../form/FormTemplate.js\";import S from\"../geometry/SpatialReference.js\";import I from\"./Layer.js\";import{MemorySource as E}from\"./graphics/sources/MemorySource.js\";import{APIKeyMixin as L}from\"./mixins/APIKeyMixin.js\";import{ArcGISService as D}from\"./mixins/ArcGISService.js\";import{BlendLayer as _}from\"./mixins/BlendLayer.js\";import{CustomParametersMixin as x}from\"./mixins/CustomParametersMixin.js\";import{DisplayFilteredLayer as P}from\"./mixins/DisplayFilteredLayer.js\";import{EditBusLayer as C}from\"./mixins/EditBusLayer.js\";import{FeatureEffectLayer as M}from\"./mixins/FeatureEffectLayer.js\";import{FeatureLayerBase as q}from\"./mixins/FeatureLayerBase.js\";import{FeatureReductionLayer as O}from\"./mixins/FeatureReductionLayer.js\";import{OperationalLayer as A}from\"./mixins/OperationalLayer.js\";import{OrderedLayer as V}from\"./mixins/OrderedLayer.js\";import{PortalLayer as Q}from\"./mixins/PortalLayer.js\";import{PublishableLayer as R}from\"./mixins/PublishableLayer.js\";import{RefreshableLayer as U}from\"./mixins/RefreshableLayer.js\";import{ScaleRangeLayer as B}from\"./mixins/ScaleRangeLayer.js\";import{TemporalLayer as N}from\"./mixins/TemporalLayer.js\";import{TrackableLayer as $}from\"./mixins/TrackableLayer.js\";import{titleFromUrlAndName as G,parse as J,cleanTitle as W}from\"./support/arcgisLayerUrl.js\";import{attributeTableTemplate as Z,id as k,labelsVisible as z,opacityDrawingInfo as H,legendEnabled as K,listMode as X,popupEnabled as Y,screenSizePerspectiveEnabled as ee}from\"./support/commonProperties.js\";import{ensureLayerCredential as te,computeEffectiveEditingEnabled as re,readGlobalIdField as ie,readObjectIdField as oe,createDefaultRenderer as se,addAttachment as ae,updateAttachment as ne,applyEdits as le,uploadAssets as pe,createQuery as ue,deleteAttachments as de,fetchRecomputedExtents as ye,getFeatureType as ce,getFieldDomain as me,queryAttachments as fe,queryObjectIds as he,queryFeatureCount as be,queryExtent as ge,queryRelatedFeatures as we,queryRelatedFeaturesCount as ve,validateBinsQuery as je,hasDataChanged as Fe,geometryTypeKebabDict as Te}from\"./support/featureLayerUtils.js\";import Se from\"./support/FeatureTemplate.js\";import Ie from\"./support/FeatureType.js\";import{defineFieldProperties as Ee}from\"./support/fieldProperties.js\";import{fixRendererFields as Le,fixTimeInfoFields as De}from\"./support/fieldUtils.js\";import _e from\"./support/LabelClass.js\";import{reader as xe}from\"./support/labelingInfo.js\";import{getFeatureLayerCapabilities as Pe}from\"./support/serviceCapabilitiesUtils.js\";import Ce from\"./support/TimeInfo.js\";import Me from\"./support/TitleCreator.js\";import{serviceSupportsSpatialReference as qe}from\"./support/versionUtils.js\";import{DataLayerSource as Oe}from\"./support/source/DataLayerSource.js\";import{read as Ae}from\"../renderers/support/jsonUtils.js\";import{loadStyleRenderer as Ve}from\"../renderers/support/styleUtils.js\";import{rendererTypes as Qe,webSceneRendererTypes as Re}from\"../renderers/support/typeUtils.js\";import Ue from\"../rest/support/FeatureSet.js\";import Be from\"../rest/support/Query.js\";import{isNumber as Ne}from\"../support/guards.js\";import{createPopupTemplate as $e}from\"../support/popupUtils.js\";import{symbolTypes as Ge}from\"../symbols/support/typeUtils.js\";import{SaveOperationType as Je}from\"../webdoc/interfaces.js\";import{opacityToTransparency as We}from\"../webdoc/support/opacityUtils.js\";const Ze=\"FeatureLayer\";function ke(e,t){return new s(\"layer:unsupported\",`Layer (${e.title}, ${e.id}) of type '${e.declaredClass}' ${t}`,{layer:e})}function ze(e){return e&&e instanceof o}const He=Ee();function Ke(e,t,r){const i=!!r?.writeLayerSchema;return{enabled:i,ignoreOrigin:i}}let Xe=class extends(q(O(M(R(C(P(_(V(N($(B(U(D(A(Q(p(x(L(i.ClonableMixin(I)))))))))))))))))))){constructor(...e){super(...e),this.attributeTableTemplate=null,this.charts=null,this.copyright=null,this.displayField=null,this.dynamicDataSource=null,this.fields=null,this.fieldsIndex=null,this.formTemplate=null,this.fullExtent=null,this.geometryType=null,this.hasM=void 0,this.hasZ=void 0,this.infoFor3D=null,this.isTable=!1,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.objectIdField=null,this.operationalLayerType=\"ArcGISFeatureLayer\",this.outFields=null,this.path=null,this.popupEnabled=!0,this.popupTemplate=null,this.resourceInfo=null,this.screenSizePerspectiveEnabled=!0,this.spatialReference=S.WGS84,this.subtypeCode=null,this.supportedSourceTypes=new Set([\"Feature Layer\",\"Oriented Imagery Layer\",\"Table\",\"Catalog Layer\"]),this.templates=null,this.timeInfo=null,this.title=null,this.sublayerTitleMode=\"item-title\",this.type=\"feature\",this.typeIdField=null,this.types=null,this.visible=!0,this._debouncedSaveOperations=d((async(e,t,r)=>{const{save:i,saveAs:o}=await import(\"./save/featureLayerUtils.js\");switch(e){case Je.SAVE:return i(this,t);case Je.SAVE_AS:return o(this,r,t)}}))}destroy(){this.source?.destroy()}normalizeCtorArgs(e,t){return\"string\"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;if(this.portalItem?.loaded&&this.source)return this.addResolvingPromise(this.createGraphicsSource(t).then((e=>this.initLayerProperties(e)))),Promise.resolve(this);const r=this.loadFromPortal({supportedTypes:[\"Feature Service\",\"Feature Collection\",\"Scene Service\"]},e).catch(y).then((async()=>{if(this.url&&null==this.layerId&&/FeatureServer|MapServer\\/*$/i.test(this.url)){const e=await this._fetchFirstValidLayerId(t);null!=e&&(this.layerId=e)}if(!this.url&&!this._hasMemorySource())throw new s(\"feature-layer:missing-url-or-source\",\"Feature layer must be created with either a url or a source\");return this.initLayerProperties(await this.createGraphicsSource(t))})).then((()=>te(this,\"load\",e)));return this.addResolvingPromise(r),Promise.resolve(this)}get _titleCreator(){const e=this._get(\"_titleCreator\");return l(e),new Me({fieldsIndex:this.fieldsIndex,objectIdField:this.objectIdField,fields:this.fields,displayField:this.displayField,effectivePopupTemplate:this.popupTemplate??this.defaultPopupTemplate})}readCapabilities(e,t){return t=t.layerDefinition||t,Pe(t,this.url)}get createQueryVersion(){return this.commitProperty(\"definitionExpression\"),this.commitProperty(\"dynamicDataSource\"),this.commitProperty(\"timeExtent\"),this.commitProperty(\"timeOffset\"),this.commitProperty(\"geometryType\"),this.commitProperty(\"gdbVersion\"),this.commitProperty(\"historicMoment\"),this.commitProperty(\"returnZ\"),this.commitProperty(\"capabilities\"),this.commitProperty(\"returnM\"),(this._get(\"createQueryVersion\")??0)+1}get editingEnabled(){return!(this.loaded&&!this.capabilities?.operations.supportsEditing)&&(this._isOverridden(\"editingEnabled\")?this._get(\"editingEnabled\"):this._hasMemorySource()||this.userHasEditingPrivileges)}set editingEnabled(e){this._overrideIfSome(\"editingEnabled\",e)}readEditingEnabled(e,t){return this._readEditingEnabled(t,!1)}readEditingEnabledFromWebMap(e,t,r){return this._readEditingEnabled(t,!0,r)}writeEditingEnabled(e,t){this._writeEditingEnabled(e,t,!1)}writeEditingEnabledToWebMap(e,t,r,i){this._writeEditingEnabled(e,t,!0,i)}get effectiveEditingEnabled(){return re(this)}get featureTitleFields(){return[...this._titleCreator.requiredFields]}readIsTable(e,t){return\"Table\"===(t=t?.layerDefinition??t).type||!t.geometryType}writeIsTable(e,t,r,i){i?.writeLayerSchema&&u(r,e?\"Table\":\"Feature Layer\",t)}readGlobalIdField(e,t){return ie(t.layerDefinition||t)}readObjectIdField(e,t){return oe(t.layerDefinition||t)}get parsedUrl(){const e=f(this.url);return null!=e&&(null!=this.dynamicDataSource?e.path=h(e.path,\"dynamicLayer\"):null!=this.layerId&&(e.path=h(e.path,this.layerId.toString()))),e}get defaultPopupTemplate(){return this.createPopupTemplate()}set renderer(e){Le(e,this.fieldsIndex),this._set(\"renderer\",e)}readRenderer(e,t,r){t=t.layerDefinition||t;const i=t.drawingInfo?.renderer;if(i){const e=Ae(i,t,r)??void 0;return e||n.getLogger(this).error(\"Failed to create renderer\",{rendererDefinition:t.drawingInfo.renderer,layer:this,context:r}),e}return se(t,r)}set source(e){const t=this._get(\"source\");t!==e&&(ze(t)&&this._resetMemorySource(t),ze(e)&&this._initMemorySource(e),this._set(\"source\",e))}castSource(e){return e?Array.isArray(e)||e instanceof o?new E({layer:this,items:e}):e:null}readSource(e,t){const r=Ue.fromJSON(t.featureSet);return new E({layer:this,items:r?.features??[]})}readTemplates(e,t){const r=t.editFieldsInfo,i=r?.creatorField,o=r?.editorField;return e=e?.map((e=>Se.fromJSON(e))),this._fixTemplates(e,i),this._fixTemplates(e,o),e}readTitle(e,t){const r=t.layerDefinition?.name??t.name,i=t.title||t.layerDefinition?.title;if(r){const e=this.portalItem?.title;if(\"item-title\"===this.sublayerTitleMode)return this.url?G(this.url,r):r;let t=r;if(!t&&this.url){const e=J(this.url);null!=e&&(t=e.title)}if(!t)return;return\"item-title-and-service-name\"===this.sublayerTitleMode&&e&&e!==t&&(t=e+\" - \"+t),W(t)}if(\"item-title\"===this.sublayerTitleMode&&i)return i}readTitleFromWebMap(e,t){return t.title||t.layerDefinition?.name}readTypeIdField(e,t){let r=(t=t.layerDefinition||t).typeIdField;if(r&&t.fields){r=r.toLowerCase();const e=t.fields.find((e=>e.name.toLowerCase()===r));e&&(r=e.name)}return r}readTypes(e,t){e=(t=t.layerDefinition||t).types;const r=t.editFieldsInfo,i=r?.creatorField,o=r?.editorField;return e?.map((e=>(e=Ie.fromJSON(e),this._fixTemplates(e.templates,i),this._fixTemplates(e.templates,o),e)))}readVisible(e,t){return null!=t.layerDefinition?.defaultVisibility?!!t.layerDefinition.defaultVisibility:null!=t.visibility?!!t.visibility:void 0}async addAttachment(e,t){const r=await ae(this,e,t,Ze);return this.lastEditsEventDate=new Date,r}async updateAttachment(e,t,r){const i=await ne(this,e,t,r,Ze);return this.lastEditsEventDate=new Date,i}async applyEdits(e,t){return le(this,e,t)}async uploadAssets(e,t){return pe(this,e,t)}on(e,t){return super.on(e,t)}createPopupTemplate(e){return $e(this,e)}async createGraphicsSource(e){if(this._hasMemorySource()&&this.source)return this.source.load({signal:e});const{default:t}=await c(import(\"./graphics/sources/FeatureLayerSource.js\"),e);return new t({layer:this,supportedSourceTypes:this.supportedSourceTypes}).load({signal:e})}createQuery(){const e=ue(this);e.dynamicDataSource=this.dynamicDataSource;const t=null!=this.subtypeCode?`${this.subtypeField} = ${this.subtypeCode}`:null,r=m(this.definitionExpression,t);return e.where=r||\"1=1\",e}async deleteAttachments(e,t){const r=await de(this,e,t,Ze);return this.lastEditsEventDate=new Date,r}async fetchRecomputedExtents(e){return ye(this,e,Ze)}getFeatureTitle(e,t={timeZone:\"system\",fetchMissingFields:!1}){return this._titleCreator.getTitle(this,e,t)}getFeatureType(e){return ce(this.types,this.typeIdField,e)}getFieldDomain(e,t){return me(this,e,t,this.getField(e)?.domain??null)}async queryAttachments(e,t){return fe(this,e,t,Ze)}async queryFeatures(e,t){const r=await this.load(),i=await r.source.queryFeatures(Be.from(e)??r.createQuery(),t);if(i?.features)for(const o of i.features)o.layer=o.sourceLayer=r;return i}async queryObjectIds(e,t){return(await he(this,e,t,Ze)).filter(Ne)}async queryFeatureCount(e,t){return be(this,e,t,Ze)}async queryExtent(e,t){return ge(this,e,t,Ze)}async queryRelatedFeatures(e,t){return we(this,e,t,Ze)}async queryRelatedFeaturesCount(e,t){return ve(this,e,t,Ze)}async queryTopFeatures(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopFeatures||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopFeatures capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\"),a=await r.queryTopFeatures(o.default.from(e),t);if(a?.features)for(const s of a.features)s.layer=s.sourceLayer=this;return a}async queryAttributeBins(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryAttributeBins||!i?.operations?.supportsQueryBins)throw new s(Ze,\"Layer source does not support queryAttributeBins capability\");je(e,i,Ze);const o=await import(\"../rest/support/AttributeBinsQuery.js\"),a=await r.queryAttributeBins(o.default.from(e),t);if(a.features)for(const s of a.features)s.layer=s.sourceLayer=this;return a}async queryTopObjectIds(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopObjectIds||!i?.query.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopObjectIds capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return(await r.queryTopObjectIds(o.default.from(e),t)).filter(Ne)}async queryTopFeaturesExtent(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopExtents||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryTopExtents capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return r.queryTopExtents(o.default.from(e),t)}async queryTopFeatureCount(e,t){const{source:r,capabilities:i}=await this.load();if(!r.queryTopCount||!i?.query?.supportsTopFeaturesQuery)throw new s(Ze,\"Layer source does not support queryFeatureCount capability\");const o=await import(\"../rest/support/TopFeaturesQuery.js\");return r.queryTopCount(o.default.from(e),t)}read(e,t){const r=e.featureCollection;if((r||\"Feature Collection\"===e.type)&&(this.resourceInfo=e),r){const e=r.layers;e&&1===e.length&&(super.read(e[0],t),null!=r.showLegend&&super.read({showLegend:r.showLegend},t))}super.read(e,t),t&&\"service\"===t.origin&&(this.revert([\"objectIdField\",\"fields\",\"timeInfo\",\"dateFieldsTimeZone\"],\"service\"),this.spatialReference||this.revert([\"spatialReference\"],\"service\"))}write(e,t){t={...t,origin:t?.origin??void 0,writeLayerSchema:t?.writeLayerSchema??this._hasMemorySource()};const{origin:r,layerContainerType:i,messages:o}=t;if(this.dynamicDataSource)return o?.push(ke(this,\"using a dynamic data source cannot be written to web scenes, web maps and feature service items\")),null;if(this.isTable){if((\"web-map\"===r||\"web-scene\"===r)&&\"tables\"!==i)return o?.push(ke(this,`a table source can only be written to tables, not ${i}`)),null;if(this._hasMemorySource())return o?.push(ke(this,\"using an in-memory table source cannot be written to web scenes and web maps\")),null}else if(this.loaded&&(\"web-map\"===r||\"web-scene\"===r)&&\"tables\"===i)return o?.push(ke(this,\"using a non-table source cannot be written to tables in web maps or web scenes\")),null;return super.write(e,t)}clone(){if(this._hasMemorySource())throw new s(Ze,`FeatureLayer (title: ${this.title}, id: ${this.id}) created using in-memory source cannot be cloned`);return super.clone()}serviceSupportsSpatialReference(e){return!!this.loaded&&(\"memory\"===this.source?.type||qe(this,e))}async save(e){return this._debouncedSaveOperations(Je.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(Je.SAVE_AS,t,e)}_readEditingEnabled(e,t,r){let i=e.layerDefinition?.capabilities;return i?this._hasEditingCapability(i):(i=e.capabilities,t&&\"web-map\"===r?.origin&&!this._hasMemorySource()&&i?this._hasEditingCapability(i):void 0)}_hasEditingCapability(e){return e.toLowerCase().split(\",\").map((e=>e.trim())).includes(\"editing\")}_writeEditingEnabled(e,t,r,i){if(!e){const e=this.capabilities?.operations?.supportsSync?\"Query,Sync\":\"Query\";u(\"layerDefinition.capabilities\",e,t),r&&!i?.writeLayerSchema&&(t.capabilities=e)}}_fetchFirstValidLayerId(e){return r(this.url??\"\",{query:{f:\"json\",...this.customParameters,token:this.apiKey},responseType:\"json\",signal:e}).then((e=>{const t=e.data;if(t)return this.findFirstValidLayerId(t)}))}async initLayerProperties(e){return this._set(\"source\",e),e.sourceJSON&&(this.sourceJSON=e.sourceJSON,this.read(e.sourceJSON,{origin:\"service\",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl})),this._verifySource(),this._verifyFields(),Le(this.renderer,this.fieldsIndex),De(this.timeInfo,this.fieldsIndex),this._hasMemorySource()&&\"mesh\"===this.geometryType&&(this.capabilities.query.supportsReturnMesh=!0),Ve(this,{origin:\"service\"})}async hasDataChanged(){return Fe(this)}async fetchPublishingStatus(){const e=this.source;return e?.fetchPublishingStatus?e.fetchPublishingStatus():\"unavailable\"}_verifyFields(){const e=this.parsedUrl?.path??\"undefined\";this.objectIdField||console.log(\"FeatureLayer: 'objectIdField' property is not defined (url: \"+e+\")\"),this.isTable||this._hasMemorySource()||-1!==e.search(/\\/FeatureServer\\//i)||this.fields?.some((e=>\"geometry\"===e.type))||console.log(\"FeatureLayer: unable to find field of type 'geometry' in the layer 'fields' list. If you are using a map service layer, features will not have geometry (url: \"+e+\")\")}_fixTemplates(e,t){e&&e.forEach((e=>{const r=e.prototype?.attributes;r&&t&&delete r[t]}))}_verifySource(){if(this._hasMemorySource()){if(this.url)throw new s(\"feature-layer:mixed-source-and-url\",\"FeatureLayer cannot be created with both an in-memory source and a url\")}else if(!this.url)throw new s(\"feature-layer:source-or-url-required\",\"FeatureLayer requires either a url, a valid portal item or a source\")}_initMemorySource(e){e.forEach((e=>{e.layer=this,e.sourceLayer=this})),this.addHandles([e.on(\"after-add\",(e=>{e.item.layer=this,e.item.sourceLayer=this})),e.on(\"after-remove\",(e=>{e.item.layer=null,e.item.sourceLayer=null}))],\"fl-source\")}_resetMemorySource(e){e.forEach((e=>{e.layer=null,e.sourceLayer=null})),this.removeHandles(\"fl-source\")}_hasMemorySource(){return!(this.url||!this.source)}findFirstValidLayerId(e){return Array.isArray(e.layers)&&e.layers.length>0?e.layers[0].id:Array.isArray(e.tables)&&e.tables.length>0?e.tables[0].id:void 0}};e([b({clonable:!1,readOnly:!0})],Xe.prototype,\"_titleCreator\",null),e([b(Z)],Xe.prototype,\"attributeTableTemplate\",void 0),e([w(\"service\",\"capabilities\")],Xe.prototype,\"readCapabilities\",null),e([b({json:{origins:{\"web-scene\":{write:!1}},write:!0}})],Xe.prototype,\"charts\",void 0),e([b({readOnly:!0})],Xe.prototype,\"createQueryVersion\",null),e([b({json:{read:{source:\"layerDefinition.copyrightText\"}}})],Xe.prototype,\"copyright\",void 0),e([b({json:{read:{source:\"layerDefinition.displayField\"}}})],Xe.prototype,\"displayField\",void 0),e([b({types:Ge,readOnly:!0})],Xe.prototype,\"defaultSymbol\",void 0),e([b({type:Oe})],Xe.prototype,\"dynamicDataSource\",void 0),e([b({type:Boolean})],Xe.prototype,\"editingEnabled\",null),e([w([\"portal-item\",\"web-scene\"],\"editingEnabled\",[\"layerDefinition.capabilities\"])],Xe.prototype,\"readEditingEnabled\",null),e([w(\"web-map\",\"editingEnabled\",[\"capabilities\",\"layerDefinition.capabilities\"])],Xe.prototype,\"readEditingEnabledFromWebMap\",null),e([j([\"portal-item\",\"web-scene\"],\"editingEnabled\",{\"layerDefinition.capabilities\":{type:String}})],Xe.prototype,\"writeEditingEnabled\",null),e([j(\"web-map\",\"editingEnabled\",{capabilities:{type:String},\"layerDefinition.capabilities\":{type:String}})],Xe.prototype,\"writeEditingEnabledToWebMap\",null),e([b({readOnly:!0})],Xe.prototype,\"effectiveEditingEnabled\",null),e([b({clonable:!1,readOnly:!0})],Xe.prototype,\"featureTitleFields\",null),e([b({...He.fields,json:{read:{source:\"layerDefinition.fields\"},origins:{service:{name:\"fields\"},\"web-map\":{write:{target:\"layerDefinition.fields\",overridePolicy:Ke}}}}})],Xe.prototype,\"fields\",void 0),e([b(He.fieldsIndex)],Xe.prototype,\"fieldsIndex\",void 0),e([b({type:T,json:{name:\"formInfo\",write:!0,origins:{\"web-scene\":{read:!1,write:!1}}}})],Xe.prototype,\"formTemplate\",void 0),e([b({json:{read:{source:\"layerDefinition.extent\"}}})],Xe.prototype,\"fullExtent\",void 0),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.geometryType\",overridePolicy:Ke,writer(e,t,r){const i=e?Te.toJSON(e):null;i&&u(r,i,t)}}}},read:{source:\"layerDefinition.geometryType\",reader:Te.read}}})],Xe.prototype,\"geometryType\",void 0),e([b({json:{read:{source:\"layerDefinition.hasM\"}}})],Xe.prototype,\"hasM\",void 0),e([b({json:{read:{source:\"layerDefinition.hasZ\"}}})],Xe.prototype,\"hasZ\",void 0),e([b(k)],Xe.prototype,\"id\",void 0),e([b({readOnly:!0,json:{origins:{service:{read:!0}},read:!1}})],Xe.prototype,\"infoFor3D\",void 0),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.type\"}}}}})],Xe.prototype,\"isTable\",void 0),e([w(\"service\",\"isTable\",[\"type\",\"geometryType\"]),w(\"isTable\",[\"layerDefinition.type\",\"layerDefinition.geometryType\"])],Xe.prototype,\"readIsTable\",null),e([j(\"web-map\",\"isTable\")],Xe.prototype,\"writeIsTable\",null),e([b(z)],Xe.prototype,\"labelsVisible\",void 0),e([b({type:[_e],json:{origins:{service:{name:\"drawingInfo.labelingInfo\",read:xe,write:!1},\"web-scene\":{name:\"layerDefinition.drawingInfo.labelingInfo\",read:xe,write:{enabled:!0,layerContainerTypes:F}}},name:\"layerDefinition.drawingInfo.labelingInfo\",read:xe,write:!0}})],Xe.prototype,\"labelingInfo\",void 0),e([b((()=>{const e=a(H);return e.json.origins[\"portal-item\"]={write:{target:\"layerDefinition.drawingInfo.transparency\",writer(e,t,r){u(r,We(e),t)}}},e})())],Xe.prototype,\"opacity\",void 0),e([b(K)],Xe.prototype,\"legendEnabled\",void 0),e([b({type:[\"show\",\"hide\"],json:(()=>{const e=a(X.json);return e.origins[\"portal-item\"]={read:!1,write:!1},e})()})],Xe.prototype,\"listMode\",void 0),e([w(\"globalIdField\",[\"layerDefinition.globalIdField\",\"layerDefinition.fields\"])],Xe.prototype,\"readGlobalIdField\",null),e([b({json:{origins:{\"web-map\":{write:{target:\"layerDefinition.objectIdField\",overridePolicy:Ke}}}}})],Xe.prototype,\"objectIdField\",void 0),e([w(\"objectIdField\",[\"layerDefinition.objectIdField\",\"layerDefinition.fields\"])],Xe.prototype,\"readObjectIdField\",null),e([b({type:[\"ArcGISFeatureLayer\"],json:{write:{target:\"layerType\",ignoreOrigin:!0,layerContainerTypes:F}}})],Xe.prototype,\"operationalLayerType\",void 0),e([b(He.outFields)],Xe.prototype,\"outFields\",void 0),e([b({readOnly:!0})],Xe.prototype,\"parsedUrl\",null),e([b({type:String,json:{origins:{\"web-scene\":{read:!0,write:!0}},read:!1}})],Xe.prototype,\"path\",void 0),e([b(Y)],Xe.prototype,\"popupEnabled\",void 0),e([b({type:t,json:{name:\"popupInfo\",write:!0}})],Xe.prototype,\"popupTemplate\",void 0),e([b({readOnly:!0})],Xe.prototype,\"defaultPopupTemplate\",null),e([b({types:Qe,json:{origins:{service:{write:{target:\"drawingInfo.renderer\",enabled:!1}},\"web-scene\":{types:Re,name:\"layerDefinition.drawingInfo.renderer\",write:{layerContainerTypes:F,overridePolicy:(e,t,r)=>({ignoreOrigin:r?.writeLayerSchema})}}},write:{target:\"layerDefinition.drawingInfo.renderer\",overridePolicy:(e,t,r)=>({ignoreOrigin:r?.writeLayerSchema})}}})],Xe.prototype,\"renderer\",null),e([w(\"service\",\"renderer\",[\"drawingInfo.renderer\",\"defaultSymbol\"]),w(\"renderer\",[\"layerDefinition.drawingInfo.renderer\",\"layerDefinition.defaultSymbol\"])],Xe.prototype,\"readRenderer\",null),e([b()],Xe.prototype,\"resourceInfo\",void 0),e([b((()=>{const e=a(ee);return e.json.origins[\"portal-item\"]={read:!1,write:!1},e})())],Xe.prototype,\"screenSizePerspectiveEnabled\",void 0),e([b({clonable:!1})],Xe.prototype,\"source\",null),e([g(\"source\")],Xe.prototype,\"castSource\",null),e([w(\"portal-item\",\"source\",[\"featureSet\"]),w(\"web-map\",\"source\",[\"featureSet\"])],Xe.prototype,\"readSource\",null),e([b({json:{read:{source:\"layerDefinition.extent.spatialReference\"}}})],Xe.prototype,\"spatialReference\",void 0),e([b({type:Number})],Xe.prototype,\"subtypeCode\",void 0),e([b({type:[Se]})],Xe.prototype,\"templates\",void 0),e([w(\"templates\",[\"editFieldsInfo\",\"creatorField\",\"editorField\",\"templates\"])],Xe.prototype,\"readTemplates\",null),e([b({type:Ce})],Xe.prototype,\"timeInfo\",void 0),e([b()],Xe.prototype,\"title\",void 0),e([w(\"service\",\"title\",[\"name\"]),w(\"portal-item\",\"title\",[\"layerDefinition.title\",\"layerDefinition.name\",\"title\"])],Xe.prototype,\"readTitle\",null),e([w(\"web-map\",\"title\",[\"layerDefinition.name\",\"title\"])],Xe.prototype,\"readTitleFromWebMap\",null),e([b({type:String})],Xe.prototype,\"sublayerTitleMode\",void 0),e([b({json:{read:!1}})],Xe.prototype,\"type\",void 0),e([b({type:String})],Xe.prototype,\"typeIdField\",void 0),e([w(\"service\",\"typeIdField\"),w(\"typeIdField\",[\"layerDefinition.typeIdField\"])],Xe.prototype,\"readTypeIdField\",null),e([b({type:[Ie]})],Xe.prototype,\"types\",void 0),e([w(\"service\",\"types\",[\"types\"]),w(\"types\",[\"layerDefinition.types\"])],Xe.prototype,\"readTypes\",null),e([b({type:Boolean,json:{origins:{\"portal-item\":{write:{target:\"layerDefinition.defaultVisibility\"}}}}})],Xe.prototype,\"visible\",void 0),e([w(\"portal-item\",\"visible\",[\"visibility\",\"layerDefinition.defaultVisibility\"])],Xe.prototype,\"readVisible\",null),Xe=e([v(\"esri.layers.FeatureLayer\")],Xe);const Ye=Xe;export{Ye as default};\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n    \u001b[0m \u001b[90m 1 |\u001b[39m \u001b[90m/* eslint-disable no-prototype-builtins */\u001b[39m\n     \u001b[90m 2 |\u001b[39m \u001b[90m/* eslint-disable prefer-const */\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mFeatureLayer\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/layers/FeatureLayer'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 4 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mSimpleRenderer\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/renderers/SimpleRenderer'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 5 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mSimpleFillSymbol\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/symbols/SimpleFillSymbol'\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 6 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mClassBreaksRenderer\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@arcgis/core/renderers/ClassBreaksRenderer'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Runtime.createScriptFromCode (\u001b[22mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n      \u001b[2mat Object.require (\u001b[22mutils/visualizations/single-layer-visualization.ts\u001b[2m:3:1)\u001b[22m\n      \u001b[2mat Object.require (\u001b[22mutils/dynamic-visualization-factory.ts\u001b[2m:2:1)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mutils/visualization-factory.test.ts\u001b[39m\u001b[0m\u001b[2m:1:1)\u001b[22m\n","name":"/Users/voldeck/code/newdemo/utils/visualization-factory.test.ts","startTime":1747710217922,"status":"failed","summary":""}],"wasInterrupted":false,"coverageMap":{"/Users/voldeck/code/newdemo/lib/query-complexity-scorer.ts":{"path":"/Users/voldeck/code/newdemo/lib/query-complexity-scorer.ts","statementMap":{"0":{"start":{"line":21,"column":0},"end":{"line":21,"column":16}},"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":25,"column":21},"end":{"line":25,"column":47}},"3":{"start":{"line":28,"column":14},"end":{"line":28,"column":15}},"4":{"start":{"line":29,"column":32},"end":{"line":29,"column":34}},"5":{"start":{"line":32,"column":25},"end":{"line":32,"column":61}},"6":{"start":{"line":33,"column":2},"end":{"line":36,"column":3}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":41}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":112}},"9":{"start":{"line":39,"column":21},"end":{"line":43,"column":4}},"10":{"start":{"line":45,"column":26},"end":{"line":45,"column":78}},"11":{"start":{"line":45,"column":52},"end":{"line":45,"column":77}},"12":{"start":{"line":46,"column":2},"end":{"line":50,"column":3}},"13":{"start":{"line":47,"column":23},"end":{"line":47,"column":62}},"14":{"start":{"line":48,"column":4},"end":{"line":48,"column":24}},"15":{"start":{"line":49,"column":4},"end":{"line":49,"column":105}},"16":{"start":{"line":53,"column":24},"end":{"line":56,"column":4}},"17":{"start":{"line":58,"column":29},"end":{"line":58,"column":84}},"18":{"start":{"line":58,"column":58},"end":{"line":58,"column":83}},"19":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"20":{"start":{"line":60,"column":26},"end":{"line":60,"column":68}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":27}},"22":{"start":{"line":62,"column":4},"end":{"line":62,"column":117}},"23":{"start":{"line":66,"column":33},"end":{"line":70,"column":4}},"24":{"start":{"line":72,"column":28},"end":{"line":72,"column":92}},"25":{"start":{"line":72,"column":66},"end":{"line":72,"column":91}},"26":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"27":{"start":{"line":74,"column":25},"end":{"line":74,"column":62}},"28":{"start":{"line":75,"column":4},"end":{"line":75,"column":26}},"29":{"start":{"line":76,"column":4},"end":{"line":76,"column":121}},"30":{"start":{"line":80,"column":26},"end":{"line":83,"column":4}},"31":{"start":{"line":85,"column":29},"end":{"line":85,"column":86}},"32":{"start":{"line":85,"column":60},"end":{"line":85,"column":85}},"33":{"start":{"line":86,"column":29},"end":{"line":86,"column":58}},"34":{"start":{"line":88,"column":2},"end":{"line":90,"column":3}},"35":{"start":{"line":89,"column":4},"end":{"line":89,"column":117}},"36":{"start":{"line":93,"column":2},"end":{"line":105,"column":3}},"37":{"start":{"line":94,"column":34},"end":{"line":99,"column":6}},"38":{"start":{"line":101,"column":4},"end":{"line":104,"column":5}},"39":{"start":{"line":102,"column":6},"end":{"line":102,"column":17}},"40":{"start":{"line":103,"column":6},"end":{"line":103,"column":107}},"41":{"start":{"line":108,"column":21},"end":{"line":108,"column":52}},"42":{"start":{"line":111,"column":55},"end":{"line":111,"column":63}},"43":{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},"44":{"start":{"line":112,"column":38},"end":{"line":112,"column":86}},"45":{"start":{"line":113,"column":4},"end":{"line":113,"column":29}},"46":{"start":{"line":114,"column":9},"end":{"line":116,"column":3}},"47":{"start":{"line":115,"column":4},"end":{"line":115,"column":26}},"48":{"start":{"line":118,"column":2},"end":{"line":123,"column":4}},"49":{"start":{"line":131,"column":21},"end":{"line":131,"column":53}},"50":{"start":{"line":134,"column":21},"end":{"line":134,"column":41}},"51":{"start":{"line":135,"column":19},"end":{"line":135,"column":57}},"52":{"start":{"line":138,"column":20},"end":{"line":138,"column":39}},"53":{"start":{"line":139,"column":20},"end":{"line":139,"column":48}},"54":{"start":{"line":142,"column":2},"end":{"line":142,"column":63}}},"fnMap":{"0":{"name":"scoreQueryComplexity","decl":{"start":{"line":21,"column":16},"end":{"line":21,"column":36}},"loc":{"start":{"line":23,"column":39},"end":{"line":124,"column":1}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":44},"end":{"line":45,"column":48}},"loc":{"start":{"line":45,"column":52},"end":{"line":45,"column":77}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":58,"column":50},"end":{"line":58,"column":54}},"loc":{"start":{"line":58,"column":58},"end":{"line":58,"column":83}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":72,"column":58},"end":{"line":72,"column":62}},"loc":{"start":{"line":72,"column":66},"end":{"line":72,"column":91}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":85,"column":52},"end":{"line":85,"column":56}},"loc":{"start":{"line":85,"column":60},"end":{"line":85,"column":85}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":112,"column":30},"end":{"line":112,"column":34}},"loc":{"start":{"line":112,"column":38},"end":{"line":112,"column":86}}},"6":{"name":"countRequestedParameters","decl":{"start":{"line":129,"column":9},"end":{"line":129,"column":33}},"loc":{"start":{"line":129,"column":47},"end":{"line":143,"column":1}}}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":2},"end":{"line":36,"column":3}},"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":36,"column":3}}]},"1":{"loc":{"start":{"line":46,"column":2},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":50,"column":3}}]},"2":{"loc":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":63,"column":3}}]},"3":{"loc":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":77,"column":3}}]},"4":{"loc":{"start":{"line":88,"column":2},"end":{"line":90,"column":3}},"type":"if","locations":[{"start":{"line":88,"column":2},"end":{"line":90,"column":3}}]},"5":{"loc":{"start":{"line":93,"column":2},"end":{"line":105,"column":3}},"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":105,"column":3}}]},"6":{"loc":{"start":{"line":101,"column":4},"end":{"line":104,"column":5}},"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":104,"column":5}}]},"7":{"loc":{"start":{"line":108,"column":21},"end":{"line":108,"column":52}},"type":"binary-expr","locations":[{"start":{"line":108,"column":21},"end":{"line":108,"column":30}},{"start":{"line":108,"column":34},"end":{"line":108,"column":52}}]},"8":{"loc":{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},"type":"if","locations":[{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},{"start":{"line":114,"column":9},"end":{"line":116,"column":3}}]},"9":{"loc":{"start":{"line":114,"column":9},"end":{"line":116,"column":3}},"type":"if","locations":[{"start":{"line":114,"column":9},"end":{"line":116,"column":3}}]},"10":{"loc":{"start":{"line":131,"column":22},"end":{"line":131,"column":45}},"type":"binary-expr","locations":[{"start":{"line":131,"column":22},"end":{"line":131,"column":39}},{"start":{"line":131,"column":43},"end":{"line":131,"column":45}}]},"11":{"loc":{"start":{"line":135,"column":20},"end":{"line":135,"column":49}},"type":"binary-expr","locations":[{"start":{"line":135,"column":20},"end":{"line":135,"column":43}},{"start":{"line":135,"column":47},"end":{"line":135,"column":49}}]},"12":{"loc":{"start":{"line":139,"column":20},"end":{"line":139,"column":48}},"type":"binary-expr","locations":[{"start":{"line":139,"column":20},"end":{"line":139,"column":42}},{"start":{"line":139,"column":46},"end":{"line":139,"column":48}}]}},"s":{"0":1,"1":1,"2":17,"3":17,"4":17,"5":17,"6":17,"7":2,"8":2,"9":17,"10":17,"11":255,"12":17,"13":4,"14":4,"15":4,"16":17,"17":17,"18":187,"19":17,"20":3,"21":3,"22":3,"23":17,"24":17,"25":204,"26":17,"27":3,"28":3,"29":3,"30":17,"31":17,"32":170,"33":17,"34":17,"35":3,"36":17,"37":4,"38":4,"39":4,"40":4,"41":17,"42":17,"43":17,"44":3,"45":3,"46":14,"47":1,"48":17,"49":17,"50":17,"51":17,"52":17,"53":17,"54":17},"f":{"0":17,"1":255,"2":187,"3":204,"4":170,"5":3,"6":17},"b":{"0":[2],"1":[4],"2":[3],"3":[3],"4":[3],"5":[4],"6":[4],"7":[17,16],"8":[3,14],"9":[1],"10":[17,15],"11":[17,12],"12":[17,15]}},"/Users/voldeck/code/newdemo/config/dynamic-layers.ts":{"path":"/Users/voldeck/code/newdemo/config/dynamic-layers.ts","statementMap":{"0":{"start":{"line":613,"column":0},"end":{"line":613,"column":7}},"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":null}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":null}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":null}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":null}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":null}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":null}},"7":{"start":{"line":14,"column":2},"end":{"line":14,"column":null}},"8":{"start":{"line":15,"column":2},"end":{"line":15,"column":null}},"9":{"start":{"line":16,"column":2},"end":{"line":16,"column":null}},"10":{"start":{"line":17,"column":2},"end":{"line":17,"column":null}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":null}},"12":{"start":{"line":19,"column":2},"end":{"line":19,"column":null}},"13":{"start":{"line":20,"column":2},"end":{"line":20,"column":null}},"14":{"start":{"line":21,"column":2},"end":{"line":21,"column":null}},"15":{"start":{"line":22,"column":2},"end":{"line":22,"column":null}},"16":{"start":{"line":23,"column":2},"end":{"line":23,"column":null}},"17":{"start":{"line":24,"column":2},"end":{"line":24,"column":null}},"18":{"start":{"line":25,"column":2},"end":{"line":25,"column":null}},"19":{"start":{"line":46,"column":13},"end":{"line":368,"column":2}},"20":{"start":{"line":445,"column":10},"end":{"line":445,"column":60}},"21":{"start":{"line":446,"column":10},"end":{"line":446,"column":61}},"22":{"start":{"line":449,"column":4},"end":{"line":449,"column":46}},"23":{"start":{"line":453,"column":4},"end":{"line":453,"column":34}},"24":{"start":{"line":457,"column":4},"end":{"line":457,"column":38}},"25":{"start":{"line":461,"column":4},"end":{"line":461,"column":37}},"26":{"start":{"line":465,"column":4},"end":{"line":465,"column":29}},"27":{"start":{"line":469,"column":4},"end":{"line":469,"column":50}},"28":{"start":{"line":473,"column":4},"end":{"line":477,"column":7}},"29":{"start":{"line":474,"column":6},"end":{"line":476,"column":9}},"30":{"start":{"line":475,"column":8},"end":{"line":475,"column":46}},"31":{"start":{"line":481,"column":34},"end":{"line":481,"column":36}},"32":{"start":{"line":484,"column":31},"end":{"line":509,"column":5}},"33":{"start":{"line":485,"column":25},"end":{"line":485,"column":57}},"34":{"start":{"line":486,"column":18},"end":{"line":486,"column":19}},"35":{"start":{"line":489,"column":26},"end":{"line":489,"column":106}},"36":{"start":{"line":490,"column":6},"end":{"line":494,"column":9}},"37":{"start":{"line":491,"column":8},"end":{"line":493,"column":9}},"38":{"start":{"line":492,"column":10},"end":{"line":492,"column":21}},"39":{"start":{"line":497,"column":6},"end":{"line":506,"column":7}},"40":{"start":{"line":498,"column":8},"end":{"line":505,"column":11}},"41":{"start":{"line":499,"column":28},"end":{"line":499,"column":106}},"42":{"start":{"line":500,"column":10},"end":{"line":504,"column":13}},"43":{"start":{"line":501,"column":12},"end":{"line":503,"column":13}},"44":{"start":{"line":502,"column":14},"end":{"line":502,"column":25}},"45":{"start":{"line":508,"column":6},"end":{"line":508,"column":19}},"46":{"start":{"line":512,"column":4},"end":{"line":523,"column":7}},"47":{"start":{"line":513,"column":24},"end":{"line":513,"column":57}},"48":{"start":{"line":514,"column":6},"end":{"line":522,"column":7}},"49":{"start":{"line":515,"column":8},"end":{"line":521,"column":11}},"50":{"start":{"line":526,"column":4},"end":{"line":526,"column":61}},"51":{"start":{"line":526,"column":34},"end":{"line":526,"column":59}},"52":{"start":{"line":530,"column":24},"end":{"line":530,"column":52}},"53":{"start":{"line":531,"column":4},"end":{"line":533,"column":5}},"54":{"start":{"line":532,"column":6},"end":{"line":532,"column":42}},"55":{"start":{"line":536,"column":23},"end":{"line":536,"column":42}},"56":{"start":{"line":539,"column":4},"end":{"line":543,"column":5}},"57":{"start":{"line":542,"column":6},"end":{"line":542,"column":43}},"58":{"start":{"line":546,"column":4},"end":{"line":552,"column":5}},"59":{"start":{"line":549,"column":6},"end":{"line":551,"column":7}},"60":{"start":{"line":550,"column":8},"end":{"line":550,"column":41}},"61":{"start":{"line":554,"column":4},"end":{"line":560,"column":5}},"62":{"start":{"line":557,"column":6},"end":{"line":559,"column":7}},"63":{"start":{"line":558,"column":8},"end":{"line":558,"column":41}},"64":{"start":{"line":563,"column":4},"end":{"line":567,"column":5}},"65":{"start":{"line":566,"column":6},"end":{"line":566,"column":43}},"66":{"start":{"line":570,"column":4},"end":{"line":574,"column":5}},"67":{"start":{"line":573,"column":6},"end":{"line":573,"column":51}},"68":{"start":{"line":577,"column":4},"end":{"line":583,"column":5}},"69":{"start":{"line":579,"column":8},"end":{"line":579,"column":41}},"70":{"start":{"line":582,"column":8},"end":{"line":582,"column":44}},"71":{"start":{"line":587,"column":4},"end":{"line":594,"column":5}},"72":{"start":{"line":589,"column":6},"end":{"line":589,"column":58}},"73":{"start":{"line":592,"column":6},"end":{"line":592,"column":77}},"74":{"start":{"line":593,"column":6},"end":{"line":593,"column":18}},"75":{"start":{"line":599,"column":4},"end":{"line":599,"column":30}},"76":{"start":{"line":602,"column":4},"end":{"line":604,"column":7}},"77":{"start":{"line":603,"column":6},"end":{"line":603,"column":43}},"78":{"start":{"line":606,"column":4},"end":{"line":606,"column":91}},"79":{"start":{"line":611,"column":13},"end":{"line":611,"column":49}},"80":{"start":{"line":615,"column":2},"end":{"line":617,"column":3}},"81":{"start":{"line":616,"column":4},"end":{"line":616,"column":65}},"82":{"start":{"line":620,"column":2},"end":{"line":622,"column":3}},"83":{"start":{"line":621,"column":4},"end":{"line":621,"column":59}},"84":{"start":{"line":625,"column":2},"end":{"line":628,"column":5}},"85":{"start":{"line":626,"column":21},"end":{"line":626,"column":98}},"86":{"start":{"line":627,"column":4},"end":{"line":627,"column":45}},"87":{"start":{"line":633,"column":4},"end":{"line":642,"column":5}},"88":{"start":{"line":635,"column":8},"end":{"line":635,"column":50}},"89":{"start":{"line":637,"column":8},"end":{"line":637,"column":43}},"90":{"start":{"line":639,"column":8},"end":{"line":639,"column":48}},"91":{"start":{"line":641,"column":8},"end":{"line":641,"column":64}},"92":{"start":{"line":631,"column":0},"end":{"line":631,"column":13}},"93":{"start":{"line":654,"column":4},"end":{"line":654,"column":24}},"94":{"start":{"line":655,"column":4},"end":{"line":655,"column":41}},"95":{"start":{"line":656,"column":4},"end":{"line":656,"column":48}},"96":{"start":{"line":657,"column":4},"end":{"line":657,"column":25}},"97":{"start":{"line":658,"column":4},"end":{"line":661,"column":6}},"98":{"start":{"line":666,"column":4},"end":{"line":666,"column":60}},"99":{"start":{"line":667,"column":4},"end":{"line":673,"column":6}},"100":{"start":{"line":678,"column":4},"end":{"line":678,"column":36}},"101":{"start":{"line":683,"column":4},"end":{"line":683,"column":81}},"102":{"start":{"line":684,"column":4},"end":{"line":684,"column":28}},"103":{"start":{"line":689,"column":4},"end":{"line":689,"column":87}},"104":{"start":{"line":690,"column":4},"end":{"line":693,"column":6}},"105":{"start":{"line":705,"column":4},"end":{"line":705,"column":24}},"106":{"start":{"line":706,"column":4},"end":{"line":706,"column":41}},"107":{"start":{"line":707,"column":4},"end":{"line":707,"column":48}},"108":{"start":{"line":708,"column":4},"end":{"line":708,"column":25}},"109":{"start":{"line":709,"column":4},"end":{"line":712,"column":6}},"110":{"start":{"line":717,"column":4},"end":{"line":717,"column":52}},"111":{"start":{"line":718,"column":4},"end":{"line":724,"column":6}},"112":{"start":{"line":729,"column":4},"end":{"line":729,"column":14}},"113":{"start":{"line":734,"column":4},"end":{"line":734,"column":73}},"114":{"start":{"line":735,"column":4},"end":{"line":735,"column":28}},"115":{"start":{"line":740,"column":4},"end":{"line":740,"column":79}},"116":{"start":{"line":741,"column":4},"end":{"line":744,"column":6}},"117":{"start":{"line":757,"column":4},"end":{"line":757,"column":24}},"118":{"start":{"line":758,"column":4},"end":{"line":758,"column":41}},"119":{"start":{"line":759,"column":4},"end":{"line":759,"column":48}},"120":{"start":{"line":760,"column":4},"end":{"line":760,"column":25}},"121":{"start":{"line":761,"column":4},"end":{"line":761,"column":52}},"122":{"start":{"line":762,"column":4},"end":{"line":765,"column":6}},"123":{"start":{"line":770,"column":4},"end":{"line":770,"column":52}},"124":{"start":{"line":771,"column":4},"end":{"line":777,"column":6}},"125":{"start":{"line":782,"column":4},"end":{"line":786,"column":8}},"126":{"start":{"line":782,"column":41},"end":{"line":786,"column":6}},"127":{"start":{"line":791,"column":4},"end":{"line":791,"column":73}},"128":{"start":{"line":792,"column":4},"end":{"line":792,"column":28}},"129":{"start":{"line":797,"column":4},"end":{"line":797,"column":79}},"130":{"start":{"line":798,"column":4},"end":{"line":801,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":0},"end":{"line":8,"column":12}},"loc":{"start":{"line":8,"column":29},"end":{"line":26,"column":1}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":444,"column":0},"end":{"line":444,"column":6}},"loc":{"start":{"line":444,"column":0},"end":{"line":608,"column":1}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":448,"column":2},"end":{"line":448,"column":18}},"loc":{"start":{"line":448,"column":42},"end":{"line":450,"column":3}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":452,"column":2},"end":{"line":452,"column":13}},"loc":{"start":{"line":452,"column":24},"end":{"line":454,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":456,"column":2},"end":{"line":456,"column":21}},"loc":{"start":{"line":456,"column":53},"end":{"line":458,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":460,"column":2},"end":{"line":460,"column":16}},"loc":{"start":{"line":460,"column":27},"end":{"line":462,"column":3}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":464,"column":2},"end":{"line":464,"column":20}},"loc":{"start":{"line":464,"column":20},"end":{"line":466,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":468,"column":2},"end":{"line":468,"column":22}},"loc":{"start":{"line":468,"column":22},"end":{"line":470,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":472,"column":2},"end":{"line":472,"column":12}},"loc":{"start":{"line":472,"column":43},"end":{"line":478,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":473,"column":46},"end":{"line":473,"column":52}},"loc":{"start":{"line":473,"column":55},"end":{"line":477,"column":5}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":474,"column":44},"end":{"line":474,"column":45}},"loc":{"start":{"line":474,"column":61},"end":{"line":476,"column":7}}},"11":{"name":"(anonymous_11)","decl":{"start":{"line":480,"column":2},"end":{"line":480,"column":7}},"loc":{"start":{"line":480,"column":39},"end":{"line":527,"column":3}}},"12":{"name":"(anonymous_12)","decl":{"start":{"line":484,"column":31},"end":{"line":484,"column":32}},"loc":{"start":{"line":484,"column":78},"end":{"line":509,"column":5}}},"13":{"name":"(anonymous_13)","decl":{"start":{"line":490,"column":25},"end":{"line":490,"column":29}},"loc":{"start":{"line":490,"column":32},"end":{"line":494,"column":7}}},"14":{"name":"(anonymous_14)","decl":{"start":{"line":498,"column":30},"end":{"line":498,"column":35}},"loc":{"start":{"line":498,"column":38},"end":{"line":505,"column":9}}},"15":{"name":"(anonymous_15)","decl":{"start":{"line":500,"column":29},"end":{"line":500,"column":33}},"loc":{"start":{"line":500,"column":36},"end":{"line":504,"column":11}}},"16":{"name":"(anonymous_16)","decl":{"start":{"line":512,"column":40},"end":{"line":512,"column":46}},"loc":{"start":{"line":512,"column":49},"end":{"line":523,"column":5}}},"17":{"name":"(anonymous_17)","decl":{"start":{"line":526,"column":24},"end":{"line":526,"column":25}},"loc":{"start":{"line":526,"column":34},"end":{"line":526,"column":59}}},"18":{"name":"(anonymous_18)","decl":{"start":{"line":529,"column":2},"end":{"line":529,"column":26}},"loc":{"start":{"line":529,"column":57},"end":{"line":584,"column":3}}},"19":{"name":"(anonymous_19)","decl":{"start":{"line":586,"column":2},"end":{"line":586,"column":7}},"loc":{"start":{"line":586,"column":43},"end":{"line":595,"column":3}}},"20":{"name":"(anonymous_20)","decl":{"start":{"line":597,"column":2},"end":{"line":597,"column":31}},"loc":{"start":{"line":597,"column":73},"end":{"line":607,"column":3}}},"21":{"name":"(anonymous_21)","decl":{"start":{"line":602,"column":41},"end":{"line":602,"column":42}},"loc":{"start":{"line":602,"column":58},"end":{"line":604,"column":5}}},"22":{"name":"initializeLayerRegistry","decl":{"start":{"line":613,"column":22},"end":{"line":613,"column":45}},"loc":{"start":{"line":613,"column":114},"end":{"line":629,"column":1}}},"23":{"name":"(anonymous_23)","decl":{"start":{"line":625,"column":47},"end":{"line":625,"column":53}},"loc":{"start":{"line":625,"column":56},"end":{"line":628,"column":3}}},"24":{"name":"(anonymous_24)","decl":{"start":{"line":632,"column":2},"end":{"line":632,"column":8}},"loc":{"start":{"line":632,"column":49},"end":{"line":643,"column":3}}},"25":{"name":"(anonymous_25)","decl":{"start":{"line":653,"column":2},"end":{"line":653,"column":14}},"loc":{"start":{"line":653,"column":25},"end":{"line":662,"column":3}}},"26":{"name":"(anonymous_26)","decl":{"start":{"line":664,"column":2},"end":{"line":664,"column":7}},"loc":{"start":{"line":664,"column":42},"end":{"line":674,"column":3}}},"27":{"name":"(anonymous_27)","decl":{"start":{"line":676,"column":2},"end":{"line":676,"column":7}},"loc":{"start":{"line":676,"column":17},"end":{"line":679,"column":3}}},"28":{"name":"(anonymous_28)","decl":{"start":{"line":681,"column":2},"end":{"line":681,"column":7}},"loc":{"start":{"line":681,"column":58},"end":{"line":685,"column":3}}},"29":{"name":"(anonymous_29)","decl":{"start":{"line":687,"column":2},"end":{"line":687,"column":7}},"loc":{"start":{"line":687,"column":82},"end":{"line":694,"column":3}}},"30":{"name":"(anonymous_30)","decl":{"start":{"line":704,"column":2},"end":{"line":704,"column":14}},"loc":{"start":{"line":704,"column":25},"end":{"line":713,"column":3}}},"31":{"name":"(anonymous_31)","decl":{"start":{"line":715,"column":2},"end":{"line":715,"column":7}},"loc":{"start":{"line":715,"column":42},"end":{"line":725,"column":3}}},"32":{"name":"(anonymous_32)","decl":{"start":{"line":727,"column":2},"end":{"line":727,"column":7}},"loc":{"start":{"line":727,"column":17},"end":{"line":730,"column":3}}},"33":{"name":"(anonymous_33)","decl":{"start":{"line":732,"column":2},"end":{"line":732,"column":7}},"loc":{"start":{"line":732,"column":58},"end":{"line":736,"column":3}}},"34":{"name":"(anonymous_34)","decl":{"start":{"line":738,"column":2},"end":{"line":738,"column":7}},"loc":{"start":{"line":738,"column":82},"end":{"line":745,"column":3}}},"35":{"name":"(anonymous_35)","decl":{"start":{"line":756,"column":2},"end":{"line":756,"column":14}},"loc":{"start":{"line":756,"column":25},"end":{"line":766,"column":3}}},"36":{"name":"(anonymous_36)","decl":{"start":{"line":768,"column":2},"end":{"line":768,"column":7}},"loc":{"start":{"line":768,"column":42},"end":{"line":778,"column":3}}},"37":{"name":"(anonymous_37)","decl":{"start":{"line":780,"column":2},"end":{"line":780,"column":7}},"loc":{"start":{"line":780,"column":17},"end":{"line":787,"column":3}}},"38":{"name":"(anonymous_38)","decl":{"start":{"line":782,"column":34},"end":{"line":782,"column":36}},"loc":{"start":{"line":782,"column":41},"end":{"line":786,"column":6}}},"39":{"name":"(anonymous_39)","decl":{"start":{"line":789,"column":2},"end":{"line":789,"column":7}},"loc":{"start":{"line":789,"column":58},"end":{"line":793,"column":3}}},"40":{"name":"(anonymous_40)","decl":{"start":{"line":795,"column":2},"end":{"line":795,"column":7}},"loc":{"start":{"line":795,"column":82},"end":{"line":802,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":12},"end":{"line":8,"column":null}},"type":"binary-expr","locations":[{"start":{"line":8,"column":12},"end":{"line":8,"column":29}},{"start":{"line":8,"column":29},"end":{"line":8,"column":null}}]},"1":{"loc":{"start":{"line":489,"column":29},"end":{"line":489,"column":61}},"type":"binary-expr","locations":[{"start":{"line":489,"column":29},"end":{"line":489,"column":55}},{"start":{"line":489,"column":59},"end":{"line":489,"column":61}}]},"2":{"loc":{"start":{"line":489,"column":65},"end":{"line":489,"column":104}},"type":"binary-expr","locations":[{"start":{"line":489,"column":65},"end":{"line":489,"column":98}},{"start":{"line":489,"column":102},"end":{"line":489,"column":104}}]},"3":{"loc":{"start":{"line":491,"column":8},"end":{"line":493,"column":9}},"type":"if","locations":[{"start":{"line":491,"column":8},"end":{"line":493,"column":9}}]},"4":{"loc":{"start":{"line":497,"column":6},"end":{"line":506,"column":7}},"type":"if","locations":[{"start":{"line":497,"column":6},"end":{"line":506,"column":7}}]},"5":{"loc":{"start":{"line":499,"column":31},"end":{"line":499,"column":62}},"type":"binary-expr","locations":[{"start":{"line":499,"column":31},"end":{"line":499,"column":56}},{"start":{"line":499,"column":60},"end":{"line":499,"column":62}}]},"6":{"loc":{"start":{"line":499,"column":66},"end":{"line":499,"column":104}},"type":"binary-expr","locations":[{"start":{"line":499,"column":66},"end":{"line":499,"column":98}},{"start":{"line":499,"column":102},"end":{"line":499,"column":104}}]},"7":{"loc":{"start":{"line":501,"column":12},"end":{"line":503,"column":13}},"type":"if","locations":[{"start":{"line":501,"column":12},"end":{"line":503,"column":13}}]},"8":{"loc":{"start":{"line":514,"column":6},"end":{"line":522,"column":7}},"type":"if","locations":[{"start":{"line":514,"column":6},"end":{"line":522,"column":7}}]},"9":{"loc":{"start":{"line":531,"column":4},"end":{"line":533,"column":5}},"type":"if","locations":[{"start":{"line":531,"column":4},"end":{"line":533,"column":5}}]},"10":{"loc":{"start":{"line":539,"column":4},"end":{"line":543,"column":5}},"type":"if","locations":[{"start":{"line":539,"column":4},"end":{"line":543,"column":5}}]},"11":{"loc":{"start":{"line":539,"column":8},"end":{"line":541,"column":38}},"type":"binary-expr","locations":[{"start":{"line":539,"column":8},"end":{"line":539,"column":42}},{"start":{"line":540,"column":8},"end":{"line":540,"column":43}},{"start":{"line":541,"column":8},"end":{"line":541,"column":38}}]},"12":{"loc":{"start":{"line":546,"column":4},"end":{"line":552,"column":5}},"type":"if","locations":[{"start":{"line":546,"column":4},"end":{"line":552,"column":5}}]},"13":{"loc":{"start":{"line":546,"column":8},"end":{"line":548,"column":44}},"type":"binary-expr","locations":[{"start":{"line":546,"column":8},"end":{"line":546,"column":38}},{"start":{"line":547,"column":8},"end":{"line":547,"column":36}},{"start":{"line":548,"column":8},"end":{"line":548,"column":44}}]},"14":{"loc":{"start":{"line":549,"column":6},"end":{"line":551,"column":7}},"type":"if","locations":[{"start":{"line":549,"column":6},"end":{"line":551,"column":7}}]},"15":{"loc":{"start":{"line":554,"column":4},"end":{"line":560,"column":5}},"type":"if","locations":[{"start":{"line":554,"column":4},"end":{"line":560,"column":5}}]},"16":{"loc":{"start":{"line":554,"column":8},"end":{"line":556,"column":39}},"type":"binary-expr","locations":[{"start":{"line":554,"column":8},"end":{"line":554,"column":38}},{"start":{"line":555,"column":8},"end":{"line":555,"column":38}},{"start":{"line":556,"column":8},"end":{"line":556,"column":39}}]},"17":{"loc":{"start":{"line":557,"column":6},"end":{"line":559,"column":7}},"type":"if","locations":[{"start":{"line":557,"column":6},"end":{"line":559,"column":7}}]},"18":{"loc":{"start":{"line":563,"column":4},"end":{"line":567,"column":5}},"type":"if","locations":[{"start":{"line":563,"column":4},"end":{"line":567,"column":5}}]},"19":{"loc":{"start":{"line":563,"column":8},"end":{"line":565,"column":39}},"type":"binary-expr","locations":[{"start":{"line":563,"column":8},"end":{"line":563,"column":38}},{"start":{"line":564,"column":8},"end":{"line":564,"column":39}},{"start":{"line":565,"column":8},"end":{"line":565,"column":39}}]},"20":{"loc":{"start":{"line":570,"column":4},"end":{"line":574,"column":5}},"type":"if","locations":[{"start":{"line":570,"column":4},"end":{"line":574,"column":5}}]},"21":{"loc":{"start":{"line":570,"column":8},"end":{"line":572,"column":37}},"type":"binary-expr","locations":[{"start":{"line":570,"column":8},"end":{"line":570,"column":43}},{"start":{"line":571,"column":8},"end":{"line":571,"column":42}},{"start":{"line":572,"column":8},"end":{"line":572,"column":37}}]},"22":{"loc":{"start":{"line":577,"column":4},"end":{"line":583,"column":5}},"type":"switch","locations":[{"start":{"line":578,"column":6},"end":{"line":579,"column":41}},{"start":{"line":580,"column":6},"end":{"line":580,"column":21}},{"start":{"line":581,"column":6},"end":{"line":582,"column":44}}]},"23":{"loc":{"start":{"line":615,"column":2},"end":{"line":617,"column":3}},"type":"if","locations":[{"start":{"line":615,"column":2},"end":{"line":617,"column":3}}]},"24":{"loc":{"start":{"line":620,"column":2},"end":{"line":622,"column":3}},"type":"if","locations":[{"start":{"line":620,"column":2},"end":{"line":622,"column":3}}]},"25":{"loc":{"start":{"line":626,"column":57},"end":{"line":626,"column":89}},"type":"binary-expr","locations":[{"start":{"line":626,"column":57},"end":{"line":626,"column":68}},{"start":{"line":626,"column":72},"end":{"line":626,"column":89}}]},"26":{"loc":{"start":{"line":633,"column":4},"end":{"line":642,"column":5}},"type":"switch","locations":[{"start":{"line":634,"column":6},"end":{"line":635,"column":50}},{"start":{"line":636,"column":6},"end":{"line":637,"column":43}},{"start":{"line":638,"column":6},"end":{"line":639,"column":48}},{"start":{"line":640,"column":6},"end":{"line":641,"column":64}}]},"27":{"loc":{"start":{"line":655,"column":16},"end":{"line":655,"column":40}},"type":"binary-expr","locations":[{"start":{"line":655,"column":16},"end":{"line":655,"column":27}},{"start":{"line":655,"column":31},"end":{"line":655,"column":40}}]},"28":{"loc":{"start":{"line":656,"column":23},"end":{"line":656,"column":47}},"type":"binary-expr","locations":[{"start":{"line":656,"column":23},"end":{"line":656,"column":41}},{"start":{"line":656,"column":45},"end":{"line":656,"column":47}}]},"29":{"loc":{"start":{"line":678,"column":11},"end":{"line":678,"column":35}},"type":"binary-expr","locations":[{"start":{"line":678,"column":11},"end":{"line":678,"column":29}},{"start":{"line":678,"column":33},"end":{"line":678,"column":35}}]},"30":{"loc":{"start":{"line":706,"column":16},"end":{"line":706,"column":40}},"type":"binary-expr","locations":[{"start":{"line":706,"column":16},"end":{"line":706,"column":27}},{"start":{"line":706,"column":31},"end":{"line":706,"column":40}}]},"31":{"loc":{"start":{"line":707,"column":23},"end":{"line":707,"column":47}},"type":"binary-expr","locations":[{"start":{"line":707,"column":23},"end":{"line":707,"column":41}},{"start":{"line":707,"column":45},"end":{"line":707,"column":47}}]},"32":{"loc":{"start":{"line":758,"column":16},"end":{"line":758,"column":40}},"type":"binary-expr","locations":[{"start":{"line":758,"column":16},"end":{"line":758,"column":27}},{"start":{"line":758,"column":31},"end":{"line":758,"column":40}}]},"33":{"loc":{"start":{"line":759,"column":23},"end":{"line":759,"column":47}},"type":"binary-expr","locations":[{"start":{"line":759,"column":23},"end":{"line":759,"column":41}},{"start":{"line":759,"column":45},"end":{"line":759,"column":47}}]},"34":{"loc":{"start":{"line":761,"column":25},"end":{"line":761,"column":51}},"type":"binary-expr","locations":[{"start":{"line":761,"column":25},"end":{"line":761,"column":45}},{"start":{"line":761,"column":49},"end":{"line":761,"column":51}}]}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":9,"18":9,"19":9,"20":9,"21":9,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":9,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":9,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0},"f":{"0":9,"1":9,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"0":[9,9],"1":[0,0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0],"8":[0],"9":[0],"10":[0],"11":[0,0,0],"12":[0],"13":[0,0,0],"14":[0],"15":[0],"16":[0,0,0],"17":[0],"18":[0],"19":[0,0,0],"20":[0],"21":[0,0,0],"22":[0,0,0],"23":[0],"24":[0],"25":[0,0],"26":[0,0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0]}},"/Users/voldeck/code/newdemo/lib/query-classifier.ts":{"path":"/Users/voldeck/code/newdemo/lib/query-classifier.ts","statementMap":{"0":{"start":{"line":972,"column":0},"end":{"line":972,"column":7}},"1":{"start":{"line":1038,"column":0},"end":{"line":1038,"column":16}},"2":{"start":{"line":1,"column":0},"end":{"line":1,"column":87}},"3":{"start":{"line":2,"column":0},"end":{"line":2,"column":92}},"4":{"start":{"line":50,"column":10},"end":{"line":50,"column":72}},"5":{"start":{"line":51,"column":10},"end":{"line":51,"column":78}},"6":{"start":{"line":52,"column":10},"end":{"line":52,"column":56}},"7":{"start":{"line":53,"column":10},"end":{"line":53,"column":33}},"8":{"start":{"line":77,"column":4},"end":{"line":77,"column":23}},"9":{"start":{"line":78,"column":4},"end":{"line":78,"column":37}},"10":{"start":{"line":79,"column":4},"end":{"line":79,"column":37}},"11":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"12":{"start":{"line":81,"column":6},"end":{"line":81,"column":58}},"13":{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},"14":{"start":{"line":92,"column":6},"end":{"line":92,"column":56}},"15":{"start":{"line":93,"column":6},"end":{"line":93,"column":24}},"16":{"start":{"line":94,"column":6},"end":{"line":94,"column":47}},"17":{"start":{"line":96,"column":6},"end":{"line":96,"column":25}},"18":{"start":{"line":97,"column":6},"end":{"line":97,"column":31}},"19":{"start":{"line":105,"column":4},"end":{"line":224,"column":7}},"20":{"start":{"line":228,"column":4},"end":{"line":370,"column":7}},"21":{"start":{"line":378,"column":21},"end":{"line":378,"column":57}},"22":{"start":{"line":379,"column":21},"end":{"line":379,"column":38}},"23":{"start":{"line":381,"column":4},"end":{"line":390,"column":5}},"24":{"start":{"line":382,"column":25},"end":{"line":382,"column":43}},"25":{"start":{"line":384,"column":22},"end":{"line":384,"column":56}},"26":{"start":{"line":385,"column":6},"end":{"line":389,"column":9}},"27":{"start":{"line":386,"column":8},"end":{"line":388,"column":9}},"28":{"start":{"line":387,"column":10},"end":{"line":387,"column":43}},"29":{"start":{"line":392,"column":4},"end":{"line":392,"column":32}},"30":{"start":{"line":401,"column":4},"end":{"line":403,"column":5}},"31":{"start":{"line":402,"column":6},"end":{"line":402,"column":59}},"32":{"start":{"line":406,"column":4},"end":{"line":418,"column":5}},"33":{"start":{"line":407,"column":6},"end":{"line":417,"column":7}},"34":{"start":{"line":408,"column":29},"end":{"line":408,"column":96}},"35":{"start":{"line":411,"column":8},"end":{"line":414,"column":9}},"36":{"start":{"line":412,"column":10},"end":{"line":412,"column":70}},"37":{"start":{"line":413,"column":10},"end":{"line":413,"column":36}},"38":{"start":{"line":416,"column":8},"end":{"line":416,"column":99}},"39":{"start":{"line":421,"column":4},"end":{"line":421,"column":53}},"40":{"start":{"line":430,"column":23},"end":{"line":430,"column":84}},"41":{"start":{"line":431,"column":4},"end":{"line":433,"column":5}},"42":{"start":{"line":432,"column":6},"end":{"line":432,"column":24}},"43":{"start":{"line":436,"column":18},"end":{"line":436,"column":52}},"44":{"start":{"line":437,"column":19},"end":{"line":437,"column":46}},"45":{"start":{"line":438,"column":24},"end":{"line":438,"column":56}},"46":{"start":{"line":439,"column":22},"end":{"line":439,"column":52}},"47":{"start":{"line":442,"column":25},"end":{"line":442,"column":87}},"48":{"start":{"line":445,"column":25},"end":{"line":445,"column":56}},"49":{"start":{"line":446,"column":4},"end":{"line":448,"column":5}},"50":{"start":{"line":447,"column":6},"end":{"line":447,"column":26}},"51":{"start":{"line":451,"column":25},"end":{"line":451,"column":57}},"52":{"start":{"line":452,"column":4},"end":{"line":454,"column":5}},"53":{"start":{"line":453,"column":6},"end":{"line":453,"column":26}},"54":{"start":{"line":457,"column":4},"end":{"line":472,"column":5}},"55":{"start":{"line":458,"column":6},"end":{"line":471,"column":7}},"56":{"start":{"line":460,"column":8},"end":{"line":462,"column":9}},"57":{"start":{"line":461,"column":10},"end":{"line":461,"column":47}},"58":{"start":{"line":464,"column":8},"end":{"line":466,"column":9}},"59":{"start":{"line":465,"column":10},"end":{"line":465,"column":46}},"60":{"start":{"line":467,"column":8},"end":{"line":467,"column":44}},"61":{"start":{"line":468,"column":13},"end":{"line":471,"column":7}},"62":{"start":{"line":470,"column":8},"end":{"line":470,"column":44}},"63":{"start":{"line":475,"column":4},"end":{"line":475,"column":40}},"64":{"start":{"line":482,"column":4},"end":{"line":482,"column":80}},"65":{"start":{"line":489,"column":55},"end":{"line":532,"column":6}},"66":{"start":{"line":535,"column":27},"end":{"line":535,"column":60}},"67":{"start":{"line":538,"column":4},"end":{"line":540,"column":5}},"68":{"start":{"line":539,"column":6},"end":{"line":539,"column":37}},"69":{"start":{"line":543,"column":4},"end":{"line":547,"column":5}},"70":{"start":{"line":544,"column":6},"end":{"line":546,"column":7}},"71":{"start":{"line":545,"column":8},"end":{"line":545,"column":21}},"72":{"start":{"line":549,"column":4},"end":{"line":549,"column":16}},"73":{"start":{"line":562,"column":25},"end":{"line":562,"column":90}},"74":{"start":{"line":563,"column":30},"end":{"line":563,"column":84}},"75":{"start":{"line":564,"column":28},"end":{"line":564,"column":91}},"76":{"start":{"line":565,"column":31},"end":{"line":565,"column":78}},"77":{"start":{"line":567,"column":4},"end":{"line":572,"column":6}},"78":{"start":{"line":568,"column":53},"end":{"line":568,"column":86}},"79":{"start":{"line":569,"column":59},"end":{"line":569,"column":92}},"80":{"start":{"line":570,"column":55},"end":{"line":570,"column":88}},"81":{"start":{"line":571,"column":57},"end":{"line":571,"column":90}},"82":{"start":{"line":579,"column":27},"end":{"line":579,"column":57}},"83":{"start":{"line":582,"column":26},"end":{"line":599,"column":6}},"84":{"start":{"line":601,"column":71},"end":{"line":601,"column":75}},"85":{"start":{"line":603,"column":4},"end":{"line":662,"column":5}},"86":{"start":{"line":604,"column":23},"end":{"line":604,"column":53}},"87":{"start":{"line":605,"column":6},"end":{"line":605,"column":30}},"88":{"start":{"line":605,"column":21},"end":{"line":605,"column":30}},"89":{"start":{"line":607,"column":23},"end":{"line":607,"column":24}},"90":{"start":{"line":608,"column":23},"end":{"line":608,"column":28}},"91":{"start":{"line":609,"column":24},"end":{"line":609,"column":29}},"92":{"start":{"line":611,"column":6},"end":{"line":626,"column":7}},"93":{"start":{"line":612,"column":8},"end":{"line":625,"column":9}},"94":{"start":{"line":613,"column":10},"end":{"line":613,"column":23}},"95":{"start":{"line":616,"column":10},"end":{"line":618,"column":11}},"96":{"start":{"line":617,"column":12},"end":{"line":617,"column":30}},"97":{"start":{"line":621,"column":27},"end":{"line":621,"column":56}},"98":{"start":{"line":622,"column":10},"end":{"line":624,"column":11}},"99":{"start":{"line":622,"column":36},"end":{"line":622,"column":69}},"100":{"start":{"line":623,"column":12},"end":{"line":623,"column":31}},"101":{"start":{"line":628,"column":6},"end":{"line":661,"column":7}},"102":{"start":{"line":629,"column":20},"end":{"line":629,"column":23}},"103":{"start":{"line":632,"column":8},"end":{"line":632,"column":37}},"104":{"start":{"line":632,"column":24},"end":{"line":632,"column":37}},"105":{"start":{"line":633,"column":8},"end":{"line":633,"column":38}},"106":{"start":{"line":633,"column":25},"end":{"line":633,"column":38}},"107":{"start":{"line":634,"column":8},"end":{"line":634,"column":41}},"108":{"start":{"line":634,"column":28},"end":{"line":634,"column":41}},"109":{"start":{"line":637,"column":8},"end":{"line":639,"column":9}},"110":{"start":{"line":638,"column":10},"end":{"line":638,"column":23}},"111":{"start":{"line":640,"column":8},"end":{"line":642,"column":9}},"112":{"start":{"line":641,"column":10},"end":{"line":641,"column":23}},"113":{"start":{"line":643,"column":8},"end":{"line":645,"column":9}},"114":{"start":{"line":644,"column":10},"end":{"line":644,"column":23}},"115":{"start":{"line":646,"column":8},"end":{"line":648,"column":9}},"116":{"start":{"line":647,"column":10},"end":{"line":647,"column":23}},"117":{"start":{"line":651,"column":8},"end":{"line":653,"column":9}},"118":{"start":{"line":652,"column":10},"end":{"line":652,"column":23}},"119":{"start":{"line":654,"column":8},"end":{"line":656,"column":9}},"120":{"start":{"line":655,"column":10},"end":{"line":655,"column":23}},"121":{"start":{"line":658,"column":8},"end":{"line":660,"column":9}},"122":{"start":{"line":659,"column":10},"end":{"line":659,"column":38}},"123":{"start":{"line":664,"column":4},"end":{"line":664,"column":71}},"124":{"start":{"line":668,"column":4},"end":{"line":683,"column":5}},"125":{"start":{"line":670,"column":8},"end":{"line":670,"column":70}},"126":{"start":{"line":672,"column":8},"end":{"line":672,"column":66}},"127":{"start":{"line":674,"column":8},"end":{"line":674,"column":73}},"128":{"start":{"line":676,"column":8},"end":{"line":676,"column":79}},"129":{"start":{"line":678,"column":8},"end":{"line":678,"column":68}},"130":{"start":{"line":680,"column":8},"end":{"line":680,"column":67}},"131":{"start":{"line":682,"column":8},"end":{"line":682,"column":18}},"132":{"start":{"line":691,"column":4},"end":{"line":691,"column":83}},"133":{"start":{"line":691,"column":46},"end":{"line":691,"column":83}},"134":{"start":{"line":692,"column":4},"end":{"line":692,"column":84}},"135":{"start":{"line":692,"column":47},"end":{"line":692,"column":84}},"136":{"start":{"line":693,"column":4},"end":{"line":693,"column":72}},"137":{"start":{"line":693,"column":36},"end":{"line":693,"column":72}},"138":{"start":{"line":694,"column":4},"end":{"line":694,"column":83}},"139":{"start":{"line":694,"column":47},"end":{"line":694,"column":83}},"140":{"start":{"line":695,"column":4},"end":{"line":695,"column":77}},"141":{"start":{"line":695,"column":41},"end":{"line":695,"column":77}},"142":{"start":{"line":698,"column":71},"end":{"line":698,"column":75}},"143":{"start":{"line":700,"column":4},"end":{"line":706,"column":5}},"144":{"start":{"line":701,"column":25},"end":{"line":701,"column":104}},"145":{"start":{"line":701,"column":60},"end":{"line":701,"column":96}},"146":{"start":{"line":703,"column":6},"end":{"line":705,"column":7}},"147":{"start":{"line":704,"column":8},"end":{"line":704,"column":48}},"148":{"start":{"line":708,"column":4},"end":{"line":708,"column":45}},"149":{"start":{"line":717,"column":30},"end":{"line":717,"column":79}},"150":{"start":{"line":720,"column":27},"end":{"line":720,"column":69}},"151":{"start":{"line":723,"column":4},"end":{"line":723,"column":57}},"152":{"start":{"line":726,"column":4},"end":{"line":728,"column":5}},"153":{"start":{"line":727,"column":6},"end":{"line":727,"column":66}},"154":{"start":{"line":731,"column":4},"end":{"line":731,"column":49}},"155":{"start":{"line":733,"column":4},"end":{"line":733,"column":26}},"156":{"start":{"line":737,"column":4},"end":{"line":737,"column":22}},"157":{"start":{"line":741,"column":17},"end":{"line":741,"column":43}},"158":{"start":{"line":744,"column":4},"end":{"line":753,"column":5}},"159":{"start":{"line":745,"column":23},"end":{"line":745,"column":66}},"160":{"start":{"line":746,"column":6},"end":{"line":752,"column":7}},"161":{"start":{"line":747,"column":8},"end":{"line":751,"column":10}},"162":{"start":{"line":756,"column":45},"end":{"line":756,"column":49}},"163":{"start":{"line":757,"column":20},"end":{"line":757,"column":21}},"164":{"start":{"line":758,"column":48},"end":{"line":758,"column":54}},"165":{"start":{"line":759,"column":4},"end":{"line":776,"column":5}},"166":{"start":{"line":760,"column":23},"end":{"line":760,"column":53}},"167":{"start":{"line":761,"column":6},"end":{"line":761,"column":30}},"168":{"start":{"line":761,"column":21},"end":{"line":761,"column":30}},"169":{"start":{"line":762,"column":23},"end":{"line":762,"column":24}},"170":{"start":{"line":763,"column":6},"end":{"line":767,"column":7}},"171":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"172":{"start":{"line":765,"column":10},"end":{"line":765,"column":23}},"173":{"start":{"line":768,"column":6},"end":{"line":775,"column":7}},"174":{"start":{"line":770,"column":22},"end":{"line":770,"column":48}},"175":{"start":{"line":771,"column":8},"end":{"line":774,"column":9}},"176":{"start":{"line":772,"column":10},"end":{"line":772,"column":26}},"177":{"start":{"line":773,"column":10},"end":{"line":773,"column":28}},"178":{"start":{"line":779,"column":4},"end":{"line":798,"column":5}},"179":{"start":{"line":780,"column":6},"end":{"line":797,"column":7}},"180":{"start":{"line":781,"column":25},"end":{"line":781,"column":55}},"181":{"start":{"line":782,"column":8},"end":{"line":782,"column":32}},"182":{"start":{"line":782,"column":23},"end":{"line":782,"column":32}},"183":{"start":{"line":783,"column":25},"end":{"line":783,"column":26}},"184":{"start":{"line":784,"column":8},"end":{"line":788,"column":9}},"185":{"start":{"line":785,"column":10},"end":{"line":787,"column":11}},"186":{"start":{"line":786,"column":12},"end":{"line":786,"column":25}},"187":{"start":{"line":789,"column":8},"end":{"line":796,"column":9}},"188":{"start":{"line":791,"column":24},"end":{"line":791,"column":50}},"189":{"start":{"line":792,"column":10},"end":{"line":795,"column":11}},"190":{"start":{"line":793,"column":12},"end":{"line":793,"column":28}},"191":{"start":{"line":794,"column":12},"end":{"line":794,"column":30}},"192":{"start":{"line":801,"column":4},"end":{"line":805,"column":5}},"193":{"start":{"line":802,"column":6},"end":{"line":802,"column":46}},"194":{"start":{"line":803,"column":6},"end":{"line":803,"column":22}},"195":{"start":{"line":804,"column":6},"end":{"line":804,"column":29}},"196":{"start":{"line":807,"column":4},"end":{"line":811,"column":6}},"197":{"start":{"line":815,"column":21},"end":{"line":815,"column":51}},"198":{"start":{"line":816,"column":4},"end":{"line":816,"column":28}},"199":{"start":{"line":816,"column":19},"end":{"line":816,"column":28}},"200":{"start":{"line":818,"column":16},"end":{"line":818,"column":17}},"201":{"start":{"line":819,"column":18},"end":{"line":819,"column":49}},"202":{"start":{"line":822,"column":4},"end":{"line":826,"column":5}},"203":{"start":{"line":823,"column":6},"end":{"line":825,"column":7}},"204":{"start":{"line":824,"column":8},"end":{"line":824,"column":21}},"205":{"start":{"line":829,"column":4},"end":{"line":833,"column":5}},"206":{"start":{"line":830,"column":6},"end":{"line":832,"column":7}},"207":{"start":{"line":831,"column":8},"end":{"line":831,"column":21}},"208":{"start":{"line":836,"column":4},"end":{"line":840,"column":5}},"209":{"start":{"line":837,"column":6},"end":{"line":839,"column":7}},"210":{"start":{"line":838,"column":8},"end":{"line":838,"column":21}},"211":{"start":{"line":843,"column":4},"end":{"line":847,"column":5}},"212":{"start":{"line":844,"column":6},"end":{"line":846,"column":7}},"213":{"start":{"line":845,"column":8},"end":{"line":845,"column":21}},"214":{"start":{"line":850,"column":21},"end":{"line":850,"column":51}},"215":{"start":{"line":851,"column":4},"end":{"line":858,"column":5}},"216":{"start":{"line":852,"column":6},"end":{"line":857,"column":7}},"217":{"start":{"line":853,"column":8},"end":{"line":856,"column":9}},"218":{"start":{"line":854,"column":10},"end":{"line":854,"column":23}},"219":{"start":{"line":855,"column":10},"end":{"line":855,"column":16}},"220":{"start":{"line":861,"column":4},"end":{"line":861,"column":43}},"221":{"start":{"line":865,"column":58},"end":{"line":961,"column":6}},"222":{"start":{"line":962,"column":4},"end":{"line":962,"column":32}},"223":{"start":{"line":49,"column":0},"end":{"line":49,"column":13}},"224":{"start":{"line":56,"column":26},"end":{"line":56,"column":63}},"225":{"start":{"line":967,"column":13},"end":{"line":967,"column":53}},"226":{"start":{"line":973,"column":41},"end":{"line":980,"column":4}},"227":{"start":{"line":982,"column":21},"end":{"line":982,"column":47}},"228":{"start":{"line":985,"column":2},"end":{"line":989,"column":3}},"229":{"start":{"line":988,"column":4},"end":{"line":988,"column":36}},"230":{"start":{"line":992,"column":2},"end":{"line":995,"column":3}},"231":{"start":{"line":994,"column":4},"end":{"line":994,"column":37}},"232":{"start":{"line":998,"column":2},"end":{"line":1002,"column":3}},"233":{"start":{"line":1001,"column":4},"end":{"line":1001,"column":37}},"234":{"start":{"line":1005,"column":2},"end":{"line":1009,"column":3}},"235":{"start":{"line":1008,"column":4},"end":{"line":1008,"column":39}},"236":{"start":{"line":1012,"column":2},"end":{"line":1017,"column":3}},"237":{"start":{"line":1016,"column":4},"end":{"line":1016,"column":42}},"238":{"start":{"line":1020,"column":2},"end":{"line":1023,"column":3}},"239":{"start":{"line":1022,"column":4},"end":{"line":1022,"column":37}},"240":{"start":{"line":1026,"column":2},"end":{"line":1029,"column":3}},"241":{"start":{"line":1028,"column":4},"end":{"line":1028,"column":40}},"242":{"start":{"line":1032,"column":2},"end":{"line":1032,"column":102}},"243":{"start":{"line":1040,"column":25},"end":{"line":1040,"column":67}},"244":{"start":{"line":1041,"column":45},"end":{"line":1041,"column":73}},"245":{"start":{"line":1044,"column":2},"end":{"line":1050,"column":3}},"246":{"start":{"line":1047,"column":4},"end":{"line":1047,"column":48}},"247":{"start":{"line":1048,"column":4},"end":{"line":1048,"column":57}},"248":{"start":{"line":1049,"column":4},"end":{"line":1049,"column":26}},"249":{"start":{"line":1053,"column":2},"end":{"line":1076,"column":3}},"250":{"start":{"line":1055,"column":18},"end":{"line":1055,"column":67}},"251":{"start":{"line":1058,"column":4},"end":{"line":1072,"column":5}},"252":{"start":{"line":1059,"column":6},"end":{"line":1059,"column":57}},"253":{"start":{"line":1060,"column":11},"end":{"line":1072,"column":5}},"254":{"start":{"line":1061,"column":6},"end":{"line":1061,"column":50}},"255":{"start":{"line":1062,"column":11},"end":{"line":1072,"column":5}},"256":{"start":{"line":1063,"column":6},"end":{"line":1063,"column":51}},"257":{"start":{"line":1064,"column":11},"end":{"line":1072,"column":5}},"258":{"start":{"line":1065,"column":6},"end":{"line":1065,"column":52}},"259":{"start":{"line":1066,"column":11},"end":{"line":1072,"column":5}},"260":{"start":{"line":1067,"column":6},"end":{"line":1067,"column":51}},"261":{"start":{"line":1068,"column":11},"end":{"line":1072,"column":5}},"262":{"start":{"line":1069,"column":6},"end":{"line":1069,"column":52}},"263":{"start":{"line":1070,"column":11},"end":{"line":1072,"column":5}},"264":{"start":{"line":1071,"column":6},"end":{"line":1071,"column":54}},"265":{"start":{"line":1074,"column":4},"end":{"line":1074,"column":57}},"266":{"start":{"line":1075,"column":4},"end":{"line":1075,"column":26}},"267":{"start":{"line":1079,"column":25},"end":{"line":1079,"column":71}},"268":{"start":{"line":1082,"column":2},"end":{"line":1120,"column":3}},"269":{"start":{"line":1083,"column":4},"end":{"line":1083,"column":60}},"270":{"start":{"line":1086,"column":7},"end":{"line":1120,"column":3}},"271":{"start":{"line":1087,"column":4},"end":{"line":1087,"column":54}},"272":{"start":{"line":1088,"column":9},"end":{"line":1120,"column":3}},"273":{"start":{"line":1089,"column":4},"end":{"line":1089,"column":49}},"274":{"start":{"line":1090,"column":9},"end":{"line":1120,"column":3}},"275":{"start":{"line":1091,"column":4},"end":{"line":1091,"column":53}},"276":{"start":{"line":1092,"column":9},"end":{"line":1120,"column":3}},"277":{"start":{"line":1093,"column":4},"end":{"line":1093,"column":50}},"278":{"start":{"line":1094,"column":9},"end":{"line":1120,"column":3}},"279":{"start":{"line":1095,"column":4},"end":{"line":1095,"column":50}},"280":{"start":{"line":1096,"column":9},"end":{"line":1120,"column":3}},"281":{"start":{"line":1097,"column":4},"end":{"line":1097,"column":53}},"282":{"start":{"line":1098,"column":9},"end":{"line":1120,"column":3}},"283":{"start":{"line":1099,"column":4},"end":{"line":1099,"column":54}},"284":{"start":{"line":1100,"column":9},"end":{"line":1120,"column":3}},"285":{"start":{"line":1101,"column":4},"end":{"line":1101,"column":50}},"286":{"start":{"line":1102,"column":9},"end":{"line":1120,"column":3}},"287":{"start":{"line":1103,"column":4},"end":{"line":1103,"column":62}},"288":{"start":{"line":1106,"column":7},"end":{"line":1120,"column":3}},"289":{"start":{"line":1107,"column":4},"end":{"line":1107,"column":48}},"290":{"start":{"line":1108,"column":9},"end":{"line":1120,"column":3}},"291":{"start":{"line":1109,"column":4},"end":{"line":1109,"column":49}},"292":{"start":{"line":1110,"column":9},"end":{"line":1120,"column":3}},"293":{"start":{"line":1111,"column":4},"end":{"line":1111,"column":52}},"294":{"start":{"line":1112,"column":9},"end":{"line":1120,"column":3}},"295":{"start":{"line":1113,"column":4},"end":{"line":1113,"column":49}},"296":{"start":{"line":1114,"column":9},"end":{"line":1120,"column":3}},"297":{"start":{"line":1115,"column":4},"end":{"line":1115,"column":50}},"298":{"start":{"line":1116,"column":9},"end":{"line":1120,"column":3}},"299":{"start":{"line":1117,"column":4},"end":{"line":1117,"column":50}},"300":{"start":{"line":1118,"column":9},"end":{"line":1120,"column":3}},"301":{"start":{"line":1119,"column":4},"end":{"line":1119,"column":55}},"302":{"start":{"line":1122,"column":2},"end":{"line":1122,"column":55}},"303":{"start":{"line":1125,"column":2},"end":{"line":1127,"column":3}},"304":{"start":{"line":1126,"column":4},"end":{"line":1126,"column":49}},"305":{"start":{"line":1129,"column":2},"end":{"line":1129,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":76,"column":2},"end":{"line":76,"column":14}},"loc":{"start":{"line":76,"column":71},"end":{"line":83,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":90,"column":2},"end":{"line":90,"column":7}},"loc":{"start":{"line":90,"column":75},"end":{"line":99,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":104,"column":10},"end":{"line":104,"column":35}},"loc":{"start":{"line":104,"column":35},"end":{"line":225,"column":3}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":227,"column":10},"end":{"line":227,"column":35}},"loc":{"start":{"line":227,"column":35},"end":{"line":371,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":376,"column":10},"end":{"line":376,"column":25}},"loc":{"start":{"line":376,"column":49},"end":{"line":393,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":385,"column":22},"end":{"line":385,"column":26}},"loc":{"start":{"line":385,"column":29},"end":{"line":389,"column":7}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":399,"column":2},"end":{"line":399,"column":7}},"loc":{"start":{"line":399,"column":61},"end":{"line":422,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":428,"column":10},"end":{"line":428,"column":30}},"loc":{"start":{"line":428,"column":61},"end":{"line":476,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":481,"column":10},"end":{"line":481,"column":34}},"loc":{"start":{"line":481,"column":47},"end":{"line":483,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":488,"column":10},"end":{"line":488,"column":40}},"loc":{"start":{"line":488,"column":61},"end":{"line":550,"column":3}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":556,"column":10},"end":{"line":556,"column":29}},"loc":{"start":{"line":556,"column":42},"end":{"line":573,"column":3}}},"11":{"name":"(anonymous_11)","decl":{"start":{"line":568,"column":45},"end":{"line":568,"column":49}},"loc":{"start":{"line":568,"column":53},"end":{"line":568,"column":86}}},"12":{"name":"(anonymous_12)","decl":{"start":{"line":569,"column":51},"end":{"line":569,"column":55}},"loc":{"start":{"line":569,"column":59},"end":{"line":569,"column":92}}},"13":{"name":"(anonymous_13)","decl":{"start":{"line":570,"column":47},"end":{"line":570,"column":51}},"loc":{"start":{"line":570,"column":55},"end":{"line":570,"column":88}}},"14":{"name":"(anonymous_14)","decl":{"start":{"line":571,"column":49},"end":{"line":571,"column":53}},"loc":{"start":{"line":571,"column":57},"end":{"line":571,"column":90}}},"15":{"name":"(anonymous_15)","decl":{"start":{"line":578,"column":10},"end":{"line":578,"column":22}},"loc":{"start":{"line":578,"column":35},"end":{"line":665,"column":3}}},"16":{"name":"(anonymous_16)","decl":{"start":{"line":622,"column":28},"end":{"line":622,"column":32}},"loc":{"start":{"line":622,"column":36},"end":{"line":622,"column":69}}},"17":{"name":"(anonymous_17)","decl":{"start":{"line":667,"column":10},"end":{"line":667,"column":28}},"loc":{"start":{"line":667,"column":52},"end":{"line":684,"column":3}}},"18":{"name":"(anonymous_18)","decl":{"start":{"line":689,"column":10},"end":{"line":689,"column":23}},"loc":{"start":{"line":689,"column":36},"end":{"line":709,"column":3}}},"19":{"name":"(anonymous_19)","decl":{"start":{"line":701,"column":49},"end":{"line":701,"column":56}},"loc":{"start":{"line":701,"column":60},"end":{"line":701,"column":96}}},"20":{"name":"(anonymous_20)","decl":{"start":{"line":715,"column":2},"end":{"line":715,"column":7}},"loc":{"start":{"line":715,"column":60},"end":{"line":734,"column":3}}},"21":{"name":"(anonymous_21)","decl":{"start":{"line":736,"column":2},"end":{"line":736,"column":13}},"loc":{"start":{"line":736,"column":13},"end":{"line":738,"column":3}}},"22":{"name":"(anonymous_22)","decl":{"start":{"line":740,"column":9},"end":{"line":740,"column":14}},"loc":{"start":{"line":740,"column":42},"end":{"line":812,"column":3}}},"23":{"name":"(anonymous_23)","decl":{"start":{"line":814,"column":10},"end":{"line":814,"column":31}},"loc":{"start":{"line":814,"column":69},"end":{"line":862,"column":3}}},"24":{"name":"(anonymous_24)","decl":{"start":{"line":864,"column":10},"end":{"line":864,"column":28}},"loc":{"start":{"line":864,"column":52},"end":{"line":963,"column":3}}},"25":{"name":"classifyQuery","decl":{"start":{"line":972,"column":22},"end":{"line":972,"column":35}},"loc":{"start":{"line":972,"column":49},"end":{"line":1033,"column":1}}},"26":{"name":"enhanceAnalysisWithVisualization","decl":{"start":{"line":1038,"column":16},"end":{"line":1038,"column":48}},"loc":{"start":{"line":1038,"column":79},"end":{"line":1130,"column":1}}}},"branchMap":{"0":{"loc":{"start":{"line":76,"column":14},"end":{"line":76,"column":36}},"type":"default-arg","locations":[{"start":{"line":76,"column":31},"end":{"line":76,"column":36}}]},"1":{"loc":{"start":{"line":76,"column":38},"end":{"line":76,"column":71}},"type":"default-arg","locations":[{"start":{"line":76,"column":69},"end":{"line":76,"column":71}}]},"2":{"loc":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":82,"column":5}}]},"3":{"loc":{"start":{"line":90,"column":21},"end":{"line":90,"column":42}},"type":"default-arg","locations":[{"start":{"line":90,"column":38},"end":{"line":90,"column":42}}]},"4":{"loc":{"start":{"line":90,"column":44},"end":{"line":90,"column":75}},"type":"default-arg","locations":[{"start":{"line":90,"column":73},"end":{"line":90,"column":75}}]},"5":{"loc":{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},{"start":{"line":95,"column":11},"end":{"line":98,"column":5}}]},"6":{"loc":{"start":{"line":378,"column":21},"end":{"line":378,"column":57}},"type":"binary-expr","locations":[{"start":{"line":378,"column":21},"end":{"line":378,"column":51}},{"start":{"line":378,"column":55},"end":{"line":378,"column":57}}]},"7":{"loc":{"start":{"line":384,"column":22},"end":{"line":384,"column":56}},"type":"binary-expr","locations":[{"start":{"line":384,"column":22},"end":{"line":384,"column":50}},{"start":{"line":384,"column":54},"end":{"line":384,"column":56}}]},"8":{"loc":{"start":{"line":386,"column":8},"end":{"line":388,"column":9}},"type":"if","locations":[{"start":{"line":386,"column":8},"end":{"line":388,"column":9}}]},"9":{"loc":{"start":{"line":386,"column":12},"end":{"line":386,"column":76}},"type":"binary-expr","locations":[{"start":{"line":386,"column":12},"end":{"line":386,"column":27}},{"start":{"line":386,"column":31},"end":{"line":386,"column":76}}]},"10":{"loc":{"start":{"line":401,"column":4},"end":{"line":403,"column":5}},"type":"if","locations":[{"start":{"line":401,"column":4},"end":{"line":403,"column":5}}]},"11":{"loc":{"start":{"line":406,"column":4},"end":{"line":418,"column":5}},"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":418,"column":5}}]},"12":{"loc":{"start":{"line":406,"column":8},"end":{"line":406,"column":71}},"type":"binary-expr","locations":[{"start":{"line":406,"column":8},"end":{"line":406,"column":18}},{"start":{"line":406,"column":22},"end":{"line":406,"column":39}},{"start":{"line":406,"column":43},"end":{"line":406,"column":71}}]},"13":{"loc":{"start":{"line":411,"column":8},"end":{"line":414,"column":9}},"type":"if","locations":[{"start":{"line":411,"column":8},"end":{"line":414,"column":9}}]},"14":{"loc":{"start":{"line":431,"column":4},"end":{"line":433,"column":5}},"type":"if","locations":[{"start":{"line":431,"column":4},"end":{"line":433,"column":5}}]},"15":{"loc":{"start":{"line":436,"column":18},"end":{"line":436,"column":52}},"type":"binary-expr","locations":[{"start":{"line":436,"column":18},"end":{"line":436,"column":46}},{"start":{"line":436,"column":50},"end":{"line":436,"column":52}}]},"16":{"loc":{"start":{"line":437,"column":19},"end":{"line":437,"column":46}},"type":"binary-expr","locations":[{"start":{"line":437,"column":19},"end":{"line":437,"column":40}},{"start":{"line":437,"column":44},"end":{"line":437,"column":46}}]},"17":{"loc":{"start":{"line":438,"column":24},"end":{"line":438,"column":56}},"type":"binary-expr","locations":[{"start":{"line":438,"column":24},"end":{"line":438,"column":50}},{"start":{"line":438,"column":54},"end":{"line":438,"column":56}}]},"18":{"loc":{"start":{"line":439,"column":22},"end":{"line":439,"column":52}},"type":"binary-expr","locations":[{"start":{"line":439,"column":22},"end":{"line":439,"column":46}},{"start":{"line":439,"column":50},"end":{"line":439,"column":52}}]},"19":{"loc":{"start":{"line":446,"column":4},"end":{"line":448,"column":5}},"type":"if","locations":[{"start":{"line":446,"column":4},"end":{"line":448,"column":5}}]},"20":{"loc":{"start":{"line":452,"column":4},"end":{"line":454,"column":5}},"type":"if","locations":[{"start":{"line":452,"column":4},"end":{"line":454,"column":5}}]},"21":{"loc":{"start":{"line":457,"column":4},"end":{"line":472,"column":5}},"type":"if","locations":[{"start":{"line":457,"column":4},"end":{"line":472,"column":5}}]},"22":{"loc":{"start":{"line":458,"column":6},"end":{"line":471,"column":7}},"type":"if","locations":[{"start":{"line":458,"column":6},"end":{"line":471,"column":7}},{"start":{"line":468,"column":13},"end":{"line":471,"column":7}}]},"23":{"loc":{"start":{"line":460,"column":8},"end":{"line":462,"column":9}},"type":"if","locations":[{"start":{"line":460,"column":8},"end":{"line":462,"column":9}}]},"24":{"loc":{"start":{"line":460,"column":12},"end":{"line":460,"column":81}},"type":"binary-expr","locations":[{"start":{"line":460,"column":12},"end":{"line":460,"column":43}},{"start":{"line":460,"column":47},"end":{"line":460,"column":81}}]},"25":{"loc":{"start":{"line":464,"column":8},"end":{"line":466,"column":9}},"type":"if","locations":[{"start":{"line":464,"column":8},"end":{"line":466,"column":9}}]},"26":{"loc":{"start":{"line":464,"column":12},"end":{"line":464,"column":74}},"type":"binary-expr","locations":[{"start":{"line":464,"column":12},"end":{"line":464,"column":41}},{"start":{"line":464,"column":45},"end":{"line":464,"column":74}}]},"27":{"loc":{"start":{"line":468,"column":13},"end":{"line":471,"column":7}},"type":"if","locations":[{"start":{"line":468,"column":13},"end":{"line":471,"column":7}}]},"28":{"loc":{"start":{"line":538,"column":4},"end":{"line":540,"column":5}},"type":"if","locations":[{"start":{"line":538,"column":4},"end":{"line":540,"column":5}}]},"29":{"loc":{"start":{"line":544,"column":6},"end":{"line":546,"column":7}},"type":"if","locations":[{"start":{"line":544,"column":6},"end":{"line":546,"column":7}}]},"30":{"loc":{"start":{"line":605,"column":6},"end":{"line":605,"column":30}},"type":"if","locations":[{"start":{"line":605,"column":6},"end":{"line":605,"column":30}}]},"31":{"loc":{"start":{"line":612,"column":8},"end":{"line":625,"column":9}},"type":"if","locations":[{"start":{"line":612,"column":8},"end":{"line":625,"column":9}}]},"32":{"loc":{"start":{"line":616,"column":10},"end":{"line":618,"column":11}},"type":"if","locations":[{"start":{"line":616,"column":10},"end":{"line":618,"column":11}}]},"33":{"loc":{"start":{"line":622,"column":10},"end":{"line":624,"column":11}},"type":"if","locations":[{"start":{"line":622,"column":10},"end":{"line":624,"column":11}}]},"34":{"loc":{"start":{"line":628,"column":6},"end":{"line":661,"column":7}},"type":"if","locations":[{"start":{"line":628,"column":6},"end":{"line":661,"column":7}}]},"35":{"loc":{"start":{"line":632,"column":8},"end":{"line":632,"column":37}},"type":"if","locations":[{"start":{"line":632,"column":8},"end":{"line":632,"column":37}}]},"36":{"loc":{"start":{"line":633,"column":8},"end":{"line":633,"column":38}},"type":"if","locations":[{"start":{"line":633,"column":8},"end":{"line":633,"column":38}}]},"37":{"loc":{"start":{"line":634,"column":8},"end":{"line":634,"column":41}},"type":"if","locations":[{"start":{"line":634,"column":8},"end":{"line":634,"column":41}}]},"38":{"loc":{"start":{"line":637,"column":8},"end":{"line":639,"column":9}},"type":"if","locations":[{"start":{"line":637,"column":8},"end":{"line":639,"column":9}}]},"39":{"loc":{"start":{"line":637,"column":12},"end":{"line":637,"column":84}},"type":"binary-expr","locations":[{"start":{"line":637,"column":12},"end":{"line":637,"column":46}},{"start":{"line":637,"column":50},"end":{"line":637,"column":84}}]},"40":{"loc":{"start":{"line":640,"column":8},"end":{"line":642,"column":9}},"type":"if","locations":[{"start":{"line":640,"column":8},"end":{"line":642,"column":9}}]},"41":{"loc":{"start":{"line":640,"column":12},"end":{"line":640,"column":85}},"type":"binary-expr","locations":[{"start":{"line":640,"column":12},"end":{"line":640,"column":46}},{"start":{"line":640,"column":50},"end":{"line":640,"column":85}}]},"42":{"loc":{"start":{"line":643,"column":8},"end":{"line":645,"column":9}},"type":"if","locations":[{"start":{"line":643,"column":8},"end":{"line":645,"column":9}}]},"43":{"loc":{"start":{"line":643,"column":12},"end":{"line":643,"column":83}},"type":"binary-expr","locations":[{"start":{"line":643,"column":12},"end":{"line":643,"column":46}},{"start":{"line":643,"column":50},"end":{"line":643,"column":83}}]},"44":{"loc":{"start":{"line":646,"column":8},"end":{"line":648,"column":9}},"type":"if","locations":[{"start":{"line":646,"column":8},"end":{"line":648,"column":9}}]},"45":{"loc":{"start":{"line":646,"column":12},"end":{"line":646,"column":87}},"type":"binary-expr","locations":[{"start":{"line":646,"column":12},"end":{"line":646,"column":51}},{"start":{"line":646,"column":55},"end":{"line":646,"column":87}}]},"46":{"loc":{"start":{"line":651,"column":8},"end":{"line":653,"column":9}},"type":"if","locations":[{"start":{"line":651,"column":8},"end":{"line":653,"column":9}}]},"47":{"loc":{"start":{"line":651,"column":12},"end":{"line":651,"column":88}},"type":"binary-expr","locations":[{"start":{"line":651,"column":12},"end":{"line":651,"column":50}},{"start":{"line":651,"column":54},"end":{"line":651,"column":88}}]},"48":{"loc":{"start":{"line":654,"column":8},"end":{"line":656,"column":9}},"type":"if","locations":[{"start":{"line":654,"column":8},"end":{"line":656,"column":9}}]},"49":{"loc":{"start":{"line":654,"column":12},"end":{"line":654,"column":86}},"type":"binary-expr","locations":[{"start":{"line":654,"column":12},"end":{"line":654,"column":49}},{"start":{"line":654,"column":53},"end":{"line":654,"column":86}}]},"50":{"loc":{"start":{"line":658,"column":8},"end":{"line":660,"column":9}},"type":"if","locations":[{"start":{"line":658,"column":8},"end":{"line":660,"column":9}}]},"51":{"loc":{"start":{"line":658,"column":12},"end":{"line":658,"column":49}},"type":"binary-expr","locations":[{"start":{"line":658,"column":12},"end":{"line":658,"column":22}},{"start":{"line":658,"column":26},"end":{"line":658,"column":49}}]},"52":{"loc":{"start":{"line":664,"column":11},"end":{"line":664,"column":70}},"type":"cond-expr","locations":[{"start":{"line":664,"column":49},"end":{"line":664,"column":63}},{"start":{"line":664,"column":66},"end":{"line":664,"column":70}}]},"53":{"loc":{"start":{"line":664,"column":11},"end":{"line":664,"column":46}},"type":"binary-expr","locations":[{"start":{"line":664,"column":11},"end":{"line":664,"column":20}},{"start":{"line":664,"column":24},"end":{"line":664,"column":46}}]},"54":{"loc":{"start":{"line":668,"column":4},"end":{"line":683,"column":5}},"type":"switch","locations":[{"start":{"line":669,"column":6},"end":{"line":670,"column":70}},{"start":{"line":671,"column":6},"end":{"line":672,"column":66}},{"start":{"line":673,"column":6},"end":{"line":674,"column":73}},{"start":{"line":675,"column":6},"end":{"line":676,"column":79}},{"start":{"line":677,"column":6},"end":{"line":678,"column":68}},{"start":{"line":679,"column":6},"end":{"line":680,"column":67}},{"start":{"line":681,"column":6},"end":{"line":682,"column":18}}]},"55":{"loc":{"start":{"line":691,"column":4},"end":{"line":691,"column":83}},"type":"if","locations":[{"start":{"line":691,"column":4},"end":{"line":691,"column":83}}]},"56":{"loc":{"start":{"line":692,"column":4},"end":{"line":692,"column":84}},"type":"if","locations":[{"start":{"line":692,"column":4},"end":{"line":692,"column":84}}]},"57":{"loc":{"start":{"line":693,"column":4},"end":{"line":693,"column":72}},"type":"if","locations":[{"start":{"line":693,"column":4},"end":{"line":693,"column":72}}]},"58":{"loc":{"start":{"line":694,"column":4},"end":{"line":694,"column":83}},"type":"if","locations":[{"start":{"line":694,"column":4},"end":{"line":694,"column":83}}]},"59":{"loc":{"start":{"line":695,"column":4},"end":{"line":695,"column":77}},"type":"if","locations":[{"start":{"line":695,"column":4},"end":{"line":695,"column":77}}]},"60":{"loc":{"start":{"line":703,"column":6},"end":{"line":705,"column":7}},"type":"if","locations":[{"start":{"line":703,"column":6},"end":{"line":705,"column":7}}]},"61":{"loc":{"start":{"line":703,"column":10},"end":{"line":703,"column":72}},"type":"binary-expr","locations":[{"start":{"line":703,"column":10},"end":{"line":703,"column":24}},{"start":{"line":703,"column":29},"end":{"line":703,"column":39}},{"start":{"line":703,"column":43},"end":{"line":703,"column":71}}]},"62":{"loc":{"start":{"line":708,"column":11},"end":{"line":708,"column":44}},"type":"cond-expr","locations":[{"start":{"line":708,"column":23},"end":{"line":708,"column":37}},{"start":{"line":708,"column":40},"end":{"line":708,"column":44}}]},"63":{"loc":{"start":{"line":726,"column":4},"end":{"line":728,"column":5}},"type":"if","locations":[{"start":{"line":726,"column":4},"end":{"line":728,"column":5}}]},"64":{"loc":{"start":{"line":744,"column":4},"end":{"line":753,"column":5}},"type":"if","locations":[{"start":{"line":744,"column":4},"end":{"line":753,"column":5}}]},"65":{"loc":{"start":{"line":744,"column":8},"end":{"line":744,"column":39}},"type":"binary-expr","locations":[{"start":{"line":744,"column":8},"end":{"line":744,"column":18}},{"start":{"line":744,"column":22},"end":{"line":744,"column":39}}]},"66":{"loc":{"start":{"line":746,"column":6},"end":{"line":752,"column":7}},"type":"if","locations":[{"start":{"line":746,"column":6},"end":{"line":752,"column":7}}]},"67":{"loc":{"start":{"line":746,"column":10},"end":{"line":746,"column":61}},"type":"binary-expr","locations":[{"start":{"line":746,"column":10},"end":{"line":746,"column":18}},{"start":{"line":746,"column":22},"end":{"line":746,"column":61}}]},"68":{"loc":{"start":{"line":761,"column":6},"end":{"line":761,"column":30}},"type":"if","locations":[{"start":{"line":761,"column":6},"end":{"line":761,"column":30}}]},"69":{"loc":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"type":"if","locations":[{"start":{"line":764,"column":8},"end":{"line":766,"column":9}}]},"70":{"loc":{"start":{"line":768,"column":6},"end":{"line":775,"column":7}},"type":"if","locations":[{"start":{"line":768,"column":6},"end":{"line":775,"column":7}}]},"71":{"loc":{"start":{"line":770,"column":22},"end":{"line":770,"column":48}},"type":"cond-expr","locations":[{"start":{"line":770,"column":39},"end":{"line":770,"column":42}},{"start":{"line":770,"column":45},"end":{"line":770,"column":48}}]},"72":{"loc":{"start":{"line":771,"column":8},"end":{"line":774,"column":9}},"type":"if","locations":[{"start":{"line":771,"column":8},"end":{"line":774,"column":9}}]},"73":{"loc":{"start":{"line":779,"column":4},"end":{"line":798,"column":5}},"type":"if","locations":[{"start":{"line":779,"column":4},"end":{"line":798,"column":5}}]},"74":{"loc":{"start":{"line":782,"column":8},"end":{"line":782,"column":32}},"type":"if","locations":[{"start":{"line":782,"column":8},"end":{"line":782,"column":32}}]},"75":{"loc":{"start":{"line":785,"column":10},"end":{"line":787,"column":11}},"type":"if","locations":[{"start":{"line":785,"column":10},"end":{"line":787,"column":11}}]},"76":{"loc":{"start":{"line":789,"column":8},"end":{"line":796,"column":9}},"type":"if","locations":[{"start":{"line":789,"column":8},"end":{"line":796,"column":9}}]},"77":{"loc":{"start":{"line":791,"column":24},"end":{"line":791,"column":50}},"type":"cond-expr","locations":[{"start":{"line":791,"column":41},"end":{"line":791,"column":44}},{"start":{"line":791,"column":47},"end":{"line":791,"column":50}}]},"78":{"loc":{"start":{"line":792,"column":10},"end":{"line":795,"column":11}},"type":"if","locations":[{"start":{"line":792,"column":10},"end":{"line":795,"column":11}}]},"79":{"loc":{"start":{"line":801,"column":4},"end":{"line":805,"column":5}},"type":"if","locations":[{"start":{"line":801,"column":4},"end":{"line":805,"column":5}}]},"80":{"loc":{"start":{"line":816,"column":4},"end":{"line":816,"column":28}},"type":"if","locations":[{"start":{"line":816,"column":4},"end":{"line":816,"column":28}}]},"81":{"loc":{"start":{"line":823,"column":6},"end":{"line":825,"column":7}},"type":"if","locations":[{"start":{"line":823,"column":6},"end":{"line":825,"column":7}}]},"82":{"loc":{"start":{"line":830,"column":6},"end":{"line":832,"column":7}},"type":"if","locations":[{"start":{"line":830,"column":6},"end":{"line":832,"column":7}}]},"83":{"loc":{"start":{"line":837,"column":6},"end":{"line":839,"column":7}},"type":"if","locations":[{"start":{"line":837,"column":6},"end":{"line":839,"column":7}}]},"84":{"loc":{"start":{"line":844,"column":6},"end":{"line":846,"column":7}},"type":"if","locations":[{"start":{"line":844,"column":6},"end":{"line":846,"column":7}}]},"85":{"loc":{"start":{"line":851,"column":4},"end":{"line":858,"column":5}},"type":"if","locations":[{"start":{"line":851,"column":4},"end":{"line":858,"column":5}}]},"86":{"loc":{"start":{"line":853,"column":8},"end":{"line":856,"column":9}},"type":"if","locations":[{"start":{"line":853,"column":8},"end":{"line":856,"column":9}}]},"87":{"loc":{"start":{"line":962,"column":11},"end":{"line":962,"column":31}},"type":"binary-expr","locations":[{"start":{"line":962,"column":11},"end":{"line":962,"column":25}},{"start":{"line":962,"column":29},"end":{"line":962,"column":31}}]},"88":{"loc":{"start":{"line":985,"column":2},"end":{"line":989,"column":3}},"type":"if","locations":[{"start":{"line":985,"column":2},"end":{"line":989,"column":3}}]},"89":{"loc":{"start":{"line":985,"column":6},"end":{"line":987,"column":96}},"type":"binary-expr","locations":[{"start":{"line":985,"column":6},"end":{"line":985,"column":339}},{"start":{"line":986,"column":6},"end":{"line":986,"column":210}},{"start":{"line":987,"column":6},"end":{"line":987,"column":96}}]},"90":{"loc":{"start":{"line":992,"column":2},"end":{"line":995,"column":3}},"type":"if","locations":[{"start":{"line":992,"column":2},"end":{"line":995,"column":3}}]},"91":{"loc":{"start":{"line":992,"column":6},"end":{"line":993,"column":84}},"type":"binary-expr","locations":[{"start":{"line":992,"column":6},"end":{"line":992,"column":263}},{"start":{"line":993,"column":6},"end":{"line":993,"column":84}}]},"92":{"loc":{"start":{"line":998,"column":2},"end":{"line":1002,"column":3}},"type":"if","locations":[{"start":{"line":998,"column":2},"end":{"line":1002,"column":3}}]},"93":{"loc":{"start":{"line":998,"column":6},"end":{"line":1000,"column":88}},"type":"binary-expr","locations":[{"start":{"line":998,"column":6},"end":{"line":998,"column":133}},{"start":{"line":999,"column":6},"end":{"line":999,"column":140}},{"start":{"line":1000,"column":6},"end":{"line":1000,"column":88}}]},"94":{"loc":{"start":{"line":1005,"column":2},"end":{"line":1009,"column":3}},"type":"if","locations":[{"start":{"line":1005,"column":2},"end":{"line":1009,"column":3}}]},"95":{"loc":{"start":{"line":1005,"column":6},"end":{"line":1007,"column":183}},"type":"binary-expr","locations":[{"start":{"line":1005,"column":6},"end":{"line":1005,"column":131}},{"start":{"line":1006,"column":6},"end":{"line":1006,"column":136}},{"start":{"line":1007,"column":6},"end":{"line":1007,"column":183}}]},"96":{"loc":{"start":{"line":1012,"column":2},"end":{"line":1017,"column":3}},"type":"if","locations":[{"start":{"line":1012,"column":2},"end":{"line":1017,"column":3}}]},"97":{"loc":{"start":{"line":1012,"column":6},"end":{"line":1015,"column":118}},"type":"binary-expr","locations":[{"start":{"line":1012,"column":6},"end":{"line":1012,"column":155}},{"start":{"line":1013,"column":7},"end":{"line":1013,"column":33}},{"start":{"line":1013,"column":37},"end":{"line":1013,"column":79}},{"start":{"line":1013,"column":83},"end":{"line":1013,"column":155}},{"start":{"line":1014,"column":6},"end":{"line":1014,"column":61}},{"start":{"line":1015,"column":6},"end":{"line":1015,"column":118}}]},"98":{"loc":{"start":{"line":1013,"column":38},"end":{"line":1013,"column":73}},"type":"binary-expr","locations":[{"start":{"line":1013,"column":38},"end":{"line":1013,"column":68}},{"start":{"line":1013,"column":72},"end":{"line":1013,"column":73}}]},"99":{"loc":{"start":{"line":1020,"column":2},"end":{"line":1023,"column":3}},"type":"if","locations":[{"start":{"line":1020,"column":2},"end":{"line":1023,"column":3}}]},"100":{"loc":{"start":{"line":1020,"column":6},"end":{"line":1021,"column":84}},"type":"binary-expr","locations":[{"start":{"line":1020,"column":6},"end":{"line":1020,"column":76}},{"start":{"line":1021,"column":6},"end":{"line":1021,"column":84}}]},"101":{"loc":{"start":{"line":1026,"column":2},"end":{"line":1029,"column":3}},"type":"if","locations":[{"start":{"line":1026,"column":2},"end":{"line":1029,"column":3}}]},"102":{"loc":{"start":{"line":1026,"column":6},"end":{"line":1027,"column":100}},"type":"binary-expr","locations":[{"start":{"line":1026,"column":6},"end":{"line":1026,"column":122}},{"start":{"line":1027,"column":6},"end":{"line":1027,"column":100}}]},"103":{"loc":{"start":{"line":1032,"column":9},"end":{"line":1032,"column":101}},"type":"binary-expr","locations":[{"start":{"line":1032,"column":9},"end":{"line":1032,"column":69}},{"start":{"line":1032,"column":73},"end":{"line":1032,"column":101}}]},"104":{"loc":{"start":{"line":1044,"column":2},"end":{"line":1050,"column":3}},"type":"if","locations":[{"start":{"line":1044,"column":2},"end":{"line":1050,"column":3}}]},"105":{"loc":{"start":{"line":1044,"column":6},"end":{"line":1046,"column":25}},"type":"binary-expr","locations":[{"start":{"line":1044,"column":6},"end":{"line":1044,"column":47}},{"start":{"line":1045,"column":6},"end":{"line":1045,"column":42}},{"start":{"line":1046,"column":6},"end":{"line":1046,"column":25}}]},"106":{"loc":{"start":{"line":1053,"column":2},"end":{"line":1076,"column":3}},"type":"if","locations":[{"start":{"line":1053,"column":2},"end":{"line":1076,"column":3}}]},"107":{"loc":{"start":{"line":1058,"column":4},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1058,"column":4},"end":{"line":1072,"column":5}},{"start":{"line":1060,"column":11},"end":{"line":1072,"column":5}}]},"108":{"loc":{"start":{"line":1060,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1060,"column":11},"end":{"line":1072,"column":5}},{"start":{"line":1062,"column":11},"end":{"line":1072,"column":5}}]},"109":{"loc":{"start":{"line":1062,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1062,"column":11},"end":{"line":1072,"column":5}},{"start":{"line":1064,"column":11},"end":{"line":1072,"column":5}}]},"110":{"loc":{"start":{"line":1064,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1064,"column":11},"end":{"line":1072,"column":5}},{"start":{"line":1066,"column":11},"end":{"line":1072,"column":5}}]},"111":{"loc":{"start":{"line":1066,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1066,"column":11},"end":{"line":1072,"column":5}},{"start":{"line":1068,"column":11},"end":{"line":1072,"column":5}}]},"112":{"loc":{"start":{"line":1068,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1068,"column":11},"end":{"line":1072,"column":5}},{"start":{"line":1070,"column":11},"end":{"line":1072,"column":5}}]},"113":{"loc":{"start":{"line":1070,"column":11},"end":{"line":1072,"column":5}},"type":"if","locations":[{"start":{"line":1070,"column":11},"end":{"line":1072,"column":5}}]},"114":{"loc":{"start":{"line":1079,"column":26},"end":{"line":1079,"column":56}},"type":"binary-expr","locations":[{"start":{"line":1079,"column":26},"end":{"line":1079,"column":50}},{"start":{"line":1079,"column":54},"end":{"line":1079,"column":56}}]},"115":{"loc":{"start":{"line":1082,"column":2},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1082,"column":2},"end":{"line":1120,"column":3}},{"start":{"line":1086,"column":7},"end":{"line":1120,"column":3}}]},"116":{"loc":{"start":{"line":1086,"column":7},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1086,"column":7},"end":{"line":1120,"column":3}},{"start":{"line":1088,"column":9},"end":{"line":1120,"column":3}}]},"117":{"loc":{"start":{"line":1086,"column":11},"end":{"line":1086,"column":123}},"type":"binary-expr","locations":[{"start":{"line":1086,"column":11},"end":{"line":1086,"column":43}},{"start":{"line":1086,"column":47},"end":{"line":1086,"column":86}},{"start":{"line":1086,"column":90},"end":{"line":1086,"column":123}}]},"118":{"loc":{"start":{"line":1088,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1088,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1090,"column":9},"end":{"line":1120,"column":3}}]},"119":{"loc":{"start":{"line":1088,"column":13},"end":{"line":1088,"column":155}},"type":"binary-expr","locations":[{"start":{"line":1088,"column":13},"end":{"line":1088,"column":42}},{"start":{"line":1088,"column":46},"end":{"line":1088,"column":78}},{"start":{"line":1088,"column":82},"end":{"line":1088,"column":118}},{"start":{"line":1088,"column":122},"end":{"line":1088,"column":155}}]},"120":{"loc":{"start":{"line":1090,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1090,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1092,"column":9},"end":{"line":1120,"column":3}}]},"121":{"loc":{"start":{"line":1090,"column":13},"end":{"line":1090,"column":152}},"type":"binary-expr","locations":[{"start":{"line":1090,"column":13},"end":{"line":1090,"column":44}},{"start":{"line":1090,"column":48},"end":{"line":1090,"column":82}},{"start":{"line":1090,"column":86},"end":{"line":1090,"column":119}},{"start":{"line":1090,"column":123},"end":{"line":1090,"column":152}}]},"122":{"loc":{"start":{"line":1092,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1092,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1094,"column":9},"end":{"line":1120,"column":3}}]},"123":{"loc":{"start":{"line":1092,"column":13},"end":{"line":1092,"column":116}},"type":"binary-expr","locations":[{"start":{"line":1092,"column":13},"end":{"line":1092,"column":41}},{"start":{"line":1092,"column":45},"end":{"line":1092,"column":77}},{"start":{"line":1092,"column":81},"end":{"line":1092,"column":116}}]},"124":{"loc":{"start":{"line":1094,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1094,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1096,"column":9},"end":{"line":1120,"column":3}}]},"125":{"loc":{"start":{"line":1094,"column":13},"end":{"line":1094,"column":162}},"type":"binary-expr","locations":[{"start":{"line":1094,"column":13},"end":{"line":1094,"column":41}},{"start":{"line":1094,"column":45},"end":{"line":1094,"column":79}},{"start":{"line":1094,"column":83},"end":{"line":1094,"column":118}},{"start":{"line":1094,"column":122},"end":{"line":1094,"column":162}}]},"126":{"loc":{"start":{"line":1096,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1096,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1098,"column":9},"end":{"line":1120,"column":3}}]},"127":{"loc":{"start":{"line":1096,"column":13},"end":{"line":1096,"column":120}},"type":"binary-expr","locations":[{"start":{"line":1096,"column":13},"end":{"line":1096,"column":44}},{"start":{"line":1096,"column":48},"end":{"line":1096,"column":79}},{"start":{"line":1096,"column":83},"end":{"line":1096,"column":120}}]},"128":{"loc":{"start":{"line":1098,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1098,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1100,"column":9},"end":{"line":1120,"column":3}}]},"129":{"loc":{"start":{"line":1098,"column":13},"end":{"line":1098,"column":125}},"type":"binary-expr","locations":[{"start":{"line":1098,"column":13},"end":{"line":1098,"column":45}},{"start":{"line":1098,"column":49},"end":{"line":1098,"column":84}},{"start":{"line":1098,"column":88},"end":{"line":1098,"column":125}}]},"130":{"loc":{"start":{"line":1100,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1100,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1102,"column":9},"end":{"line":1120,"column":3}}]},"131":{"loc":{"start":{"line":1100,"column":13},"end":{"line":1100,"column":118}},"type":"binary-expr","locations":[{"start":{"line":1100,"column":13},"end":{"line":1100,"column":41}},{"start":{"line":1100,"column":45},"end":{"line":1100,"column":77}},{"start":{"line":1100,"column":81},"end":{"line":1100,"column":118}}]},"132":{"loc":{"start":{"line":1102,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1102,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1106,"column":7},"end":{"line":1120,"column":3}}]},"133":{"loc":{"start":{"line":1102,"column":13},"end":{"line":1102,"column":133}},"type":"binary-expr","locations":[{"start":{"line":1102,"column":13},"end":{"line":1102,"column":53}},{"start":{"line":1102,"column":57},"end":{"line":1102,"column":90}},{"start":{"line":1102,"column":94},"end":{"line":1102,"column":133}}]},"134":{"loc":{"start":{"line":1106,"column":7},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1106,"column":7},"end":{"line":1120,"column":3}},{"start":{"line":1108,"column":9},"end":{"line":1120,"column":3}}]},"135":{"loc":{"start":{"line":1106,"column":11},"end":{"line":1106,"column":137}},"type":"binary-expr","locations":[{"start":{"line":1106,"column":11},"end":{"line":1106,"column":41}},{"start":{"line":1106,"column":45},"end":{"line":1106,"column":79}},{"start":{"line":1106,"column":83},"end":{"line":1106,"column":114}},{"start":{"line":1106,"column":118},"end":{"line":1106,"column":137}}]},"136":{"loc":{"start":{"line":1108,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1108,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1110,"column":9},"end":{"line":1120,"column":3}}]},"137":{"loc":{"start":{"line":1108,"column":13},"end":{"line":1108,"column":124}},"type":"binary-expr","locations":[{"start":{"line":1108,"column":13},"end":{"line":1108,"column":46}},{"start":{"line":1108,"column":50},"end":{"line":1108,"column":84}},{"start":{"line":1108,"column":88},"end":{"line":1108,"column":124}}]},"138":{"loc":{"start":{"line":1110,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1110,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1112,"column":9},"end":{"line":1120,"column":3}}]},"139":{"loc":{"start":{"line":1110,"column":13},"end":{"line":1110,"column":135}},"type":"binary-expr","locations":[{"start":{"line":1110,"column":13},"end":{"line":1110,"column":49}},{"start":{"line":1110,"column":53},"end":{"line":1110,"column":92}},{"start":{"line":1110,"column":96},"end":{"line":1110,"column":135}}]},"140":{"loc":{"start":{"line":1112,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1112,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1114,"column":9},"end":{"line":1120,"column":3}}]},"141":{"loc":{"start":{"line":1112,"column":13},"end":{"line":1112,"column":162}},"type":"binary-expr","locations":[{"start":{"line":1112,"column":13},"end":{"line":1112,"column":46}},{"start":{"line":1112,"column":50},"end":{"line":1112,"column":83}},{"start":{"line":1112,"column":87},"end":{"line":1112,"column":122}},{"start":{"line":1112,"column":126},"end":{"line":1112,"column":162}}]},"142":{"loc":{"start":{"line":1114,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1114,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1116,"column":9},"end":{"line":1120,"column":3}}]},"143":{"loc":{"start":{"line":1114,"column":13},"end":{"line":1114,"column":132}},"type":"binary-expr","locations":[{"start":{"line":1114,"column":13},"end":{"line":1114,"column":47}},{"start":{"line":1114,"column":51},"end":{"line":1114,"column":86}},{"start":{"line":1114,"column":90},"end":{"line":1114,"column":132}}]},"144":{"loc":{"start":{"line":1116,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1116,"column":9},"end":{"line":1120,"column":3}},{"start":{"line":1118,"column":9},"end":{"line":1120,"column":3}}]},"145":{"loc":{"start":{"line":1116,"column":13},"end":{"line":1116,"column":158}},"type":"binary-expr","locations":[{"start":{"line":1116,"column":13},"end":{"line":1116,"column":47}},{"start":{"line":1116,"column":51},"end":{"line":1116,"column":88}},{"start":{"line":1116,"column":92},"end":{"line":1116,"column":123}},{"start":{"line":1116,"column":127},"end":{"line":1116,"column":158}}]},"146":{"loc":{"start":{"line":1118,"column":9},"end":{"line":1120,"column":3}},"type":"if","locations":[{"start":{"line":1118,"column":9},"end":{"line":1120,"column":3}}]},"147":{"loc":{"start":{"line":1118,"column":13},"end":{"line":1118,"column":144}},"type":"binary-expr","locations":[{"start":{"line":1118,"column":13},"end":{"line":1118,"column":52}},{"start":{"line":1118,"column":56},"end":{"line":1118,"column":96}},{"start":{"line":1118,"column":100},"end":{"line":1118,"column":144}}]},"148":{"loc":{"start":{"line":1125,"column":2},"end":{"line":1127,"column":3}},"type":"if","locations":[{"start":{"line":1125,"column":2},"end":{"line":1127,"column":3}}]}},"s":{"0":7,"1":7,"2":7,"3":7,"4":212,"5":212,"6":212,"7":212,"8":212,"9":212,"10":212,"11":212,"12":0,"13":2,"14":2,"15":2,"16":2,"17":0,"18":0,"19":212,"20":212,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":71,"31":12,"32":59,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":59,"40":59,"41":59,"42":0,"43":59,"44":59,"45":59,"46":59,"47":59,"48":59,"49":59,"50":4,"51":55,"52":55,"53":52,"54":3,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":3,"64":71,"65":59,"66":59,"67":59,"68":0,"69":59,"70":2301,"71":0,"72":59,"73":59,"74":59,"75":59,"76":59,"77":59,"78":289,"79":232,"80":283,"81":236,"82":59,"83":59,"84":59,"85":59,"86":944,"87":944,"88":0,"89":944,"90":944,"91":944,"92":944,"93":4661,"94":5,"95":5,"96":0,"97":5,"98":5,"99":9,"100":4,"101":944,"102":5,"103":5,"104":0,"105":5,"106":4,"107":5,"108":0,"109":5,"110":3,"111":5,"112":0,"113":5,"114":0,"115":5,"116":0,"117":5,"118":0,"119":5,"120":0,"121":5,"122":5,"123":59,"124":5,"125":3,"126":0,"127":0,"128":0,"129":1,"130":0,"131":1,"132":55,"133":0,"134":55,"135":0,"136":55,"137":0,"138":55,"139":0,"140":55,"141":1,"142":54,"143":54,"144":918,"145":7560,"146":918,"147":60,"148":54,"149":17,"150":17,"151":17,"152":17,"153":17,"154":17,"155":17,"156":0,"157":241,"158":241,"159":10,"160":10,"161":0,"162":241,"163":241,"164":241,"165":241,"166":4097,"167":4097,"168":0,"169":4097,"170":4097,"171":20244,"172":32,"173":4097,"174":31,"175":31,"176":30,"177":30,"178":241,"179":211,"180":3587,"181":3587,"182":0,"183":3587,"184":3587,"185":29540,"186":393,"187":3587,"188":335,"189":335,"190":202,"191":202,"192":241,"193":36,"194":36,"195":36,"196":241,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":7,"224":7,"225":7,"226":136,"227":136,"228":136,"229":11,"230":125,"231":3,"232":122,"233":14,"234":108,"235":5,"236":103,"237":8,"238":95,"239":13,"240":82,"241":30,"242":52,"243":14,"244":14,"245":14,"246":2,"247":2,"248":2,"249":12,"250":8,"251":8,"252":1,"253":7,"254":0,"255":7,"256":1,"257":6,"258":1,"259":5,"260":1,"261":4,"262":1,"263":3,"264":1,"265":8,"266":8,"267":4,"268":4,"269":3,"270":1,"271":0,"272":1,"273":0,"274":1,"275":0,"276":1,"277":0,"278":1,"279":0,"280":1,"281":0,"282":1,"283":0,"284":1,"285":0,"286":1,"287":0,"288":1,"289":0,"290":1,"291":0,"292":1,"293":0,"294":1,"295":0,"296":1,"297":0,"298":1,"299":0,"300":1,"301":0,"302":4,"303":4,"304":0,"305":4},"f":{"0":212,"1":2,"2":212,"3":212,"4":0,"5":0,"6":71,"7":59,"8":71,"9":59,"10":59,"11":289,"12":232,"13":283,"14":236,"15":59,"16":9,"17":5,"18":55,"19":7560,"20":17,"21":0,"22":241,"23":0,"24":0,"25":136,"26":14},"b":{"0":[212],"1":[212],"2":[0],"3":[0],"4":[2],"5":[2,0],"6":[0,0],"7":[0,0],"8":[0],"9":[0,0],"10":[12],"11":[0],"12":[59,0,0],"13":[0],"14":[0],"15":[59,0],"16":[59,52],"17":[59,52],"18":[59,53],"19":[4],"20":[52],"21":[0],"22":[0,0],"23":[0],"24":[0,0],"25":[0],"26":[0,0],"27":[0],"28":[0],"29":[0],"30":[0],"31":[5],"32":[0],"33":[4],"34":[5],"35":[0],"36":[4],"37":[0],"38":[3],"39":[5,3],"40":[0],"41":[5,0],"42":[0],"43":[5,0],"44":[0],"45":[5,0],"46":[0],"47":[5,1],"48":[0],"49":[5,0],"50":[5],"51":[5,0],"52":[4,55],"53":[59,5],"54":[3,0,0,0,1,0,1],"55":[0],"56":[0],"57":[0],"58":[0],"59":[1],"60":[60],"61":[918,103,52],"62":[51,3],"63":[17],"64":[10],"65":[241,10],"66":[0],"67":[10,0],"68":[0],"69":[32],"70":[31],"71":[1,30],"72":[30],"73":[211],"74":[0],"75":[393],"76":[335],"77":[48,287],"78":[202],"79":[36],"80":[0],"81":[0],"82":[0],"83":[0],"84":[0],"85":[0],"86":[0],"87":[0,0],"88":[11],"89":[136,132,125],"90":[3],"91":[125,125],"92":[14],"93":[122,108,108],"94":[5],"95":[108,103,103],"96":[8],"97":[103,100,22,5,95,95],"98":[22,17],"99":[13],"100":[95,17],"101":[30],"102":[82,30],"103":[52,0],"104":[2],"105":[14,8,13],"106":[8],"107":[1,7],"108":[0,7],"109":[1,6],"110":[1,5],"111":[1,4],"112":[1,3],"113":[1],"114":[4,0],"115":[3,1],"116":[0,1],"117":[1,1,1],"118":[0,1],"119":[1,1,1,1],"120":[0,1],"121":[1,1,1,1],"122":[0,1],"123":[1,1,1],"124":[0,1],"125":[1,1,1,1],"126":[0,1],"127":[1,1,1],"128":[0,1],"129":[1,1,1],"130":[0,1],"131":[1,1,1],"132":[0,1],"133":[1,1,1],"134":[0,1],"135":[1,1,1,1],"136":[0,1],"137":[1,1,1],"138":[0,1],"139":[1,1,1],"140":[0,1],"141":[1,1,1,1],"142":[0,1],"143":[1,1,1],"144":[0,1],"145":[1,1,1,1],"146":[0],"147":[1,1,1],"148":[0]}},"/Users/voldeck/code/newdemo/lib/ml-query-classifier.ts":{"path":"/Users/voldeck/code/newdemo/lib/ml-query-classifier.ts","statementMap":{"0":{"start":{"line":43,"column":10},"end":{"line":43,"column":63}},"1":{"start":{"line":50,"column":4},"end":{"line":50,"column":67}},"2":{"start":{"line":51,"column":4},"end":{"line":51,"column":65}},"3":{"start":{"line":52,"column":4},"end":{"line":52,"column":62}},"4":{"start":{"line":53,"column":4},"end":{"line":53,"column":46}},"5":{"start":{"line":62,"column":4},"end":{"line":62,"column":28}},"6":{"start":{"line":62,"column":16},"end":{"line":62,"column":28}},"7":{"start":{"line":65,"column":25},"end":{"line":65,"column":56}},"8":{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},"9":{"start":{"line":67,"column":6},"end":{"line":67,"column":66}},"10":{"start":{"line":68,"column":6},"end":{"line":68,"column":26}},"11":{"start":{"line":71,"column":4},"end":{"line":104,"column":5}},"12":{"start":{"line":73,"column":25},"end":{"line":73,"column":46}},"13":{"start":{"line":74,"column":24},"end":{"line":74,"column":76}},"14":{"start":{"line":74,"column":41},"end":{"line":74,"column":59}},"15":{"start":{"line":77,"column":23},"end":{"line":82,"column":8}},"16":{"start":{"line":85,"column":6},"end":{"line":85,"column":30}},"17":{"start":{"line":87,"column":6},"end":{"line":89,"column":7}},"18":{"start":{"line":88,"column":8},"end":{"line":88,"column":57}},"19":{"start":{"line":91,"column":25},"end":{"line":91,"column":46}},"20":{"start":{"line":94,"column":6},"end":{"line":94,"column":46}},"21":{"start":{"line":96,"column":6},"end":{"line":96,"column":24}},"22":{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},"23":{"start":{"line":99,"column":8},"end":{"line":99,"column":71}},"24":{"start":{"line":101,"column":8},"end":{"line":101,"column":57}},"25":{"start":{"line":103,"column":6},"end":{"line":103,"column":18}},"26":{"start":{"line":113,"column":4},"end":{"line":113,"column":79}},"27":{"start":{"line":122,"column":28},"end":{"line":122,"column":54}},"28":{"start":{"line":123,"column":19},"end":{"line":123,"column":60}},"29":{"start":{"line":125,"column":4},"end":{"line":127,"column":5}},"30":{"start":{"line":126,"column":6},"end":{"line":126,"column":31}},"31":{"start":{"line":129,"column":4},"end":{"line":129,"column":16}},"32":{"start":{"line":138,"column":28},"end":{"line":138,"column":54}},"33":{"start":{"line":139,"column":4},"end":{"line":142,"column":7}},"34":{"start":{"line":145,"column":4},"end":{"line":160,"column":5}},"35":{"start":{"line":147,"column":37},"end":{"line":147,"column":41}},"36":{"start":{"line":148,"column":23},"end":{"line":148,"column":31}},"37":{"start":{"line":150,"column":6},"end":{"line":155,"column":7}},"38":{"start":{"line":151,"column":8},"end":{"line":154,"column":9}},"39":{"start":{"line":152,"column":10},"end":{"line":152,"column":39}},"40":{"start":{"line":153,"column":10},"end":{"line":153,"column":26}},"41":{"start":{"line":157,"column":6},"end":{"line":159,"column":7}},"42":{"start":{"line":158,"column":8},"end":{"line":158,"column":47}},"43":{"start":{"line":168,"column":4},"end":{"line":168,"column":59}},"44":{"start":{"line":175,"column":4},"end":{"line":175,"column":33}},"45":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"46":{"start":{"line":184,"column":6},"end":{"line":184,"column":44}},"47":{"start":{"line":187,"column":4},"end":{"line":189,"column":5}},"48":{"start":{"line":188,"column":6},"end":{"line":188,"column":60}},"49":{"start":{"line":191,"column":4},"end":{"line":193,"column":5}},"50":{"start":{"line":192,"column":6},"end":{"line":192,"column":46}},"51":{"start":{"line":195,"column":4},"end":{"line":197,"column":5}},"52":{"start":{"line":196,"column":6},"end":{"line":196,"column":40}},"53":{"start":{"line":38,"column":0},"end":{"line":38,"column":13}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":2},"end":{"line":49,"column":14}},"loc":{"start":{"line":49,"column":45},"end":{"line":54,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":61,"column":2},"end":{"line":61,"column":7}},"loc":{"start":{"line":61,"column":35},"end":{"line":105,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":74,"column":35},"end":{"line":74,"column":38}},"loc":{"start":{"line":74,"column":41},"end":{"line":74,"column":59}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":112,"column":2},"end":{"line":112,"column":13}},"loc":{"start":{"line":112,"column":45},"end":{"line":114,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":121,"column":10},"end":{"line":121,"column":29}},"loc":{"start":{"line":121,"column":43},"end":{"line":130,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":137,"column":10},"end":{"line":137,"column":25}},"loc":{"start":{"line":137,"column":65},"end":{"line":161,"column":3}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":167,"column":10},"end":{"line":167,"column":24}},"loc":{"start":{"line":167,"column":38},"end":{"line":169,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":174,"column":2},"end":{"line":174,"column":12}},"loc":{"start":{"line":174,"column":12},"end":{"line":176,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":182,"column":2},"end":{"line":182,"column":14}},"loc":{"start":{"line":182,"column":50},"end":{"line":198,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":49,"column":14},"end":{"line":49,"column":45}},"type":"default-arg","locations":[{"start":{"line":49,"column":43},"end":{"line":49,"column":45}}]},"1":{"loc":{"start":{"line":50,"column":23},"end":{"line":50,"column":66}},"type":"binary-expr","locations":[{"start":{"line":50,"column":23},"end":{"line":50,"column":41}},{"start":{"line":50,"column":45},"end":{"line":50,"column":66}}]},"2":{"loc":{"start":{"line":51,"column":31},"end":{"line":51,"column":64}},"type":"binary-expr","locations":[{"start":{"line":51,"column":31},"end":{"line":51,"column":57}},{"start":{"line":51,"column":61},"end":{"line":51,"column":64}}]},"3":{"loc":{"start":{"line":52,"column":24},"end":{"line":52,"column":61}},"type":"binary-expr","locations":[{"start":{"line":52,"column":24},"end":{"line":52,"column":43}},{"start":{"line":52,"column":47},"end":{"line":52,"column":61}}]},"4":{"loc":{"start":{"line":53,"column":21},"end":{"line":53,"column":45}},"type":"binary-expr","locations":[{"start":{"line":53,"column":21},"end":{"line":53,"column":37}},{"start":{"line":53,"column":41},"end":{"line":53,"column":45}}]},"5":{"loc":{"start":{"line":62,"column":4},"end":{"line":62,"column":28}},"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":28}}]},"6":{"loc":{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":69,"column":5}}]},"7":{"loc":{"start":{"line":87,"column":6},"end":{"line":89,"column":7}},"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":89,"column":7}}]},"8":{"loc":{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},{"start":{"line":100,"column":13},"end":{"line":102,"column":7}}]},"9":{"loc":{"start":{"line":113,"column":14},"end":{"line":113,"column":77}},"type":"binary-expr","locations":[{"start":{"line":113,"column":14},"end":{"line":113,"column":24}},{"start":{"line":113,"column":28},"end":{"line":113,"column":77}}]},"10":{"loc":{"start":{"line":125,"column":4},"end":{"line":127,"column":5}},"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":127,"column":5}}]},"11":{"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":69}},"type":"binary-expr","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":14}},{"start":{"line":125,"column":18},"end":{"line":125,"column":69}}]},"12":{"loc":{"start":{"line":145,"column":4},"end":{"line":160,"column":5}},"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":160,"column":5}}]},"13":{"loc":{"start":{"line":151,"column":8},"end":{"line":154,"column":9}},"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":154,"column":9}}]},"14":{"loc":{"start":{"line":157,"column":6},"end":{"line":159,"column":7}},"type":"if","locations":[{"start":{"line":157,"column":6},"end":{"line":159,"column":7}}]},"15":{"loc":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":185,"column":5}}]},"16":{"loc":{"start":{"line":187,"column":4},"end":{"line":189,"column":5}},"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":189,"column":5}}]},"17":{"loc":{"start":{"line":191,"column":4},"end":{"line":193,"column":5}},"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":193,"column":5}}]},"18":{"loc":{"start":{"line":195,"column":4},"end":{"line":197,"column":5}},"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":197,"column":5}}]}},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":10,"6":0,"7":10,"8":10,"9":0,"10":0,"11":10,"12":10,"13":10,"14":0,"15":10,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":10,"23":0,"24":10,"25":10,"26":0,"27":10,"28":10,"29":10,"30":0,"31":10,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":10,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":7},"f":{"0":2,"1":10,"2":0,"3":0,"4":10,"5":0,"6":10,"7":0,"8":0},"b":{"0":[0],"1":[2,2],"2":[2,2],"3":[2,2],"4":[2,2],"5":[0],"6":[0],"7":[0],"8":[0,10],"9":[0,0],"10":[0],"11":[10,0],"12":[0],"13":[0],"14":[0],"15":[0],"16":[0],"17":[0],"18":[0]}},"/Users/voldeck/code/newdemo/lib/hybrid-query-processor.ts":{"path":"/Users/voldeck/code/newdemo/lib/hybrid-query-processor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":85}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":88}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":91}},"3":{"start":{"line":48,"column":10},"end":{"line":48,"column":51}},"4":{"start":{"line":54,"column":10},"end":{"line":54,"column":42}},"5":{"start":{"line":57,"column":4},"end":{"line":57,"column":65}},"6":{"start":{"line":58,"column":4},"end":{"line":63,"column":6}},"7":{"start":{"line":70,"column":22},"end":{"line":70,"column":32}},"8":{"start":{"line":73,"column":30},"end":{"line":73,"column":56}},"9":{"start":{"line":76,"column":28},"end":{"line":76,"column":74}},"10":{"start":{"line":79,"column":18},"end":{"line":79,"column":61}},"11":{"start":{"line":80,"column":27},"end":{"line":80,"column":60}},"12":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"13":{"start":{"line":87,"column":6},"end":{"line":87,"column":83}},"14":{"start":{"line":90,"column":6},"end":{"line":90,"column":86}},"15":{"start":{"line":93,"column":27},"end":{"line":93,"column":49}},"16":{"start":{"line":94,"column":4},"end":{"line":94,"column":43}},"17":{"start":{"line":97,"column":4},"end":{"line":111,"column":5}},"18":{"start":{"line":98,"column":6},"end":{"line":105,"column":9}},"19":{"start":{"line":108,"column":6},"end":{"line":110,"column":7}},"20":{"start":{"line":109,"column":8},"end":{"line":109,"column":41}},"21":{"start":{"line":113,"column":4},"end":{"line":113,"column":18}},"22":{"start":{"line":121,"column":4},"end":{"line":123,"column":5}},"23":{"start":{"line":122,"column":6},"end":{"line":122,"column":18}},"24":{"start":{"line":126,"column":4},"end":{"line":126,"column":80}},"25":{"start":{"line":137,"column":4},"end":{"line":175,"column":5}},"26":{"start":{"line":139,"column":29},"end":{"line":147,"column":26}},"27":{"start":{"line":150,"column":39},"end":{"line":154,"column":8}},"28":{"start":{"line":157,"column":24},"end":{"line":157,"column":59}},"29":{"start":{"line":160,"column":48},"end":{"line":167,"column":8}},"30":{"start":{"line":169,"column":6},"end":{"line":169,"column":28}},"31":{"start":{"line":171,"column":6},"end":{"line":171,"column":52}},"32":{"start":{"line":174,"column":6},"end":{"line":174,"column":78}},"33":{"start":{"line":187,"column":47},"end":{"line":194,"column":6}},"34":{"start":{"line":197,"column":27},"end":{"line":197,"column":79}},"35":{"start":{"line":198,"column":4},"end":{"line":198,"column":57}},"36":{"start":{"line":201,"column":44},"end":{"line":206,"column":6}},"37":{"start":{"line":208,"column":4},"end":{"line":208,"column":24}},"38":{"start":{"line":215,"column":4},"end":{"line":215,"column":39}},"39":{"start":{"line":218,"column":4},"end":{"line":220,"column":5}},"40":{"start":{"line":219,"column":6},"end":{"line":219,"column":33}},"41":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"42":{"start":{"line":229,"column":6},"end":{"line":229,"column":13}},"43":{"start":{"line":233,"column":23},"end":{"line":233,"column":52}},"44":{"start":{"line":236,"column":22},"end":{"line":236,"column":77}},"45":{"start":{"line":236,"column":45},"end":{"line":236,"column":76}},"46":{"start":{"line":237,"column":24},"end":{"line":237,"column":81}},"47":{"start":{"line":237,"column":47},"end":{"line":237,"column":80}},"48":{"start":{"line":239,"column":22},"end":{"line":240,"column":44}},"49":{"start":{"line":239,"column":51},"end":{"line":239,"column":73}},"50":{"start":{"line":241,"column":24},"end":{"line":242,"column":48}},"51":{"start":{"line":241,"column":55},"end":{"line":241,"column":77}},"52":{"start":{"line":245,"column":22},"end":{"line":245,"column":45}},"53":{"start":{"line":248,"column":4},"end":{"line":254,"column":5}},"54":{"start":{"line":249,"column":6},"end":{"line":249,"column":38}},"55":{"start":{"line":252,"column":9},"end":{"line":254,"column":5}},"56":{"start":{"line":253,"column":6},"end":{"line":253,"column":38}},"57":{"start":{"line":261,"column":4},"end":{"line":261,"column":35}},"58":{"start":{"line":268,"column":4},"end":{"line":268,"column":31}},"59":{"start":{"line":46,"column":0},"end":{"line":46,"column":13}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":56,"column":2},"end":{"line":56,"column":14}},"loc":{"start":{"line":56,"column":50},"end":{"line":64,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":7}},"loc":{"start":{"line":69,"column":34},"end":{"line":114,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":119,"column":10},"end":{"line":119,"column":31}},"loc":{"start":{"line":119,"column":65},"end":{"line":127,"column":3}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":132,"column":10},"end":{"line":132,"column":15}},"loc":{"start":{"line":135,"column":42},"end":{"line":176,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":181,"column":10},"end":{"line":181,"column":15}},"loc":{"start":{"line":184,"column":42},"end":{"line":209,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":214,"column":10},"end":{"line":214,"column":26}},"loc":{"start":{"line":214,"column":56},"end":{"line":221,"column":3}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":226,"column":10},"end":{"line":226,"column":35}},"loc":{"start":{"line":226,"column":35},"end":{"line":255,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":236,"column":40},"end":{"line":236,"column":41}},"loc":{"start":{"line":236,"column":45},"end":{"line":236,"column":76}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":237,"column":42},"end":{"line":237,"column":43}},"loc":{"start":{"line":237,"column":47},"end":{"line":237,"column":80}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":239,"column":39},"end":{"line":239,"column":40}},"loc":{"start":{"line":239,"column":51},"end":{"line":239,"column":73}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":241,"column":43},"end":{"line":241,"column":44}},"loc":{"start":{"line":241,"column":55},"end":{"line":241,"column":77}}},"11":{"name":"(anonymous_11)","decl":{"start":{"line":260,"column":2},"end":{"line":260,"column":18}},"loc":{"start":{"line":260,"column":18},"end":{"line":262,"column":3}}},"12":{"name":"(anonymous_12)","decl":{"start":{"line":267,"column":2},"end":{"line":267,"column":12}},"loc":{"start":{"line":267,"column":12},"end":{"line":269,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":56,"column":14},"end":{"line":56,"column":50}},"type":"default-arg","locations":[{"start":{"line":56,"column":48},"end":{"line":56,"column":50}}]},"1":{"loc":{"start":{"line":80,"column":27},"end":{"line":80,"column":60}},"type":"cond-expr","locations":[{"start":{"line":80,"column":35},"end":{"line":80,"column":45}},{"start":{"line":80,"column":48},"end":{"line":80,"column":60}}]},"2":{"loc":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},{"start":{"line":88,"column":11},"end":{"line":91,"column":5}}]},"3":{"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":44}},"type":"binary-expr","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":13}},{"start":{"line":85,"column":17},"end":{"line":85,"column":44}}]},"4":{"loc":{"start":{"line":97,"column":4},"end":{"line":111,"column":5}},"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":111,"column":5}}]},"5":{"loc":{"start":{"line":108,"column":6},"end":{"line":110,"column":7}},"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":110,"column":7}}]},"6":{"loc":{"start":{"line":121,"column":4},"end":{"line":123,"column":5}},"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":123,"column":5}}]},"7":{"loc":{"start":{"line":126,"column":11},"end":{"line":126,"column":79}},"type":"binary-expr","locations":[{"start":{"line":126,"column":11},"end":{"line":126,"column":54}},{"start":{"line":126,"column":58},"end":{"line":126,"column":79}}]},"8":{"loc":{"start":{"line":218,"column":4},"end":{"line":220,"column":5}},"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":220,"column":5}}]},"9":{"loc":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":230,"column":5}}]},"10":{"loc":{"start":{"line":240,"column":22},"end":{"line":240,"column":43}},"type":"binary-expr","locations":[{"start":{"line":240,"column":22},"end":{"line":240,"column":38}},{"start":{"line":240,"column":42},"end":{"line":240,"column":43}}]},"11":{"loc":{"start":{"line":242,"column":24},"end":{"line":242,"column":47}},"type":"binary-expr","locations":[{"start":{"line":242,"column":24},"end":{"line":242,"column":42}},{"start":{"line":242,"column":46},"end":{"line":242,"column":47}}]},"12":{"loc":{"start":{"line":248,"column":4},"end":{"line":254,"column":5}},"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":254,"column":5}},{"start":{"line":252,"column":9},"end":{"line":254,"column":5}}]},"13":{"loc":{"start":{"line":248,"column":8},"end":{"line":248,"column":53}},"type":"binary-expr","locations":[{"start":{"line":248,"column":8},"end":{"line":248,"column":21}},{"start":{"line":248,"column":25},"end":{"line":248,"column":53}}]},"14":{"loc":{"start":{"line":252,"column":9},"end":{"line":254,"column":5}},"type":"if","locations":[{"start":{"line":252,"column":9},"end":{"line":254,"column":5}}]},"15":{"loc":{"start":{"line":252,"column":13},"end":{"line":252,"column":58}},"type":"binary-expr","locations":[{"start":{"line":252,"column":13},"end":{"line":252,"column":26}},{"start":{"line":252,"column":30},"end":{"line":252,"column":58}}]}},"s":{"0":1,"1":1,"2":1,"3":6,"4":6,"5":6,"6":6,"7":5,"8":5,"9":5,"10":5,"11":5,"12":5,"13":3,"14":2,"15":5,"16":5,"17":5,"18":0,"19":0,"20":0,"21":5,"22":5,"23":2,"24":3,"25":3,"26":3,"27":3,"28":3,"29":2,"30":2,"31":1,"32":1,"33":3,"34":3,"35":3,"36":3,"37":3,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1},"f":{"0":6,"1":5,"2":5,"3":3,"4":3,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0],"1":[4,1],"2":[3,2],"3":[5,4],"4":[0],"5":[0],"6":[2],"7":[3,1],"8":[0],"9":[0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0],"15":[0,0]}},"/Users/voldeck/code/newdemo/lib/ml-service-client.ts":{"path":"/Users/voldeck/code/newdemo/lib/ml-service-client.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"1":{"start":{"line":46,"column":40},"end":{"line":51,"column":2}},"2":{"start":{"line":59,"column":19},"end":{"line":59,"column":46}},"3":{"start":{"line":62,"column":4},"end":{"line":62,"column":51}},"4":{"start":{"line":63,"column":4},"end":{"line":63,"column":27}},"5":{"start":{"line":70,"column":21},"end":{"line":70,"column":45}},"6":{"start":{"line":71,"column":23},"end":{"line":71,"column":47}},"7":{"start":{"line":74,"column":4},"end":{"line":76,"column":5}},"8":{"start":{"line":75,"column":6},"end":{"line":75,"column":54}},"9":{"start":{"line":78,"column":18},"end":{"line":78,"column":19}},"10":{"start":{"line":79,"column":34},"end":{"line":79,"column":38}},"11":{"start":{"line":81,"column":4},"end":{"line":111,"column":5}},"12":{"start":{"line":82,"column":6},"end":{"line":110,"column":7}},"13":{"start":{"line":83,"column":25},"end":{"line":89,"column":10}},"14":{"start":{"line":91,"column":42},"end":{"line":91,"column":55}},"15":{"start":{"line":94,"column":8},"end":{"line":97,"column":11}},"16":{"start":{"line":99,"column":8},"end":{"line":99,"column":22}},"17":{"start":{"line":101,"column":8},"end":{"line":101,"column":35}},"18":{"start":{"line":102,"column":8},"end":{"line":102,"column":18}},"19":{"start":{"line":104,"column":8},"end":{"line":109,"column":9}},"20":{"start":{"line":106,"column":10},"end":{"line":108,"column":12}},"21":{"start":{"line":107,"column":12},"end":{"line":107,"column":64}},"22":{"start":{"line":113,"column":4},"end":{"line":113,"column":77}},"23":{"start":{"line":120,"column":4},"end":{"line":130,"column":7}},"24":{"start":{"line":137,"column":4},"end":{"line":137,"column":23}},"25":{"start":{"line":56,"column":0},"end":{"line":56,"column":13}}},"fnMap":{"0":{"name":"(anonymous_1)","decl":{"start":{"line":61,"column":2},"end":{"line":61,"column":14}},"loc":{"start":{"line":61,"column":51},"end":{"line":64,"column":3}}},"1":{"name":"(anonymous_2)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":7}},"loc":{"start":{"line":69,"column":40},"end":{"line":114,"column":3}}},"2":{"name":"(anonymous_3)","decl":{"start":{"line":106,"column":28},"end":{"line":106,"column":35}},"loc":{"start":{"line":107,"column":12},"end":{"line":107,"column":64}}},"3":{"name":"(anonymous_4)","decl":{"start":{"line":119,"column":10},"end":{"line":119,"column":21}},"loc":{"start":{"line":119,"column":46},"end":{"line":131,"column":3}}},"4":{"name":"(anonymous_5)","decl":{"start":{"line":136,"column":2},"end":{"line":136,"column":12}},"loc":{"start":{"line":136,"column":12},"end":{"line":138,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":47,"column":12},"end":{"line":47,"column":82}},"type":"binary-expr","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":43}},{"start":{"line":47,"column":47},"end":{"line":47,"column":82}}]},"1":{"loc":{"start":{"line":61,"column":14},"end":{"line":61,"column":51}},"type":"default-arg","locations":[{"start":{"line":61,"column":49},"end":{"line":61,"column":51}}]},"2":{"loc":{"start":{"line":74,"column":4},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":76,"column":5}}]},"3":{"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":74}},"type":"binary-expr","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":18}},{"start":{"line":74,"column":22},"end":{"line":74,"column":74}}]},"4":{"loc":{"start":{"line":86,"column":16},"end":{"line":86,"column":73}},"type":"binary-expr","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":34}},{"start":{"line":86,"column":38},"end":{"line":86,"column":73}}]},"5":{"loc":{"start":{"line":104,"column":8},"end":{"line":109,"column":9}},"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":109,"column":9}}]},"6":{"loc":{"start":{"line":113,"column":10},"end":{"line":113,"column":76}},"type":"binary-expr","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":19}},{"start":{"line":113,"column":23},"end":{"line":113,"column":76}}]},"7":{"loc":{"start":{"line":124,"column":10},"end":{"line":126,"column":8}},"type":"binary-expr","locations":[{"start":{"line":124,"column":10},"end":{"line":124,"column":30}},{"start":{"line":124,"column":34},"end":{"line":126,"column":8}}]},"8":{"loc":{"start":{"line":127,"column":10},"end":{"line":129,"column":8}},"type":"binary-expr","locations":[{"start":{"line":127,"column":10},"end":{"line":127,"column":35}},{"start":{"line":127,"column":39},"end":{"line":129,"column":8}}]}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0},"b":{"0":[1,1],"1":[0],"2":[0],"3":[0,0],"4":[0,0],"5":[0],"6":[0,0],"7":[0,0],"8":[0,0]}}}}
